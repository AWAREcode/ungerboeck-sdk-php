<?php
/**
 * MailingListsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * MailingListsModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MailingListsModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MailingListsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'organization_code' => 'string',
        'description' => 'string',
        'owner' => 'string',
        'external_code' => 'string',
        'entered_on' => '\DateTime',
        'entered_by' => 'string',
        'changed_on' => '\DateTime',
        'changed_by' => 'string',
        'event_sales' => 'string',
        'tour_sales' => 'string',
        'payables' => 'string',
        'receivables' => 'string',
        'association_designation' => 'string',
        'membership' => 'string',
        'personnel' => 'string',
        'public_relations' => 'string',
        'registration' => 'string',
        'speaker_management' => 'string',
        'visitor_inquiry' => 'string',
        'active' => 'string',
        'permission_reminder' => 'string',
        'use_archive_bar' => 'string',
        'default_subject' => 'string',
        'language' => 'string',
        'subscribe_email' => 'string',
        'unsubscribe_email' => 'string',
        'allow_multiple_formats' => 'string',
        'visibility' => 'string',
        'from_email_address' => 'string',
        'from_name' => 'string',
        'default_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'organization_code' => null,
        'description' => null,
        'owner' => null,
        'external_code' => null,
        'entered_on' => 'date-time',
        'entered_by' => null,
        'changed_on' => 'date-time',
        'changed_by' => null,
        'event_sales' => null,
        'tour_sales' => null,
        'payables' => null,
        'receivables' => null,
        'association_designation' => null,
        'membership' => null,
        'personnel' => null,
        'public_relations' => null,
        'registration' => null,
        'speaker_management' => null,
        'visitor_inquiry' => null,
        'active' => null,
        'permission_reminder' => null,
        'use_archive_bar' => null,
        'default_subject' => null,
        'language' => null,
        'subscribe_email' => null,
        'unsubscribe_email' => null,
        'allow_multiple_formats' => null,
        'visibility' => null,
        'from_email_address' => null,
        'from_name' => null,
        'default_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'organization_code' => 'OrganizationCode',
        'description' => 'Description',
        'owner' => 'Owner',
        'external_code' => 'ExternalCode',
        'entered_on' => 'EnteredOn',
        'entered_by' => 'EnteredBy',
        'changed_on' => 'ChangedOn',
        'changed_by' => 'ChangedBy',
        'event_sales' => 'EventSales',
        'tour_sales' => 'TourSales',
        'payables' => 'Payables',
        'receivables' => 'Receivables',
        'association_designation' => 'AssociationDesignation',
        'membership' => 'Membership',
        'personnel' => 'Personnel',
        'public_relations' => 'PublicRelations',
        'registration' => 'Registration',
        'speaker_management' => 'SpeakerManagement',
        'visitor_inquiry' => 'VisitorInquiry',
        'active' => 'Active',
        'permission_reminder' => 'PermissionReminder',
        'use_archive_bar' => 'UseArchiveBar',
        'default_subject' => 'DefaultSubject',
        'language' => 'Language',
        'subscribe_email' => 'SubscribeEmail',
        'unsubscribe_email' => 'UnsubscribeEmail',
        'allow_multiple_formats' => 'AllowMultipleFormats',
        'visibility' => 'Visibility',
        'from_email_address' => 'FromEmailAddress',
        'from_name' => 'FromName',
        'default_status' => 'DefaultStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'organization_code' => 'setOrganizationCode',
        'description' => 'setDescription',
        'owner' => 'setOwner',
        'external_code' => 'setExternalCode',
        'entered_on' => 'setEnteredOn',
        'entered_by' => 'setEnteredBy',
        'changed_on' => 'setChangedOn',
        'changed_by' => 'setChangedBy',
        'event_sales' => 'setEventSales',
        'tour_sales' => 'setTourSales',
        'payables' => 'setPayables',
        'receivables' => 'setReceivables',
        'association_designation' => 'setAssociationDesignation',
        'membership' => 'setMembership',
        'personnel' => 'setPersonnel',
        'public_relations' => 'setPublicRelations',
        'registration' => 'setRegistration',
        'speaker_management' => 'setSpeakerManagement',
        'visitor_inquiry' => 'setVisitorInquiry',
        'active' => 'setActive',
        'permission_reminder' => 'setPermissionReminder',
        'use_archive_bar' => 'setUseArchiveBar',
        'default_subject' => 'setDefaultSubject',
        'language' => 'setLanguage',
        'subscribe_email' => 'setSubscribeEmail',
        'unsubscribe_email' => 'setUnsubscribeEmail',
        'allow_multiple_formats' => 'setAllowMultipleFormats',
        'visibility' => 'setVisibility',
        'from_email_address' => 'setFromEmailAddress',
        'from_name' => 'setFromName',
        'default_status' => 'setDefaultStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'organization_code' => 'getOrganizationCode',
        'description' => 'getDescription',
        'owner' => 'getOwner',
        'external_code' => 'getExternalCode',
        'entered_on' => 'getEnteredOn',
        'entered_by' => 'getEnteredBy',
        'changed_on' => 'getChangedOn',
        'changed_by' => 'getChangedBy',
        'event_sales' => 'getEventSales',
        'tour_sales' => 'getTourSales',
        'payables' => 'getPayables',
        'receivables' => 'getReceivables',
        'association_designation' => 'getAssociationDesignation',
        'membership' => 'getMembership',
        'personnel' => 'getPersonnel',
        'public_relations' => 'getPublicRelations',
        'registration' => 'getRegistration',
        'speaker_management' => 'getSpeakerManagement',
        'visitor_inquiry' => 'getVisitorInquiry',
        'active' => 'getActive',
        'permission_reminder' => 'getPermissionReminder',
        'use_archive_bar' => 'getUseArchiveBar',
        'default_subject' => 'getDefaultSubject',
        'language' => 'getLanguage',
        'subscribe_email' => 'getSubscribeEmail',
        'unsubscribe_email' => 'getUnsubscribeEmail',
        'allow_multiple_formats' => 'getAllowMultipleFormats',
        'visibility' => 'getVisibility',
        'from_email_address' => 'getFromEmailAddress',
        'from_name' => 'getFromName',
        'default_status' => 'getDefaultStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['organization_code'] = isset($data['organization_code']) ? $data['organization_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['external_code'] = isset($data['external_code']) ? $data['external_code'] : null;
        $this->container['entered_on'] = isset($data['entered_on']) ? $data['entered_on'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['changed_on'] = isset($data['changed_on']) ? $data['changed_on'] : null;
        $this->container['changed_by'] = isset($data['changed_by']) ? $data['changed_by'] : null;
        $this->container['event_sales'] = isset($data['event_sales']) ? $data['event_sales'] : null;
        $this->container['tour_sales'] = isset($data['tour_sales']) ? $data['tour_sales'] : null;
        $this->container['payables'] = isset($data['payables']) ? $data['payables'] : null;
        $this->container['receivables'] = isset($data['receivables']) ? $data['receivables'] : null;
        $this->container['association_designation'] = isset($data['association_designation']) ? $data['association_designation'] : null;
        $this->container['membership'] = isset($data['membership']) ? $data['membership'] : null;
        $this->container['personnel'] = isset($data['personnel']) ? $data['personnel'] : null;
        $this->container['public_relations'] = isset($data['public_relations']) ? $data['public_relations'] : null;
        $this->container['registration'] = isset($data['registration']) ? $data['registration'] : null;
        $this->container['speaker_management'] = isset($data['speaker_management']) ? $data['speaker_management'] : null;
        $this->container['visitor_inquiry'] = isset($data['visitor_inquiry']) ? $data['visitor_inquiry'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['permission_reminder'] = isset($data['permission_reminder']) ? $data['permission_reminder'] : null;
        $this->container['use_archive_bar'] = isset($data['use_archive_bar']) ? $data['use_archive_bar'] : null;
        $this->container['default_subject'] = isset($data['default_subject']) ? $data['default_subject'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['subscribe_email'] = isset($data['subscribe_email']) ? $data['subscribe_email'] : null;
        $this->container['unsubscribe_email'] = isset($data['unsubscribe_email']) ? $data['unsubscribe_email'] : null;
        $this->container['allow_multiple_formats'] = isset($data['allow_multiple_formats']) ? $data['allow_multiple_formats'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['from_email_address'] = isset($data['from_email_address']) ? $data['from_email_address'] : null;
        $this->container['from_name'] = isset($data['from_name']) ? $data['from_name'] : null;
        $this->container['default_status'] = isset($data['default_status']) ? $data['default_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['organization_code'] === null) {
            $invalidProperties[] = "'organization_code' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalidProperties[] = "'owner' can't be null";
        }
        if ($this->container['external_code'] === null) {
            $invalidProperties[] = "'external_code' can't be null";
        }
        if ($this->container['entered_on'] === null) {
            $invalidProperties[] = "'entered_on' can't be null";
        }
        if ($this->container['entered_by'] === null) {
            $invalidProperties[] = "'entered_by' can't be null";
        }
        if ($this->container['changed_on'] === null) {
            $invalidProperties[] = "'changed_on' can't be null";
        }
        if ($this->container['changed_by'] === null) {
            $invalidProperties[] = "'changed_by' can't be null";
        }
        if ($this->container['event_sales'] === null) {
            $invalidProperties[] = "'event_sales' can't be null";
        }
        if ($this->container['tour_sales'] === null) {
            $invalidProperties[] = "'tour_sales' can't be null";
        }
        if ($this->container['payables'] === null) {
            $invalidProperties[] = "'payables' can't be null";
        }
        if ($this->container['receivables'] === null) {
            $invalidProperties[] = "'receivables' can't be null";
        }
        if ($this->container['association_designation'] === null) {
            $invalidProperties[] = "'association_designation' can't be null";
        }
        if ($this->container['membership'] === null) {
            $invalidProperties[] = "'membership' can't be null";
        }
        if ($this->container['personnel'] === null) {
            $invalidProperties[] = "'personnel' can't be null";
        }
        if ($this->container['public_relations'] === null) {
            $invalidProperties[] = "'public_relations' can't be null";
        }
        if ($this->container['registration'] === null) {
            $invalidProperties[] = "'registration' can't be null";
        }
        if ($this->container['speaker_management'] === null) {
            $invalidProperties[] = "'speaker_management' can't be null";
        }
        if ($this->container['visitor_inquiry'] === null) {
            $invalidProperties[] = "'visitor_inquiry' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['permission_reminder'] === null) {
            $invalidProperties[] = "'permission_reminder' can't be null";
        }
        if ($this->container['use_archive_bar'] === null) {
            $invalidProperties[] = "'use_archive_bar' can't be null";
        }
        if ($this->container['default_subject'] === null) {
            $invalidProperties[] = "'default_subject' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['subscribe_email'] === null) {
            $invalidProperties[] = "'subscribe_email' can't be null";
        }
        if ($this->container['unsubscribe_email'] === null) {
            $invalidProperties[] = "'unsubscribe_email' can't be null";
        }
        if ($this->container['allow_multiple_formats'] === null) {
            $invalidProperties[] = "'allow_multiple_formats' can't be null";
        }
        if ($this->container['visibility'] === null) {
            $invalidProperties[] = "'visibility' can't be null";
        }
        if ($this->container['from_email_address'] === null) {
            $invalidProperties[] = "'from_email_address' can't be null";
        }
        if ($this->container['from_name'] === null) {
            $invalidProperties[] = "'from_name' can't be null";
        }
        if ($this->container['default_status'] === null) {
            $invalidProperties[] = "'default_status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets organization_code
     *
     * @return string
     */
    public function getOrganizationCode()
    {
        return $this->container['organization_code'];
    }

    /**
     * Sets organization_code
     *
     * @param string $organization_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_ORG_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrganizationCode($organization_code)
    {
        $this->container['organization_code'] = $organization_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_DESC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 255  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_OWNER  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets external_code
     *
     * @return string
     */
    public function getExternalCode()
    {
        return $this->container['external_code'];
    }

    /**
     * Sets external_code
     *
     * @param string $external_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_EXTERNAL_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 50  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setExternalCode($external_code)
    {
        $this->container['external_code'] = $external_code;

        return $this;
    }

    /**
     * Gets entered_on
     *
     * @return \DateTime
     */
    public function getEnteredOn()
    {
        return $this->container['entered_on'];
    }

    /**
     * Sets entered_on
     *
     * @param \DateTime $entered_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_ENT_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredOn($entered_on)
    {
        $this->container['entered_on'] = $entered_on;

        return $this;
    }

    /**
     * Gets entered_by
     *
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     *
     * @param string $entered_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_ENT_USER  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets changed_on
     *
     * @return \DateTime
     */
    public function getChangedOn()
    {
        return $this->container['changed_on'];
    }

    /**
     * Sets changed_on
     *
     * @param \DateTime $changed_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_UPD_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedOn($changed_on)
    {
        $this->container['changed_on'] = $changed_on;

        return $this;
    }

    /**
     * Gets changed_by
     *
     * @return string
     */
    public function getChangedBy()
    {
        return $this->container['changed_by'];
    }

    /**
     * Sets changed_by
     *
     * @param string $changed_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_UPD_USER  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedBy($changed_by)
    {
        $this->container['changed_by'] = $changed_by;

        return $this;
    }

    /**
     * Gets event_sales
     *
     * @return string
     */
    public function getEventSales()
    {
        return $this->container['event_sales'];
    }

    /**
     * Sets event_sales
     *
     * @param string $event_sales <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_EVT_SALES_DESIG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEventSales($event_sales)
    {
        $this->container['event_sales'] = $event_sales;

        return $this;
    }

    /**
     * Gets tour_sales
     *
     * @return string
     */
    public function getTourSales()
    {
        return $this->container['tour_sales'];
    }

    /**
     * Sets tour_sales
     *
     * @param string $tour_sales <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_TOUR_DESIG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setTourSales($tour_sales)
    {
        $this->container['tour_sales'] = $tour_sales;

        return $this;
    }

    /**
     * Gets payables
     *
     * @return string
     */
    public function getPayables()
    {
        return $this->container['payables'];
    }

    /**
     * Sets payables
     *
     * @param string $payables <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_AP_DESIG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPayables($payables)
    {
        $this->container['payables'] = $payables;

        return $this;
    }

    /**
     * Gets receivables
     *
     * @return string
     */
    public function getReceivables()
    {
        return $this->container['receivables'];
    }

    /**
     * Sets receivables
     *
     * @param string $receivables <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_AR_DESIG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setReceivables($receivables)
    {
        $this->container['receivables'] = $receivables;

        return $this;
    }

    /**
     * Gets association_designation
     *
     * @return string
     */
    public function getAssociationDesignation()
    {
        return $this->container['association_designation'];
    }

    /**
     * Sets association_designation
     *
     * @param string $association_designation <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_ASSOC_DESIG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAssociationDesignation($association_designation)
    {
        $this->container['association_designation'] = $association_designation;

        return $this;
    }

    /**
     * Gets membership
     *
     * @return string
     */
    public function getMembership()
    {
        return $this->container['membership'];
    }

    /**
     * Sets membership
     *
     * @param string $membership <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_MEMBER_DESIG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setMembership($membership)
    {
        $this->container['membership'] = $membership;

        return $this;
    }

    /**
     * Gets personnel
     *
     * @return string
     */
    public function getPersonnel()
    {
        return $this->container['personnel'];
    }

    /**
     * Sets personnel
     *
     * @param string $personnel <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_PERS_DESIG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPersonnel($personnel)
    {
        $this->container['personnel'] = $personnel;

        return $this;
    }

    /**
     * Gets public_relations
     *
     * @return string
     */
    public function getPublicRelations()
    {
        return $this->container['public_relations'];
    }

    /**
     * Sets public_relations
     *
     * @param string $public_relations <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_PUBREL_DESIG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPublicRelations($public_relations)
    {
        $this->container['public_relations'] = $public_relations;

        return $this;
    }

    /**
     * Gets registration
     *
     * @return string
     */
    public function getRegistration()
    {
        return $this->container['registration'];
    }

    /**
     * Sets registration
     *
     * @param string $registration <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_REGIS_DESIG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setRegistration($registration)
    {
        $this->container['registration'] = $registration;

        return $this;
    }

    /**
     * Gets speaker_management
     *
     * @return string
     */
    public function getSpeakerManagement()
    {
        return $this->container['speaker_management'];
    }

    /**
     * Sets speaker_management
     *
     * @param string $speaker_management <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_SPKR_DESIG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSpeakerManagement($speaker_management)
    {
        $this->container['speaker_management'] = $speaker_management;

        return $this;
    }

    /**
     * Gets visitor_inquiry
     *
     * @return string
     */
    public function getVisitorInquiry()
    {
        return $this->container['visitor_inquiry'];
    }

    /**
     * Sets visitor_inquiry
     *
     * @param string $visitor_inquiry <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_VISITOR_DESIG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setVisitorInquiry($visitor_inquiry)
    {
        $this->container['visitor_inquiry'] = $visitor_inquiry;

        return $this;
    }

    /**
     * Gets active
     *
     * @return string
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param string $active <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_ACTIVE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets permission_reminder
     *
     * @return string
     */
    public function getPermissionReminder()
    {
        return $this->container['permission_reminder'];
    }

    /**
     * Sets permission_reminder
     *
     * @param string $permission_reminder <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_REMINDER  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 200  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPermissionReminder($permission_reminder)
    {
        $this->container['permission_reminder'] = $permission_reminder;

        return $this;
    }

    /**
     * Gets use_archive_bar
     *
     * @return string
     */
    public function getUseArchiveBar()
    {
        return $this->container['use_archive_bar'];
    }

    /**
     * Sets use_archive_bar
     *
     * @param string $use_archive_bar <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_USE_ARCH_BAR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUseArchiveBar($use_archive_bar)
    {
        $this->container['use_archive_bar'] = $use_archive_bar;

        return $this;
    }

    /**
     * Gets default_subject
     *
     * @return string
     */
    public function getDefaultSubject()
    {
        return $this->container['default_subject'];
    }

    /**
     * Sets default_subject
     *
     * @param string $default_subject <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_DEFAULT_SUBJECT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 255  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDefaultSubject($default_subject)
    {
        $this->container['default_subject'] = $default_subject;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_LANGUAGE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 5  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets subscribe_email
     *
     * @return string
     */
    public function getSubscribeEmail()
    {
        return $this->container['subscribe_email'];
    }

    /**
     * Sets subscribe_email
     *
     * @param string $subscribe_email <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_SUBSCRIBE_EMAIL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 150  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSubscribeEmail($subscribe_email)
    {
        $this->container['subscribe_email'] = $subscribe_email;

        return $this;
    }

    /**
     * Gets unsubscribe_email
     *
     * @return string
     */
    public function getUnsubscribeEmail()
    {
        return $this->container['unsubscribe_email'];
    }

    /**
     * Sets unsubscribe_email
     *
     * @param string $unsubscribe_email <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_UNSUBSCRIBE_EMAIL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 150  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUnsubscribeEmail($unsubscribe_email)
    {
        $this->container['unsubscribe_email'] = $unsubscribe_email;

        return $this;
    }

    /**
     * Gets allow_multiple_formats
     *
     * @return string
     */
    public function getAllowMultipleFormats()
    {
        return $this->container['allow_multiple_formats'];
    }

    /**
     * Sets allow_multiple_formats
     *
     * @param string $allow_multiple_formats <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_MULTIPLE_FORMATS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAllowMultipleFormats($allow_multiple_formats)
    {
        $this->container['allow_multiple_formats'] = $allow_multiple_formats;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string $visibility <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_VISIBILITY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets from_email_address
     *
     * @return string
     */
    public function getFromEmailAddress()
    {
        return $this->container['from_email_address'];
    }

    /**
     * Sets from_email_address
     *
     * @param string $from_email_address <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_FROM_ADDRESS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 150  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setFromEmailAddress($from_email_address)
    {
        $this->container['from_email_address'] = $from_email_address;

        return $this;
    }

    /**
     * Gets from_name
     *
     * @return string
     */
    public function getFromName()
    {
        return $this->container['from_name'];
    }

    /**
     * Sets from_name
     *
     * @param string $from_name <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_FROM_NAME  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 150  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setFromName($from_name)
    {
        $this->container['from_name'] = $from_name;

        return $this;
    }

    /**
     * Gets default_status
     *
     * @return string
     */
    public function getDefaultStatus()
    {
        return $this->container['default_status'];
    }

    /**
     * Sets default_status
     *
     * @param string $default_status <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM840_DEFAULT_STATUS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 15  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDefaultStatus($default_status)
    {
        $this->container['default_status'] = $default_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


