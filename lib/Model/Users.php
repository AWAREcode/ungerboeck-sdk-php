<?php
/**
 * Users
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * Users Class Doc Comment
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Users implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Users';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'display_name' => 'string',
        'login_id' => 'string',
        'email' => 'string',
        'copy_organizations' => 'string',
        'copy_roles' => 'string',
        'copy_menus' => 'string',
        'copy_access_privileges' => 'string',
        'copy_settings' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'display_name' => null,
        'login_id' => null,
        'email' => null,
        'copy_organizations' => null,
        'copy_roles' => null,
        'copy_menus' => null,
        'copy_access_privileges' => null,
        'copy_settings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'display_name' => 'DisplayName',
        'login_id' => 'LoginID',
        'email' => 'Email',
        'copy_organizations' => 'CopyOrganizations',
        'copy_roles' => 'CopyRoles',
        'copy_menus' => 'CopyMenus',
        'copy_access_privileges' => 'CopyAccessPrivileges',
        'copy_settings' => 'CopySettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'display_name' => 'setDisplayName',
        'login_id' => 'setLoginId',
        'email' => 'setEmail',
        'copy_organizations' => 'setCopyOrganizations',
        'copy_roles' => 'setCopyRoles',
        'copy_menus' => 'setCopyMenus',
        'copy_access_privileges' => 'setCopyAccessPrivileges',
        'copy_settings' => 'setCopySettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'display_name' => 'getDisplayName',
        'login_id' => 'getLoginId',
        'email' => 'getEmail',
        'copy_organizations' => 'getCopyOrganizations',
        'copy_roles' => 'getCopyRoles',
        'copy_menus' => 'getCopyMenus',
        'copy_access_privileges' => 'getCopyAccessPrivileges',
        'copy_settings' => 'getCopySettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['login_id'] = isset($data['login_id']) ? $data['login_id'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['copy_organizations'] = isset($data['copy_organizations']) ? $data['copy_organizations'] : null;
        $this->container['copy_roles'] = isset($data['copy_roles']) ? $data['copy_roles'] : null;
        $this->container['copy_menus'] = isset($data['copy_menus']) ? $data['copy_menus'] : null;
        $this->container['copy_access_privileges'] = isset($data['copy_access_privileges']) ? $data['copy_access_privileges'] : null;
        $this->container['copy_settings'] = isset($data['copy_settings']) ? $data['copy_settings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['login_id'] === null) {
            $invalidProperties[] = "'login_id' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['copy_organizations'] === null) {
            $invalidProperties[] = "'copy_organizations' can't be null";
        }
        if ($this->container['copy_roles'] === null) {
            $invalidProperties[] = "'copy_roles' can't be null";
        }
        if ($this->container['copy_menus'] === null) {
            $invalidProperties[] = "'copy_menus' can't be null";
        }
        if ($this->container['copy_access_privileges'] === null) {
            $invalidProperties[] = "'copy_access_privileges' can't be null";
        }
        if ($this->container['copy_settings'] === null) {
            $invalidProperties[] = "'copy_settings' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Identifying property used in the URLs.  This is required and cannot be auto-filled.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> MM405_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_USER_NAME  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 30  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets login_id
     *
     * @return string
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     *
     * @param string $login_id <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_LOGIN_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 128  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLoginId($login_id)
    {
        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> The SendActivateUserEmail() Users endpoint will send an email to this address.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> MM405_EMAIL_ADDRESS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 255  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets copy_organizations
     *
     * @return string
     */
    public function getCopyOrganizations()
    {
        return $this->container['copy_organizations'];
    }

    /**
     * Sets copy_organizations
     *
     * @param string $copy_organizations <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cCOPY_ORGANIZATIONS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCopyOrganizations($copy_organizations)
    {
        $this->container['copy_organizations'] = $copy_organizations;

        return $this;
    }

    /**
     * Gets copy_roles
     *
     * @return string
     */
    public function getCopyRoles()
    {
        return $this->container['copy_roles'];
    }

    /**
     * Sets copy_roles
     *
     * @param string $copy_roles <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cCOPY_ROLES  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCopyRoles($copy_roles)
    {
        $this->container['copy_roles'] = $copy_roles;

        return $this;
    }

    /**
     * Gets copy_menus
     *
     * @return string
     */
    public function getCopyMenus()
    {
        return $this->container['copy_menus'];
    }

    /**
     * Sets copy_menus
     *
     * @param string $copy_menus <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cCOPY_MENUS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCopyMenus($copy_menus)
    {
        $this->container['copy_menus'] = $copy_menus;

        return $this;
    }

    /**
     * Gets copy_access_privileges
     *
     * @return string
     */
    public function getCopyAccessPrivileges()
    {
        return $this->container['copy_access_privileges'];
    }

    /**
     * Sets copy_access_privileges
     *
     * @param string $copy_access_privileges <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cCOPY_ACCESS_PRIVILEGES  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCopyAccessPrivileges($copy_access_privileges)
    {
        $this->container['copy_access_privileges'] = $copy_access_privileges;

        return $this;
    }

    /**
     * Gets copy_settings
     *
     * @return string
     */
    public function getCopySettings()
    {
        return $this->container['copy_settings'];
    }

    /**
     * Sets copy_settings
     *
     * @param string $copy_settings <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cCOPY_SETTINGS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCopySettings($copy_settings)
    {
        $this->container['copy_settings'] = $copy_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


