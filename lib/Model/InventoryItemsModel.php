<?php
/**
 * InventoryItemsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * InventoryItemsModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryItemsModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryItemsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization' => 'string',
        'code' => 'string',
        'item_description' => 'string',
        'abbreviated_description' => 'string',
        'class' => 'string',
        'product_group' => 'string',
        'lot_serial_control' => 'string',
        'physical_count' => 'string',
        'taxed' => 'string',
        'non_stock_items' => 'string',
        'stocking_um' => 'string',
        'purchasing_um' => 'string',
        'selling_um' => 'string',
        'department' => 'string',
        'stock_to_sell' => 'double',
        'purchase_to_stock' => 'double',
        'entered_on' => '\DateTime',
        'entered_by' => 'string',
        'changed_on' => '\DateTime',
        'changed_by' => 'string',
        'status' => 'string',
        'lead_days' => 'int',
        'location' => 'string',
        'sub_location' => 'string',
        'default_space' => 'string',
        'current_balance' => 'double',
        'decimals' => 'int',
        'major' => 'string',
        'minor' => 'string',
        'minimum_on_hand' => 'double',
        'image' => 'string',
        'update_supplier_cost' => 'string',
        'barcode' => 'string',
        'management_report_code' => 'string',
        'price_check' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization' => null,
        'code' => null,
        'item_description' => null,
        'abbreviated_description' => null,
        'class' => null,
        'product_group' => null,
        'lot_serial_control' => null,
        'physical_count' => null,
        'taxed' => null,
        'non_stock_items' => null,
        'stocking_um' => null,
        'purchasing_um' => null,
        'selling_um' => null,
        'department' => null,
        'stock_to_sell' => 'double',
        'purchase_to_stock' => 'double',
        'entered_on' => 'date-time',
        'entered_by' => null,
        'changed_on' => 'date-time',
        'changed_by' => null,
        'status' => null,
        'lead_days' => 'int32',
        'location' => null,
        'sub_location' => null,
        'default_space' => null,
        'current_balance' => 'double',
        'decimals' => 'int32',
        'major' => null,
        'minor' => null,
        'minimum_on_hand' => 'double',
        'image' => 'byte',
        'update_supplier_cost' => null,
        'barcode' => null,
        'management_report_code' => null,
        'price_check' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization' => 'Organization',
        'code' => 'Code',
        'item_description' => 'ItemDescription',
        'abbreviated_description' => 'AbbreviatedDescription',
        'class' => 'Class',
        'product_group' => 'ProductGroup',
        'lot_serial_control' => 'LotSerialControl',
        'physical_count' => 'PhysicalCount',
        'taxed' => 'Taxed',
        'non_stock_items' => 'NonStockItems',
        'stocking_um' => 'StockingUM',
        'purchasing_um' => 'PurchasingUM',
        'selling_um' => 'SellingUM',
        'department' => 'Department',
        'stock_to_sell' => 'StockToSell',
        'purchase_to_stock' => 'PurchaseToStock',
        'entered_on' => 'EnteredOn',
        'entered_by' => 'EnteredBy',
        'changed_on' => 'ChangedOn',
        'changed_by' => 'ChangedBy',
        'status' => 'Status',
        'lead_days' => 'LeadDays',
        'location' => 'Location',
        'sub_location' => 'SubLocation',
        'default_space' => 'DefaultSpace',
        'current_balance' => 'CurrentBalance',
        'decimals' => 'Decimals',
        'major' => 'Major',
        'minor' => 'Minor',
        'minimum_on_hand' => 'MinimumOnHand',
        'image' => 'Image',
        'update_supplier_cost' => 'UpdateSupplierCost',
        'barcode' => 'Barcode',
        'management_report_code' => 'ManagementReportCode',
        'price_check' => 'PriceCheck'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization' => 'setOrganization',
        'code' => 'setCode',
        'item_description' => 'setItemDescription',
        'abbreviated_description' => 'setAbbreviatedDescription',
        'class' => 'setClass',
        'product_group' => 'setProductGroup',
        'lot_serial_control' => 'setLotSerialControl',
        'physical_count' => 'setPhysicalCount',
        'taxed' => 'setTaxed',
        'non_stock_items' => 'setNonStockItems',
        'stocking_um' => 'setStockingUm',
        'purchasing_um' => 'setPurchasingUm',
        'selling_um' => 'setSellingUm',
        'department' => 'setDepartment',
        'stock_to_sell' => 'setStockToSell',
        'purchase_to_stock' => 'setPurchaseToStock',
        'entered_on' => 'setEnteredOn',
        'entered_by' => 'setEnteredBy',
        'changed_on' => 'setChangedOn',
        'changed_by' => 'setChangedBy',
        'status' => 'setStatus',
        'lead_days' => 'setLeadDays',
        'location' => 'setLocation',
        'sub_location' => 'setSubLocation',
        'default_space' => 'setDefaultSpace',
        'current_balance' => 'setCurrentBalance',
        'decimals' => 'setDecimals',
        'major' => 'setMajor',
        'minor' => 'setMinor',
        'minimum_on_hand' => 'setMinimumOnHand',
        'image' => 'setImage',
        'update_supplier_cost' => 'setUpdateSupplierCost',
        'barcode' => 'setBarcode',
        'management_report_code' => 'setManagementReportCode',
        'price_check' => 'setPriceCheck'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization' => 'getOrganization',
        'code' => 'getCode',
        'item_description' => 'getItemDescription',
        'abbreviated_description' => 'getAbbreviatedDescription',
        'class' => 'getClass',
        'product_group' => 'getProductGroup',
        'lot_serial_control' => 'getLotSerialControl',
        'physical_count' => 'getPhysicalCount',
        'taxed' => 'getTaxed',
        'non_stock_items' => 'getNonStockItems',
        'stocking_um' => 'getStockingUm',
        'purchasing_um' => 'getPurchasingUm',
        'selling_um' => 'getSellingUm',
        'department' => 'getDepartment',
        'stock_to_sell' => 'getStockToSell',
        'purchase_to_stock' => 'getPurchaseToStock',
        'entered_on' => 'getEnteredOn',
        'entered_by' => 'getEnteredBy',
        'changed_on' => 'getChangedOn',
        'changed_by' => 'getChangedBy',
        'status' => 'getStatus',
        'lead_days' => 'getLeadDays',
        'location' => 'getLocation',
        'sub_location' => 'getSubLocation',
        'default_space' => 'getDefaultSpace',
        'current_balance' => 'getCurrentBalance',
        'decimals' => 'getDecimals',
        'major' => 'getMajor',
        'minor' => 'getMinor',
        'minimum_on_hand' => 'getMinimumOnHand',
        'image' => 'getImage',
        'update_supplier_cost' => 'getUpdateSupplierCost',
        'barcode' => 'getBarcode',
        'management_report_code' => 'getManagementReportCode',
        'price_check' => 'getPriceCheck'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['item_description'] = isset($data['item_description']) ? $data['item_description'] : null;
        $this->container['abbreviated_description'] = isset($data['abbreviated_description']) ? $data['abbreviated_description'] : null;
        $this->container['class'] = isset($data['class']) ? $data['class'] : null;
        $this->container['product_group'] = isset($data['product_group']) ? $data['product_group'] : null;
        $this->container['lot_serial_control'] = isset($data['lot_serial_control']) ? $data['lot_serial_control'] : null;
        $this->container['physical_count'] = isset($data['physical_count']) ? $data['physical_count'] : null;
        $this->container['taxed'] = isset($data['taxed']) ? $data['taxed'] : null;
        $this->container['non_stock_items'] = isset($data['non_stock_items']) ? $data['non_stock_items'] : null;
        $this->container['stocking_um'] = isset($data['stocking_um']) ? $data['stocking_um'] : null;
        $this->container['purchasing_um'] = isset($data['purchasing_um']) ? $data['purchasing_um'] : null;
        $this->container['selling_um'] = isset($data['selling_um']) ? $data['selling_um'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['stock_to_sell'] = isset($data['stock_to_sell']) ? $data['stock_to_sell'] : null;
        $this->container['purchase_to_stock'] = isset($data['purchase_to_stock']) ? $data['purchase_to_stock'] : null;
        $this->container['entered_on'] = isset($data['entered_on']) ? $data['entered_on'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['changed_on'] = isset($data['changed_on']) ? $data['changed_on'] : null;
        $this->container['changed_by'] = isset($data['changed_by']) ? $data['changed_by'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['lead_days'] = isset($data['lead_days']) ? $data['lead_days'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['sub_location'] = isset($data['sub_location']) ? $data['sub_location'] : null;
        $this->container['default_space'] = isset($data['default_space']) ? $data['default_space'] : null;
        $this->container['current_balance'] = isset($data['current_balance']) ? $data['current_balance'] : null;
        $this->container['decimals'] = isset($data['decimals']) ? $data['decimals'] : null;
        $this->container['major'] = isset($data['major']) ? $data['major'] : null;
        $this->container['minor'] = isset($data['minor']) ? $data['minor'] : null;
        $this->container['minimum_on_hand'] = isset($data['minimum_on_hand']) ? $data['minimum_on_hand'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['update_supplier_cost'] = isset($data['update_supplier_cost']) ? $data['update_supplier_cost'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['management_report_code'] = isset($data['management_report_code']) ? $data['management_report_code'] : null;
        $this->container['price_check'] = isset($data['price_check']) ? $data['price_check'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['organization'] === null) {
            $invalidProperties[] = "'organization' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['item_description'] === null) {
            $invalidProperties[] = "'item_description' can't be null";
        }
        if ($this->container['abbreviated_description'] === null) {
            $invalidProperties[] = "'abbreviated_description' can't be null";
        }
        if ($this->container['class'] === null) {
            $invalidProperties[] = "'class' can't be null";
        }
        if ($this->container['product_group'] === null) {
            $invalidProperties[] = "'product_group' can't be null";
        }
        if ($this->container['lot_serial_control'] === null) {
            $invalidProperties[] = "'lot_serial_control' can't be null";
        }
        if ($this->container['physical_count'] === null) {
            $invalidProperties[] = "'physical_count' can't be null";
        }
        if ($this->container['taxed'] === null) {
            $invalidProperties[] = "'taxed' can't be null";
        }
        if ($this->container['non_stock_items'] === null) {
            $invalidProperties[] = "'non_stock_items' can't be null";
        }
        if ($this->container['stocking_um'] === null) {
            $invalidProperties[] = "'stocking_um' can't be null";
        }
        if ($this->container['purchasing_um'] === null) {
            $invalidProperties[] = "'purchasing_um' can't be null";
        }
        if ($this->container['selling_um'] === null) {
            $invalidProperties[] = "'selling_um' can't be null";
        }
        if ($this->container['department'] === null) {
            $invalidProperties[] = "'department' can't be null";
        }
        if ($this->container['stock_to_sell'] === null) {
            $invalidProperties[] = "'stock_to_sell' can't be null";
        }
        if ($this->container['purchase_to_stock'] === null) {
            $invalidProperties[] = "'purchase_to_stock' can't be null";
        }
        if ($this->container['entered_on'] === null) {
            $invalidProperties[] = "'entered_on' can't be null";
        }
        if ($this->container['entered_by'] === null) {
            $invalidProperties[] = "'entered_by' can't be null";
        }
        if ($this->container['changed_on'] === null) {
            $invalidProperties[] = "'changed_on' can't be null";
        }
        if ($this->container['changed_by'] === null) {
            $invalidProperties[] = "'changed_by' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['lead_days'] === null) {
            $invalidProperties[] = "'lead_days' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['sub_location'] === null) {
            $invalidProperties[] = "'sub_location' can't be null";
        }
        if ($this->container['default_space'] === null) {
            $invalidProperties[] = "'default_space' can't be null";
        }
        if ($this->container['current_balance'] === null) {
            $invalidProperties[] = "'current_balance' can't be null";
        }
        if ($this->container['decimals'] === null) {
            $invalidProperties[] = "'decimals' can't be null";
        }
        if ($this->container['major'] === null) {
            $invalidProperties[] = "'major' can't be null";
        }
        if ($this->container['minor'] === null) {
            $invalidProperties[] = "'minor' can't be null";
        }
        if ($this->container['minimum_on_hand'] === null) {
            $invalidProperties[] = "'minimum_on_hand' can't be null";
        }
        if ($this->container['image'] === null) {
            $invalidProperties[] = "'image' can't be null";
        }
        if (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['image'])) {
            $invalidProperties[] = "invalid value for 'image', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if ($this->container['update_supplier_cost'] === null) {
            $invalidProperties[] = "'update_supplier_cost' can't be null";
        }
        if ($this->container['barcode'] === null) {
            $invalidProperties[] = "'barcode' can't be null";
        }
        if ($this->container['management_report_code'] === null) {
            $invalidProperties[] = "'management_report_code' can't be null";
        }
        if ($this->container['price_check'] === null) {
            $invalidProperties[] = "'price_check' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization
     *
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string $organization <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_ORG_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_INV_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 12  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets item_description
     *
     * @return string
     */
    public function getItemDescription()
    {
        return $this->container['item_description'];
    }

    /**
     * Sets item_description
     *
     * @param string $item_description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_DESC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 255  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setItemDescription($item_description)
    {
        $this->container['item_description'] = $item_description;

        return $this;
    }

    /**
     * Gets abbreviated_description
     *
     * @return string
     */
    public function getAbbreviatedDescription()
    {
        return $this->container['abbreviated_description'];
    }

    /**
     * Sets abbreviated_description
     *
     * @param string $abbreviated_description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_DESC_SHORT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 16  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAbbreviatedDescription($abbreviated_description)
    {
        $this->container['abbreviated_description'] = $abbreviated_description;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string $class <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_RES_CLASS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setClass($class)
    {
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets product_group
     *
     * @return string
     */
    public function getProductGroup()
    {
        return $this->container['product_group'];
    }

    /**
     * Sets product_group
     *
     * @param string $product_group <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_PROD_GROUP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setProductGroup($product_group)
    {
        $this->container['product_group'] = $product_group;

        return $this;
    }

    /**
     * Gets lot_serial_control
     *
     * @return string
     */
    public function getLotSerialControl()
    {
        return $this->container['lot_serial_control'];
    }

    /**
     * Sets lot_serial_control
     *
     * @param string $lot_serial_control <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_LOT_SERIAL_CTL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLotSerialControl($lot_serial_control)
    {
        $this->container['lot_serial_control'] = $lot_serial_control;

        return $this;
    }

    /**
     * Gets physical_count
     *
     * @return string
     */
    public function getPhysicalCount()
    {
        return $this->container['physical_count'];
    }

    /**
     * Sets physical_count
     *
     * @param string $physical_count <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_PHYS_COUNT_FREQ  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPhysicalCount($physical_count)
    {
        $this->container['physical_count'] = $physical_count;

        return $this;
    }

    /**
     * Gets taxed
     *
     * @return string
     */
    public function getTaxed()
    {
        return $this->container['taxed'];
    }

    /**
     * Sets taxed
     *
     * @param string $taxed <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_TAXABLE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setTaxed($taxed)
    {
        $this->container['taxed'] = $taxed;

        return $this;
    }

    /**
     * Gets non_stock_items
     *
     * @return string
     */
    public function getNonStockItems()
    {
        return $this->container['non_stock_items'];
    }

    /**
     * Sets non_stock_items
     *
     * @param string $non_stock_items <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_NON_STOCK_ITEM  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setNonStockItems($non_stock_items)
    {
        $this->container['non_stock_items'] = $non_stock_items;

        return $this;
    }

    /**
     * Gets stocking_um
     *
     * @return string
     */
    public function getStockingUm()
    {
        return $this->container['stocking_um'];
    }

    /**
     * Sets stocking_um
     *
     * @param string $stocking_um <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_UOM_STK  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setStockingUm($stocking_um)
    {
        $this->container['stocking_um'] = $stocking_um;

        return $this;
    }

    /**
     * Gets purchasing_um
     *
     * @return string
     */
    public function getPurchasingUm()
    {
        return $this->container['purchasing_um'];
    }

    /**
     * Sets purchasing_um
     *
     * @param string $purchasing_um <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_UOM_PUR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPurchasingUm($purchasing_um)
    {
        $this->container['purchasing_um'] = $purchasing_um;

        return $this;
    }

    /**
     * Gets selling_um
     *
     * @return string
     */
    public function getSellingUm()
    {
        return $this->container['selling_um'];
    }

    /**
     * Sets selling_um
     *
     * @param string $selling_um <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_UOM_SEL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSellingUm($selling_um)
    {
        $this->container['selling_um'] = $selling_um;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_DEPT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets stock_to_sell
     *
     * @return double
     */
    public function getStockToSell()
    {
        return $this->container['stock_to_sell'];
    }

    /**
     * Sets stock_to_sell
     *
     * @param double $stock_to_sell <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_UNIT_SEL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 114  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setStockToSell($stock_to_sell)
    {
        $this->container['stock_to_sell'] = $stock_to_sell;

        return $this;
    }

    /**
     * Gets purchase_to_stock
     *
     * @return double
     */
    public function getPurchaseToStock()
    {
        return $this->container['purchase_to_stock'];
    }

    /**
     * Sets purchase_to_stock
     *
     * @param double $purchase_to_stock <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_UNIT_PUR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 114  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPurchaseToStock($purchase_to_stock)
    {
        $this->container['purchase_to_stock'] = $purchase_to_stock;

        return $this;
    }

    /**
     * Gets entered_on
     *
     * @return \DateTime
     */
    public function getEnteredOn()
    {
        return $this->container['entered_on'];
    }

    /**
     * Sets entered_on
     *
     * @param \DateTime $entered_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_ENT_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredOn($entered_on)
    {
        $this->container['entered_on'] = $entered_on;

        return $this;
    }

    /**
     * Gets entered_by
     *
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     *
     * @param string $entered_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_ENT_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets changed_on
     *
     * @return \DateTime
     */
    public function getChangedOn()
    {
        return $this->container['changed_on'];
    }

    /**
     * Sets changed_on
     *
     * @param \DateTime $changed_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_UPD_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedOn($changed_on)
    {
        $this->container['changed_on'] = $changed_on;

        return $this;
    }

    /**
     * Gets changed_by
     *
     * @return string
     */
    public function getChangedBy()
    {
        return $this->container['changed_by'];
    }

    /**
     * Sets changed_by
     *
     * @param string $changed_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_UPD_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedBy($changed_by)
    {
        $this->container['changed_by'] = $changed_by;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_STATUS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets lead_days
     *
     * @return int
     */
    public function getLeadDays()
    {
        return $this->container['lead_days'];
    }

    /**
     * Sets lead_days
     *
     * @param int $lead_days <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_LEAD_DAYS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLeadDays($lead_days)
    {
        $this->container['lead_days'] = $lead_days;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_WH_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets sub_location
     *
     * @return string
     */
    public function getSubLocation()
    {
        return $this->container['sub_location'];
    }

    /**
     * Sets sub_location
     *
     * @param string $sub_location <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_LOC_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 20  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSubLocation($sub_location)
    {
        $this->container['sub_location'] = $sub_location;

        return $this;
    }

    /**
     * Gets default_space
     *
     * @return string
     */
    public function getDefaultSpace()
    {
        return $this->container['default_space'];
    }

    /**
     * Sets default_space
     *
     * @param string $default_space <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_DEFAULT_SPACE_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDefaultSpace($default_space)
    {
        $this->container['default_space'] = $default_space;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return double
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param double $current_balance <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_CURR_BAL_QTY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 144  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCurrentBalance($current_balance)
    {
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets decimals
     *
     * @return int
     */
    public function getDecimals()
    {
        return $this->container['decimals'];
    }

    /**
     * Sets decimals
     *
     * @param int $decimals <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_DECIMALS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDecimals($decimals)
    {
        $this->container['decimals'] = $decimals;

        return $this;
    }

    /**
     * Gets major
     *
     * @return string
     */
    public function getMajor()
    {
        return $this->container['major'];
    }

    /**
     * Sets major
     *
     * @param string $major <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_MAJOR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setMajor($major)
    {
        $this->container['major'] = $major;

        return $this;
    }

    /**
     * Gets minor
     *
     * @return string
     */
    public function getMinor()
    {
        return $this->container['minor'];
    }

    /**
     * Sets minor
     *
     * @param string $minor <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_MINOR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setMinor($minor)
    {
        $this->container['minor'] = $minor;

        return $this;
    }

    /**
     * Gets minimum_on_hand
     *
     * @return double
     */
    public function getMinimumOnHand()
    {
        return $this->container['minimum_on_hand'];
    }

    /**
     * Sets minimum_on_hand
     *
     * @param double $minimum_on_hand <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_MIN_QTY_OH  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setMinimumOnHand($minimum_on_hand)
    {
        $this->container['minimum_on_hand'] = $minimum_on_hand;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_ITEM_PIC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setImage($image)
    {

        if ((!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $image))) {
            throw new \InvalidArgumentException("invalid value for $image when calling InventoryItemsModel., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets update_supplier_cost
     *
     * @return string
     */
    public function getUpdateSupplierCost()
    {
        return $this->container['update_supplier_cost'];
    }

    /**
     * Sets update_supplier_cost
     *
     * @param string $update_supplier_cost <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_UPD_SUPPLIER_COST  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUpdateSupplierCost($update_supplier_cost)
    {
        $this->container['update_supplier_cost'] = $update_supplier_cost;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_BARCODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 50  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets management_report_code
     *
     * @return string
     */
    public function getManagementReportCode()
    {
        return $this->container['management_report_code'];
    }

    /**
     * Sets management_report_code
     *
     * @param string $management_report_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_MGMT_RPT_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setManagementReportCode($management_report_code)
    {
        $this->container['management_report_code'] = $management_report_code;

        return $this;
    }

    /**
     * Gets price_check
     *
     * @return string
     */
    public function getPriceCheck()
    {
        return $this->container['price_check'];
    }

    /**
     * Sets price_check
     *
     * @param string $price_check <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN100_PRICE_CHECK  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPriceCheck($price_check)
    {
        $this->container['price_check'] = $price_check;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


