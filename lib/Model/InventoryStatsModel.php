<?php
/**
 * InventoryStatsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * InventoryStatsModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryStatsModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryStatsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization' => 'string',
        'item' => 'string',
        'space' => 'string',
        'lot_serial_number' => 'string',
        'last_purchase_amount' => 'double',
        'last_purchase_date' => '\DateTime',
        'last_purchase_units' => 'double',
        'last_physical_count_date' => '\DateTime',
        'last_physical_count_units' => 'double',
        'entered_on' => '\DateTime',
        'entered_by' => 'string',
        'changed_on' => '\DateTime',
        'changed_by' => 'string',
        'po_number' => 'int',
        'supplier' => 'string',
        'last_purchase_unit_cost' => 'double',
        'minimum_units' => 'double',
        'reorder_point' => 'double',
        'reorder_units' => 'double',
        'average_unit_cost' => 'double',
        'unit_cost' => 'double',
        'location' => 'string',
        'sub_location' => 'string',
        'retired' => 'string',
        'current_balance' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization' => null,
        'item' => null,
        'space' => null,
        'lot_serial_number' => null,
        'last_purchase_amount' => 'double',
        'last_purchase_date' => 'date-time',
        'last_purchase_units' => 'double',
        'last_physical_count_date' => 'date-time',
        'last_physical_count_units' => 'double',
        'entered_on' => 'date-time',
        'entered_by' => null,
        'changed_on' => 'date-time',
        'changed_by' => null,
        'po_number' => 'int32',
        'supplier' => null,
        'last_purchase_unit_cost' => 'double',
        'minimum_units' => 'double',
        'reorder_point' => 'double',
        'reorder_units' => 'double',
        'average_unit_cost' => 'double',
        'unit_cost' => 'double',
        'location' => null,
        'sub_location' => null,
        'retired' => null,
        'current_balance' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization' => 'Organization',
        'item' => 'Item',
        'space' => 'Space',
        'lot_serial_number' => 'LotSerialNumber',
        'last_purchase_amount' => 'LastPurchaseAmount',
        'last_purchase_date' => 'LastPurchaseDate',
        'last_purchase_units' => 'LastPurchaseUnits',
        'last_physical_count_date' => 'LastPhysicalCountDate',
        'last_physical_count_units' => 'LastPhysicalCountUnits',
        'entered_on' => 'EnteredOn',
        'entered_by' => 'EnteredBy',
        'changed_on' => 'ChangedOn',
        'changed_by' => 'ChangedBy',
        'po_number' => 'PONumber',
        'supplier' => 'Supplier',
        'last_purchase_unit_cost' => 'LastPurchaseUnitCost',
        'minimum_units' => 'MinimumUnits',
        'reorder_point' => 'ReorderPoint',
        'reorder_units' => 'ReorderUnits',
        'average_unit_cost' => 'AverageUnitCost',
        'unit_cost' => 'UnitCost',
        'location' => 'Location',
        'sub_location' => 'SubLocation',
        'retired' => 'Retired',
        'current_balance' => 'CurrentBalance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization' => 'setOrganization',
        'item' => 'setItem',
        'space' => 'setSpace',
        'lot_serial_number' => 'setLotSerialNumber',
        'last_purchase_amount' => 'setLastPurchaseAmount',
        'last_purchase_date' => 'setLastPurchaseDate',
        'last_purchase_units' => 'setLastPurchaseUnits',
        'last_physical_count_date' => 'setLastPhysicalCountDate',
        'last_physical_count_units' => 'setLastPhysicalCountUnits',
        'entered_on' => 'setEnteredOn',
        'entered_by' => 'setEnteredBy',
        'changed_on' => 'setChangedOn',
        'changed_by' => 'setChangedBy',
        'po_number' => 'setPoNumber',
        'supplier' => 'setSupplier',
        'last_purchase_unit_cost' => 'setLastPurchaseUnitCost',
        'minimum_units' => 'setMinimumUnits',
        'reorder_point' => 'setReorderPoint',
        'reorder_units' => 'setReorderUnits',
        'average_unit_cost' => 'setAverageUnitCost',
        'unit_cost' => 'setUnitCost',
        'location' => 'setLocation',
        'sub_location' => 'setSubLocation',
        'retired' => 'setRetired',
        'current_balance' => 'setCurrentBalance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization' => 'getOrganization',
        'item' => 'getItem',
        'space' => 'getSpace',
        'lot_serial_number' => 'getLotSerialNumber',
        'last_purchase_amount' => 'getLastPurchaseAmount',
        'last_purchase_date' => 'getLastPurchaseDate',
        'last_purchase_units' => 'getLastPurchaseUnits',
        'last_physical_count_date' => 'getLastPhysicalCountDate',
        'last_physical_count_units' => 'getLastPhysicalCountUnits',
        'entered_on' => 'getEnteredOn',
        'entered_by' => 'getEnteredBy',
        'changed_on' => 'getChangedOn',
        'changed_by' => 'getChangedBy',
        'po_number' => 'getPoNumber',
        'supplier' => 'getSupplier',
        'last_purchase_unit_cost' => 'getLastPurchaseUnitCost',
        'minimum_units' => 'getMinimumUnits',
        'reorder_point' => 'getReorderPoint',
        'reorder_units' => 'getReorderUnits',
        'average_unit_cost' => 'getAverageUnitCost',
        'unit_cost' => 'getUnitCost',
        'location' => 'getLocation',
        'sub_location' => 'getSubLocation',
        'retired' => 'getRetired',
        'current_balance' => 'getCurrentBalance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['space'] = isset($data['space']) ? $data['space'] : null;
        $this->container['lot_serial_number'] = isset($data['lot_serial_number']) ? $data['lot_serial_number'] : null;
        $this->container['last_purchase_amount'] = isset($data['last_purchase_amount']) ? $data['last_purchase_amount'] : null;
        $this->container['last_purchase_date'] = isset($data['last_purchase_date']) ? $data['last_purchase_date'] : null;
        $this->container['last_purchase_units'] = isset($data['last_purchase_units']) ? $data['last_purchase_units'] : null;
        $this->container['last_physical_count_date'] = isset($data['last_physical_count_date']) ? $data['last_physical_count_date'] : null;
        $this->container['last_physical_count_units'] = isset($data['last_physical_count_units']) ? $data['last_physical_count_units'] : null;
        $this->container['entered_on'] = isset($data['entered_on']) ? $data['entered_on'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['changed_on'] = isset($data['changed_on']) ? $data['changed_on'] : null;
        $this->container['changed_by'] = isset($data['changed_by']) ? $data['changed_by'] : null;
        $this->container['po_number'] = isset($data['po_number']) ? $data['po_number'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['last_purchase_unit_cost'] = isset($data['last_purchase_unit_cost']) ? $data['last_purchase_unit_cost'] : null;
        $this->container['minimum_units'] = isset($data['minimum_units']) ? $data['minimum_units'] : null;
        $this->container['reorder_point'] = isset($data['reorder_point']) ? $data['reorder_point'] : null;
        $this->container['reorder_units'] = isset($data['reorder_units']) ? $data['reorder_units'] : null;
        $this->container['average_unit_cost'] = isset($data['average_unit_cost']) ? $data['average_unit_cost'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['sub_location'] = isset($data['sub_location']) ? $data['sub_location'] : null;
        $this->container['retired'] = isset($data['retired']) ? $data['retired'] : null;
        $this->container['current_balance'] = isset($data['current_balance']) ? $data['current_balance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['organization'] === null) {
            $invalidProperties[] = "'organization' can't be null";
        }
        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        if ($this->container['space'] === null) {
            $invalidProperties[] = "'space' can't be null";
        }
        if ($this->container['lot_serial_number'] === null) {
            $invalidProperties[] = "'lot_serial_number' can't be null";
        }
        if ($this->container['last_purchase_amount'] === null) {
            $invalidProperties[] = "'last_purchase_amount' can't be null";
        }
        if ($this->container['last_purchase_date'] === null) {
            $invalidProperties[] = "'last_purchase_date' can't be null";
        }
        if ($this->container['last_purchase_units'] === null) {
            $invalidProperties[] = "'last_purchase_units' can't be null";
        }
        if ($this->container['last_physical_count_date'] === null) {
            $invalidProperties[] = "'last_physical_count_date' can't be null";
        }
        if ($this->container['last_physical_count_units'] === null) {
            $invalidProperties[] = "'last_physical_count_units' can't be null";
        }
        if ($this->container['entered_on'] === null) {
            $invalidProperties[] = "'entered_on' can't be null";
        }
        if ($this->container['entered_by'] === null) {
            $invalidProperties[] = "'entered_by' can't be null";
        }
        if ($this->container['changed_on'] === null) {
            $invalidProperties[] = "'changed_on' can't be null";
        }
        if ($this->container['changed_by'] === null) {
            $invalidProperties[] = "'changed_by' can't be null";
        }
        if ($this->container['po_number'] === null) {
            $invalidProperties[] = "'po_number' can't be null";
        }
        if ($this->container['supplier'] === null) {
            $invalidProperties[] = "'supplier' can't be null";
        }
        if ($this->container['last_purchase_unit_cost'] === null) {
            $invalidProperties[] = "'last_purchase_unit_cost' can't be null";
        }
        if ($this->container['minimum_units'] === null) {
            $invalidProperties[] = "'minimum_units' can't be null";
        }
        if ($this->container['reorder_point'] === null) {
            $invalidProperties[] = "'reorder_point' can't be null";
        }
        if ($this->container['reorder_units'] === null) {
            $invalidProperties[] = "'reorder_units' can't be null";
        }
        if ($this->container['average_unit_cost'] === null) {
            $invalidProperties[] = "'average_unit_cost' can't be null";
        }
        if ($this->container['unit_cost'] === null) {
            $invalidProperties[] = "'unit_cost' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['sub_location'] === null) {
            $invalidProperties[] = "'sub_location' can't be null";
        }
        if ($this->container['retired'] === null) {
            $invalidProperties[] = "'retired' can't be null";
        }
        if ($this->container['current_balance'] === null) {
            $invalidProperties[] = "'current_balance' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization
     *
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string $organization <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_ORG_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets item
     *
     * @return string
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param string $item <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_INV_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 12  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets space
     *
     * @return string
     */
    public function getSpace()
    {
        return $this->container['space'];
    }

    /**
     * Sets space
     *
     * @param string $space <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_SPACE_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSpace($space)
    {
        $this->container['space'] = $space;

        return $this;
    }

    /**
     * Gets lot_serial_number
     *
     * @return string
     */
    public function getLotSerialNumber()
    {
        return $this->container['lot_serial_number'];
    }

    /**
     * Sets lot_serial_number
     *
     * @param string $lot_serial_number <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_LOT_SERIAL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 50  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLotSerialNumber($lot_serial_number)
    {
        $this->container['lot_serial_number'] = $lot_serial_number;

        return $this;
    }

    /**
     * Gets last_purchase_amount
     *
     * @return double
     */
    public function getLastPurchaseAmount()
    {
        return $this->container['last_purchase_amount'];
    }

    /**
     * Sets last_purchase_amount
     *
     * @param double $last_purchase_amount <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_LAST_PUR_COST  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLastPurchaseAmount($last_purchase_amount)
    {
        $this->container['last_purchase_amount'] = $last_purchase_amount;

        return $this;
    }

    /**
     * Gets last_purchase_date
     *
     * @return \DateTime
     */
    public function getLastPurchaseDate()
    {
        return $this->container['last_purchase_date'];
    }

    /**
     * Sets last_purchase_date
     *
     * @param \DateTime $last_purchase_date <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_LAST_PUR_DATE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLastPurchaseDate($last_purchase_date)
    {
        $this->container['last_purchase_date'] = $last_purchase_date;

        return $this;
    }

    /**
     * Gets last_purchase_units
     *
     * @return double
     */
    public function getLastPurchaseUnits()
    {
        return $this->container['last_purchase_units'];
    }

    /**
     * Sets last_purchase_units
     *
     * @param double $last_purchase_units <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_LAST_PUR_QTY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLastPurchaseUnits($last_purchase_units)
    {
        $this->container['last_purchase_units'] = $last_purchase_units;

        return $this;
    }

    /**
     * Gets last_physical_count_date
     *
     * @return \DateTime
     */
    public function getLastPhysicalCountDate()
    {
        return $this->container['last_physical_count_date'];
    }

    /**
     * Sets last_physical_count_date
     *
     * @param \DateTime $last_physical_count_date <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_LAST_COUNT_DATE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLastPhysicalCountDate($last_physical_count_date)
    {
        $this->container['last_physical_count_date'] = $last_physical_count_date;

        return $this;
    }

    /**
     * Gets last_physical_count_units
     *
     * @return double
     */
    public function getLastPhysicalCountUnits()
    {
        return $this->container['last_physical_count_units'];
    }

    /**
     * Sets last_physical_count_units
     *
     * @param double $last_physical_count_units <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_LAST_COUNT_QTY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLastPhysicalCountUnits($last_physical_count_units)
    {
        $this->container['last_physical_count_units'] = $last_physical_count_units;

        return $this;
    }

    /**
     * Gets entered_on
     *
     * @return \DateTime
     */
    public function getEnteredOn()
    {
        return $this->container['entered_on'];
    }

    /**
     * Sets entered_on
     *
     * @param \DateTime $entered_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_ENT_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredOn($entered_on)
    {
        $this->container['entered_on'] = $entered_on;

        return $this;
    }

    /**
     * Gets entered_by
     *
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     *
     * @param string $entered_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_ENT_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets changed_on
     *
     * @return \DateTime
     */
    public function getChangedOn()
    {
        return $this->container['changed_on'];
    }

    /**
     * Sets changed_on
     *
     * @param \DateTime $changed_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_UPD_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedOn($changed_on)
    {
        $this->container['changed_on'] = $changed_on;

        return $this;
    }

    /**
     * Gets changed_by
     *
     * @return string
     */
    public function getChangedBy()
    {
        return $this->container['changed_by'];
    }

    /**
     * Sets changed_by
     *
     * @param string $changed_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_UPD_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedBy($changed_by)
    {
        $this->container['changed_by'] = $changed_by;

        return $this;
    }

    /**
     * Gets po_number
     *
     * @return int
     */
    public function getPoNumber()
    {
        return $this->container['po_number'];
    }

    /**
     * Sets po_number
     *
     * @param int $po_number <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_PO_NBR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPoNumber($po_number)
    {
        $this->container['po_number'] = $po_number;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return string
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string $supplier <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_SUPPLIER  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 8  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets last_purchase_unit_cost
     *
     * @return double
     */
    public function getLastPurchaseUnitCost()
    {
        return $this->container['last_purchase_unit_cost'];
    }

    /**
     * Sets last_purchase_unit_cost
     *
     * @param double $last_purchase_unit_cost <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_LAST_PUR_UNIT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLastPurchaseUnitCost($last_purchase_unit_cost)
    {
        $this->container['last_purchase_unit_cost'] = $last_purchase_unit_cost;

        return $this;
    }

    /**
     * Gets minimum_units
     *
     * @return double
     */
    public function getMinimumUnits()
    {
        return $this->container['minimum_units'];
    }

    /**
     * Sets minimum_units
     *
     * @param double $minimum_units <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_MIN_QTY_OH  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setMinimumUnits($minimum_units)
    {
        $this->container['minimum_units'] = $minimum_units;

        return $this;
    }

    /**
     * Gets reorder_point
     *
     * @return double
     */
    public function getReorderPoint()
    {
        return $this->container['reorder_point'];
    }

    /**
     * Sets reorder_point
     *
     * @param double $reorder_point <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_REORDER_PT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setReorderPoint($reorder_point)
    {
        $this->container['reorder_point'] = $reorder_point;

        return $this;
    }

    /**
     * Gets reorder_units
     *
     * @return double
     */
    public function getReorderUnits()
    {
        return $this->container['reorder_units'];
    }

    /**
     * Sets reorder_units
     *
     * @param double $reorder_units <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_REORDER_QTY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setReorderUnits($reorder_units)
    {
        $this->container['reorder_units'] = $reorder_units;

        return $this;
    }

    /**
     * Gets average_unit_cost
     *
     * @return double
     */
    public function getAverageUnitCost()
    {
        return $this->container['average_unit_cost'];
    }

    /**
     * Sets average_unit_cost
     *
     * @param double $average_unit_cost <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_AVG_UNIT_COST  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAverageUnitCost($average_unit_cost)
    {
        $this->container['average_unit_cost'] = $average_unit_cost;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return double
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param double $unit_cost <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_UNIT_COST  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_WH_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets sub_location
     *
     * @return string
     */
    public function getSubLocation()
    {
        return $this->container['sub_location'];
    }

    /**
     * Sets sub_location
     *
     * @param string $sub_location <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_LOC_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 20  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSubLocation($sub_location)
    {
        $this->container['sub_location'] = $sub_location;

        return $this;
    }

    /**
     * Gets retired
     *
     * @return string
     */
    public function getRetired()
    {
        return $this->container['retired'];
    }

    /**
     * Sets retired
     *
     * @param string $retired <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_RETIRE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setRetired($retired)
    {
        $this->container['retired'] = $retired;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return double
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param double $current_balance <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN102_CURR_BAL_QTY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 144  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCurrentBalance($current_balance)
    {
        $this->container['current_balance'] = $current_balance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


