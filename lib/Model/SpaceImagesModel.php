<?php
/**
 * SpaceImagesModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * SpaceImagesModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SpaceImagesModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SpaceImagesModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'org_code' => 'string',
        'space' => 'string',
        'setup' => 'string',
        'description' => 'string',
        'entered_on' => '\DateTime',
        'entered_by_code' => 'string',
        'changed_on' => '\DateTime',
        'changed_by_code' => 'string',
        'main_image_id' => 'int',
        'thumbnail_image_id' => 'int',
        'sequence' => 'int',
        'main_image' => 'string',
        'thumbnail_image' => 'string',
        'alt_text_main' => 'string',
        'alt_text_alternate_description1_main' => 'string',
        'alt_text_alternate_description2_main' => 'string',
        'alt_text_alternate_description3_main' => 'string',
        'alt_text_alternate_description4_main' => 'string',
        'alt_text_alternate_description5_main' => 'string',
        'alt_text_thumbnail' => 'string',
        'alt_text_alternate_description1_thumbnail' => 'string',
        'alt_text_alternate_description2_thumbnail' => 'string',
        'alt_text_alternate_description3_thumbnail' => 'string',
        'alt_text_alternate_description4_thumbnail' => 'string',
        'alt_text_alternate_description5_thumbnail' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'org_code' => null,
        'space' => null,
        'setup' => null,
        'description' => null,
        'entered_on' => 'date-time',
        'entered_by_code' => null,
        'changed_on' => 'date-time',
        'changed_by_code' => null,
        'main_image_id' => 'int32',
        'thumbnail_image_id' => 'int32',
        'sequence' => 'int32',
        'main_image' => 'byte',
        'thumbnail_image' => 'byte',
        'alt_text_main' => null,
        'alt_text_alternate_description1_main' => null,
        'alt_text_alternate_description2_main' => null,
        'alt_text_alternate_description3_main' => null,
        'alt_text_alternate_description4_main' => null,
        'alt_text_alternate_description5_main' => null,
        'alt_text_thumbnail' => null,
        'alt_text_alternate_description1_thumbnail' => null,
        'alt_text_alternate_description2_thumbnail' => null,
        'alt_text_alternate_description3_thumbnail' => null,
        'alt_text_alternate_description4_thumbnail' => null,
        'alt_text_alternate_description5_thumbnail' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'org_code' => 'OrgCode',
        'space' => 'Space',
        'setup' => 'Setup',
        'description' => 'Description',
        'entered_on' => 'EnteredOn',
        'entered_by_code' => 'EnteredByCode',
        'changed_on' => 'ChangedOn',
        'changed_by_code' => 'ChangedByCode',
        'main_image_id' => 'MainImageId',
        'thumbnail_image_id' => 'ThumbnailImageId',
        'sequence' => 'Sequence',
        'main_image' => 'MainImage',
        'thumbnail_image' => 'ThumbnailImage',
        'alt_text_main' => 'AltTextMain',
        'alt_text_alternate_description1_main' => 'AltTextAlternateDescription1Main',
        'alt_text_alternate_description2_main' => 'AltTextAlternateDescription2Main',
        'alt_text_alternate_description3_main' => 'AltTextAlternateDescription3Main',
        'alt_text_alternate_description4_main' => 'AltTextAlternateDescription4Main',
        'alt_text_alternate_description5_main' => 'AltTextAlternateDescription5Main',
        'alt_text_thumbnail' => 'AltTextThumbnail',
        'alt_text_alternate_description1_thumbnail' => 'AltTextAlternateDescription1Thumbnail',
        'alt_text_alternate_description2_thumbnail' => 'AltTextAlternateDescription2Thumbnail',
        'alt_text_alternate_description3_thumbnail' => 'AltTextAlternateDescription3Thumbnail',
        'alt_text_alternate_description4_thumbnail' => 'AltTextAlternateDescription4Thumbnail',
        'alt_text_alternate_description5_thumbnail' => 'AltTextAlternateDescription5Thumbnail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'org_code' => 'setOrgCode',
        'space' => 'setSpace',
        'setup' => 'setSetup',
        'description' => 'setDescription',
        'entered_on' => 'setEnteredOn',
        'entered_by_code' => 'setEnteredByCode',
        'changed_on' => 'setChangedOn',
        'changed_by_code' => 'setChangedByCode',
        'main_image_id' => 'setMainImageId',
        'thumbnail_image_id' => 'setThumbnailImageId',
        'sequence' => 'setSequence',
        'main_image' => 'setMainImage',
        'thumbnail_image' => 'setThumbnailImage',
        'alt_text_main' => 'setAltTextMain',
        'alt_text_alternate_description1_main' => 'setAltTextAlternateDescription1Main',
        'alt_text_alternate_description2_main' => 'setAltTextAlternateDescription2Main',
        'alt_text_alternate_description3_main' => 'setAltTextAlternateDescription3Main',
        'alt_text_alternate_description4_main' => 'setAltTextAlternateDescription4Main',
        'alt_text_alternate_description5_main' => 'setAltTextAlternateDescription5Main',
        'alt_text_thumbnail' => 'setAltTextThumbnail',
        'alt_text_alternate_description1_thumbnail' => 'setAltTextAlternateDescription1Thumbnail',
        'alt_text_alternate_description2_thumbnail' => 'setAltTextAlternateDescription2Thumbnail',
        'alt_text_alternate_description3_thumbnail' => 'setAltTextAlternateDescription3Thumbnail',
        'alt_text_alternate_description4_thumbnail' => 'setAltTextAlternateDescription4Thumbnail',
        'alt_text_alternate_description5_thumbnail' => 'setAltTextAlternateDescription5Thumbnail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'org_code' => 'getOrgCode',
        'space' => 'getSpace',
        'setup' => 'getSetup',
        'description' => 'getDescription',
        'entered_on' => 'getEnteredOn',
        'entered_by_code' => 'getEnteredByCode',
        'changed_on' => 'getChangedOn',
        'changed_by_code' => 'getChangedByCode',
        'main_image_id' => 'getMainImageId',
        'thumbnail_image_id' => 'getThumbnailImageId',
        'sequence' => 'getSequence',
        'main_image' => 'getMainImage',
        'thumbnail_image' => 'getThumbnailImage',
        'alt_text_main' => 'getAltTextMain',
        'alt_text_alternate_description1_main' => 'getAltTextAlternateDescription1Main',
        'alt_text_alternate_description2_main' => 'getAltTextAlternateDescription2Main',
        'alt_text_alternate_description3_main' => 'getAltTextAlternateDescription3Main',
        'alt_text_alternate_description4_main' => 'getAltTextAlternateDescription4Main',
        'alt_text_alternate_description5_main' => 'getAltTextAlternateDescription5Main',
        'alt_text_thumbnail' => 'getAltTextThumbnail',
        'alt_text_alternate_description1_thumbnail' => 'getAltTextAlternateDescription1Thumbnail',
        'alt_text_alternate_description2_thumbnail' => 'getAltTextAlternateDescription2Thumbnail',
        'alt_text_alternate_description3_thumbnail' => 'getAltTextAlternateDescription3Thumbnail',
        'alt_text_alternate_description4_thumbnail' => 'getAltTextAlternateDescription4Thumbnail',
        'alt_text_alternate_description5_thumbnail' => 'getAltTextAlternateDescription5Thumbnail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['org_code'] = isset($data['org_code']) ? $data['org_code'] : null;
        $this->container['space'] = isset($data['space']) ? $data['space'] : null;
        $this->container['setup'] = isset($data['setup']) ? $data['setup'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['entered_on'] = isset($data['entered_on']) ? $data['entered_on'] : null;
        $this->container['entered_by_code'] = isset($data['entered_by_code']) ? $data['entered_by_code'] : null;
        $this->container['changed_on'] = isset($data['changed_on']) ? $data['changed_on'] : null;
        $this->container['changed_by_code'] = isset($data['changed_by_code']) ? $data['changed_by_code'] : null;
        $this->container['main_image_id'] = isset($data['main_image_id']) ? $data['main_image_id'] : null;
        $this->container['thumbnail_image_id'] = isset($data['thumbnail_image_id']) ? $data['thumbnail_image_id'] : null;
        $this->container['sequence'] = isset($data['sequence']) ? $data['sequence'] : null;
        $this->container['main_image'] = isset($data['main_image']) ? $data['main_image'] : null;
        $this->container['thumbnail_image'] = isset($data['thumbnail_image']) ? $data['thumbnail_image'] : null;
        $this->container['alt_text_main'] = isset($data['alt_text_main']) ? $data['alt_text_main'] : null;
        $this->container['alt_text_alternate_description1_main'] = isset($data['alt_text_alternate_description1_main']) ? $data['alt_text_alternate_description1_main'] : null;
        $this->container['alt_text_alternate_description2_main'] = isset($data['alt_text_alternate_description2_main']) ? $data['alt_text_alternate_description2_main'] : null;
        $this->container['alt_text_alternate_description3_main'] = isset($data['alt_text_alternate_description3_main']) ? $data['alt_text_alternate_description3_main'] : null;
        $this->container['alt_text_alternate_description4_main'] = isset($data['alt_text_alternate_description4_main']) ? $data['alt_text_alternate_description4_main'] : null;
        $this->container['alt_text_alternate_description5_main'] = isset($data['alt_text_alternate_description5_main']) ? $data['alt_text_alternate_description5_main'] : null;
        $this->container['alt_text_thumbnail'] = isset($data['alt_text_thumbnail']) ? $data['alt_text_thumbnail'] : null;
        $this->container['alt_text_alternate_description1_thumbnail'] = isset($data['alt_text_alternate_description1_thumbnail']) ? $data['alt_text_alternate_description1_thumbnail'] : null;
        $this->container['alt_text_alternate_description2_thumbnail'] = isset($data['alt_text_alternate_description2_thumbnail']) ? $data['alt_text_alternate_description2_thumbnail'] : null;
        $this->container['alt_text_alternate_description3_thumbnail'] = isset($data['alt_text_alternate_description3_thumbnail']) ? $data['alt_text_alternate_description3_thumbnail'] : null;
        $this->container['alt_text_alternate_description4_thumbnail'] = isset($data['alt_text_alternate_description4_thumbnail']) ? $data['alt_text_alternate_description4_thumbnail'] : null;
        $this->container['alt_text_alternate_description5_thumbnail'] = isset($data['alt_text_alternate_description5_thumbnail']) ? $data['alt_text_alternate_description5_thumbnail'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['org_code'] === null) {
            $invalidProperties[] = "'org_code' can't be null";
        }
        if ($this->container['space'] === null) {
            $invalidProperties[] = "'space' can't be null";
        }
        if ($this->container['setup'] === null) {
            $invalidProperties[] = "'setup' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['entered_on'] === null) {
            $invalidProperties[] = "'entered_on' can't be null";
        }
        if ($this->container['entered_by_code'] === null) {
            $invalidProperties[] = "'entered_by_code' can't be null";
        }
        if ($this->container['changed_on'] === null) {
            $invalidProperties[] = "'changed_on' can't be null";
        }
        if ($this->container['changed_by_code'] === null) {
            $invalidProperties[] = "'changed_by_code' can't be null";
        }
        if ($this->container['main_image_id'] === null) {
            $invalidProperties[] = "'main_image_id' can't be null";
        }
        if ($this->container['thumbnail_image_id'] === null) {
            $invalidProperties[] = "'thumbnail_image_id' can't be null";
        }
        if ($this->container['sequence'] === null) {
            $invalidProperties[] = "'sequence' can't be null";
        }
        if ($this->container['main_image'] === null) {
            $invalidProperties[] = "'main_image' can't be null";
        }
        if (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['main_image'])) {
            $invalidProperties[] = "invalid value for 'main_image', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if ($this->container['thumbnail_image'] === null) {
            $invalidProperties[] = "'thumbnail_image' can't be null";
        }
        if (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['thumbnail_image'])) {
            $invalidProperties[] = "invalid value for 'thumbnail_image', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if ($this->container['alt_text_main'] === null) {
            $invalidProperties[] = "'alt_text_main' can't be null";
        }
        if ($this->container['alt_text_alternate_description1_main'] === null) {
            $invalidProperties[] = "'alt_text_alternate_description1_main' can't be null";
        }
        if ($this->container['alt_text_alternate_description2_main'] === null) {
            $invalidProperties[] = "'alt_text_alternate_description2_main' can't be null";
        }
        if ($this->container['alt_text_alternate_description3_main'] === null) {
            $invalidProperties[] = "'alt_text_alternate_description3_main' can't be null";
        }
        if ($this->container['alt_text_alternate_description4_main'] === null) {
            $invalidProperties[] = "'alt_text_alternate_description4_main' can't be null";
        }
        if ($this->container['alt_text_alternate_description5_main'] === null) {
            $invalidProperties[] = "'alt_text_alternate_description5_main' can't be null";
        }
        if ($this->container['alt_text_thumbnail'] === null) {
            $invalidProperties[] = "'alt_text_thumbnail' can't be null";
        }
        if ($this->container['alt_text_alternate_description1_thumbnail'] === null) {
            $invalidProperties[] = "'alt_text_alternate_description1_thumbnail' can't be null";
        }
        if ($this->container['alt_text_alternate_description2_thumbnail'] === null) {
            $invalidProperties[] = "'alt_text_alternate_description2_thumbnail' can't be null";
        }
        if ($this->container['alt_text_alternate_description3_thumbnail'] === null) {
            $invalidProperties[] = "'alt_text_alternate_description3_thumbnail' can't be null";
        }
        if ($this->container['alt_text_alternate_description4_thumbnail'] === null) {
            $invalidProperties[] = "'alt_text_alternate_description4_thumbnail' can't be null";
        }
        if ($this->container['alt_text_alternate_description5_thumbnail'] === null) {
            $invalidProperties[] = "'alt_text_alternate_description5_thumbnail' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> SPACE_IMAGE_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets org_code
     *
     * @return string
     */
    public function getOrgCode()
    {
        return $this->container['org_code'];
    }

    /**
     * Sets org_code
     *
     * @param string $org_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ORG_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Add Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrgCode($org_code)
    {
        $this->container['org_code'] = $org_code;

        return $this;
    }

    /**
     * Gets space
     *
     * @return string
     */
    public function getSpace()
    {
        return $this->container['space'];
    }

    /**
     * Sets space
     *
     * @param string $space <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> SPACE_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Add Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSpace($space)
    {
        $this->container['space'] = $space;

        return $this;
    }

    /**
     * Gets setup
     *
     * @return string
     */
    public function getSetup()
    {
        return $this->container['setup'];
    }

    /**
     * Sets setup
     *
     * @param string $setup <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> SETUP_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 8  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSetup($setup)
    {
        $this->container['setup'] = $setup;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> DESCRIPTION  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 100  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets entered_on
     *
     * @return \DateTime
     */
    public function getEnteredOn()
    {
        return $this->container['entered_on'];
    }

    /**
     * Sets entered_on
     *
     * @param \DateTime $entered_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ENTERED_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredOn($entered_on)
    {
        $this->container['entered_on'] = $entered_on;

        return $this;
    }

    /**
     * Gets entered_by_code
     *
     * @return string
     */
    public function getEnteredByCode()
    {
        return $this->container['entered_by_code'];
    }

    /**
     * Sets entered_by_code
     *
     * @param string $entered_by_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ENTERED_USER  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredByCode($entered_by_code)
    {
        $this->container['entered_by_code'] = $entered_by_code;

        return $this;
    }

    /**
     * Gets changed_on
     *
     * @return \DateTime
     */
    public function getChangedOn()
    {
        return $this->container['changed_on'];
    }

    /**
     * Sets changed_on
     *
     * @param \DateTime $changed_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> UPDATED_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedOn($changed_on)
    {
        $this->container['changed_on'] = $changed_on;

        return $this;
    }

    /**
     * Gets changed_by_code
     *
     * @return string
     */
    public function getChangedByCode()
    {
        return $this->container['changed_by_code'];
    }

    /**
     * Sets changed_by_code
     *
     * @param string $changed_by_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> UPDATED_USER  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedByCode($changed_by_code)
    {
        $this->container['changed_by_code'] = $changed_by_code;

        return $this;
    }

    /**
     * Gets main_image_id
     *
     * @return int
     */
    public function getMainImageId()
    {
        return $this->container['main_image_id'];
    }

    /**
     * Sets main_image_id
     *
     * @param int $main_image_id <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MAIN_IMAGE_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setMainImageId($main_image_id)
    {
        $this->container['main_image_id'] = $main_image_id;

        return $this;
    }

    /**
     * Gets thumbnail_image_id
     *
     * @return int
     */
    public function getThumbnailImageId()
    {
        return $this->container['thumbnail_image_id'];
    }

    /**
     * Sets thumbnail_image_id
     *
     * @param int $thumbnail_image_id <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> THUMBNAIL_IMAGE_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setThumbnailImageId($thumbnail_image_id)
    {
        $this->container['thumbnail_image_id'] = $thumbnail_image_id;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return int
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param int $sequence <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> SEQUENCE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSequence($sequence)
    {
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets main_image
     *
     * @return string
     */
    public function getMainImage()
    {
        return $this->container['main_image'];
    }

    /**
     * Sets main_image
     *
     * @param string $main_image <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cIMAGE_MAIN  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setMainImage($main_image)
    {

        if ((!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $main_image))) {
            throw new \InvalidArgumentException("invalid value for $main_image when calling SpaceImagesModel., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['main_image'] = $main_image;

        return $this;
    }

    /**
     * Gets thumbnail_image
     *
     * @return string
     */
    public function getThumbnailImage()
    {
        return $this->container['thumbnail_image'];
    }

    /**
     * Sets thumbnail_image
     *
     * @param string $thumbnail_image <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cIMAGE_THUMBNAIL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setThumbnailImage($thumbnail_image)
    {

        if ((!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $thumbnail_image))) {
            throw new \InvalidArgumentException("invalid value for $thumbnail_image when calling SpaceImagesModel., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['thumbnail_image'] = $thumbnail_image;

        return $this;
    }

    /**
     * Gets alt_text_main
     *
     * @return string
     */
    public function getAltTextMain()
    {
        return $this->container['alt_text_main'];
    }

    /**
     * Sets alt_text_main
     *
     * @param string $alt_text_main <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cALTERNATE_TEXT_MAIN  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 500  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAltTextMain($alt_text_main)
    {
        $this->container['alt_text_main'] = $alt_text_main;

        return $this;
    }

    /**
     * Gets alt_text_alternate_description1_main
     *
     * @return string
     */
    public function getAltTextAlternateDescription1Main()
    {
        return $this->container['alt_text_alternate_description1_main'];
    }

    /**
     * Sets alt_text_alternate_description1_main
     *
     * @param string $alt_text_alternate_description1_main <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cALTERNATE_TEXT_ALT1_MAIN  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 500  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAltTextAlternateDescription1Main($alt_text_alternate_description1_main)
    {
        $this->container['alt_text_alternate_description1_main'] = $alt_text_alternate_description1_main;

        return $this;
    }

    /**
     * Gets alt_text_alternate_description2_main
     *
     * @return string
     */
    public function getAltTextAlternateDescription2Main()
    {
        return $this->container['alt_text_alternate_description2_main'];
    }

    /**
     * Sets alt_text_alternate_description2_main
     *
     * @param string $alt_text_alternate_description2_main <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cALTERNATE_TEXT_ALT2_MAIN  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 500  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAltTextAlternateDescription2Main($alt_text_alternate_description2_main)
    {
        $this->container['alt_text_alternate_description2_main'] = $alt_text_alternate_description2_main;

        return $this;
    }

    /**
     * Gets alt_text_alternate_description3_main
     *
     * @return string
     */
    public function getAltTextAlternateDescription3Main()
    {
        return $this->container['alt_text_alternate_description3_main'];
    }

    /**
     * Sets alt_text_alternate_description3_main
     *
     * @param string $alt_text_alternate_description3_main <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cALTERNATE_TEXT_ALT3_MAIN  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 500  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAltTextAlternateDescription3Main($alt_text_alternate_description3_main)
    {
        $this->container['alt_text_alternate_description3_main'] = $alt_text_alternate_description3_main;

        return $this;
    }

    /**
     * Gets alt_text_alternate_description4_main
     *
     * @return string
     */
    public function getAltTextAlternateDescription4Main()
    {
        return $this->container['alt_text_alternate_description4_main'];
    }

    /**
     * Sets alt_text_alternate_description4_main
     *
     * @param string $alt_text_alternate_description4_main <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cALTERNATE_TEXT_ALT4_MAIN  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 500  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAltTextAlternateDescription4Main($alt_text_alternate_description4_main)
    {
        $this->container['alt_text_alternate_description4_main'] = $alt_text_alternate_description4_main;

        return $this;
    }

    /**
     * Gets alt_text_alternate_description5_main
     *
     * @return string
     */
    public function getAltTextAlternateDescription5Main()
    {
        return $this->container['alt_text_alternate_description5_main'];
    }

    /**
     * Sets alt_text_alternate_description5_main
     *
     * @param string $alt_text_alternate_description5_main <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cALTERNATE_TEXT_ALT5_MAIN  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 500  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAltTextAlternateDescription5Main($alt_text_alternate_description5_main)
    {
        $this->container['alt_text_alternate_description5_main'] = $alt_text_alternate_description5_main;

        return $this;
    }

    /**
     * Gets alt_text_thumbnail
     *
     * @return string
     */
    public function getAltTextThumbnail()
    {
        return $this->container['alt_text_thumbnail'];
    }

    /**
     * Sets alt_text_thumbnail
     *
     * @param string $alt_text_thumbnail <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cALTERNATE_TEXT_THUMBNAIL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 500  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAltTextThumbnail($alt_text_thumbnail)
    {
        $this->container['alt_text_thumbnail'] = $alt_text_thumbnail;

        return $this;
    }

    /**
     * Gets alt_text_alternate_description1_thumbnail
     *
     * @return string
     */
    public function getAltTextAlternateDescription1Thumbnail()
    {
        return $this->container['alt_text_alternate_description1_thumbnail'];
    }

    /**
     * Sets alt_text_alternate_description1_thumbnail
     *
     * @param string $alt_text_alternate_description1_thumbnail <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cALTERNATE_TEXT_ALT1_THUMBNAIL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 500  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAltTextAlternateDescription1Thumbnail($alt_text_alternate_description1_thumbnail)
    {
        $this->container['alt_text_alternate_description1_thumbnail'] = $alt_text_alternate_description1_thumbnail;

        return $this;
    }

    /**
     * Gets alt_text_alternate_description2_thumbnail
     *
     * @return string
     */
    public function getAltTextAlternateDescription2Thumbnail()
    {
        return $this->container['alt_text_alternate_description2_thumbnail'];
    }

    /**
     * Sets alt_text_alternate_description2_thumbnail
     *
     * @param string $alt_text_alternate_description2_thumbnail <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cALTERNATE_TEXT_ALT2_THUMBNAIL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 500  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAltTextAlternateDescription2Thumbnail($alt_text_alternate_description2_thumbnail)
    {
        $this->container['alt_text_alternate_description2_thumbnail'] = $alt_text_alternate_description2_thumbnail;

        return $this;
    }

    /**
     * Gets alt_text_alternate_description3_thumbnail
     *
     * @return string
     */
    public function getAltTextAlternateDescription3Thumbnail()
    {
        return $this->container['alt_text_alternate_description3_thumbnail'];
    }

    /**
     * Sets alt_text_alternate_description3_thumbnail
     *
     * @param string $alt_text_alternate_description3_thumbnail <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cALTERNATE_TEXT_ALT3_THUMBNAIL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 500  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAltTextAlternateDescription3Thumbnail($alt_text_alternate_description3_thumbnail)
    {
        $this->container['alt_text_alternate_description3_thumbnail'] = $alt_text_alternate_description3_thumbnail;

        return $this;
    }

    /**
     * Gets alt_text_alternate_description4_thumbnail
     *
     * @return string
     */
    public function getAltTextAlternateDescription4Thumbnail()
    {
        return $this->container['alt_text_alternate_description4_thumbnail'];
    }

    /**
     * Sets alt_text_alternate_description4_thumbnail
     *
     * @param string $alt_text_alternate_description4_thumbnail <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cALTERNATE_TEXT_ALT4_THUMBNAIL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 500  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAltTextAlternateDescription4Thumbnail($alt_text_alternate_description4_thumbnail)
    {
        $this->container['alt_text_alternate_description4_thumbnail'] = $alt_text_alternate_description4_thumbnail;

        return $this;
    }

    /**
     * Gets alt_text_alternate_description5_thumbnail
     *
     * @return string
     */
    public function getAltTextAlternateDescription5Thumbnail()
    {
        return $this->container['alt_text_alternate_description5_thumbnail'];
    }

    /**
     * Sets alt_text_alternate_description5_thumbnail
     *
     * @param string $alt_text_alternate_description5_thumbnail <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cALTERNATE_TEXT_ALT5_THUMBNAIL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 500  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAltTextAlternateDescription5Thumbnail($alt_text_alternate_description5_thumbnail)
    {
        $this->container['alt_text_alternate_description5_thumbnail'] = $alt_text_alternate_description5_thumbnail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


