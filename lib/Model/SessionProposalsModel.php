<?php
/**
 * SessionProposalsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * SessionProposalsModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SessionProposalsModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SessionProposalsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'organization_code' => 'string',
        'event' => 'int',
        'session_proposal_title' => 'string',
        'text' => 'string',
        'html_text' => 'string',
        'topic' => 'int',
        'overall_score' => 'double',
        'status' => 'int',
        'submitter' => 'string',
        'presentation_type' => 'int',
        'sort_order' => 'int',
        'submission_form' => 'int',
        'entered_on' => '\DateTime',
        'entered_by' => 'int',
        'changed_on' => '\DateTime',
        'changed_by' => 'int',
        'reference' => 'string',
        'keywords' => 'string',
        'roles_list' => 'string',
        'contributors' => 'string',
        'session_proposal_user_fields' => '\FomF\Ungerboeck\Client\Model\UserFields'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'organization_code' => null,
        'event' => 'int32',
        'session_proposal_title' => null,
        'text' => null,
        'html_text' => null,
        'topic' => 'int32',
        'overall_score' => 'double',
        'status' => 'int32',
        'submitter' => null,
        'presentation_type' => 'int32',
        'sort_order' => 'int32',
        'submission_form' => 'int32',
        'entered_on' => 'date-time',
        'entered_by' => 'int32',
        'changed_on' => 'date-time',
        'changed_by' => 'int32',
        'reference' => null,
        'keywords' => null,
        'roles_list' => null,
        'contributors' => null,
        'session_proposal_user_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'organization_code' => 'OrganizationCode',
        'event' => 'Event',
        'session_proposal_title' => 'SessionProposalTitle',
        'text' => 'Text',
        'html_text' => 'HTMLText',
        'topic' => 'Topic',
        'overall_score' => 'OverallScore',
        'status' => 'Status',
        'submitter' => 'Submitter',
        'presentation_type' => 'PresentationType',
        'sort_order' => 'SortOrder',
        'submission_form' => 'SubmissionForm',
        'entered_on' => 'EnteredOn',
        'entered_by' => 'EnteredBy',
        'changed_on' => 'ChangedOn',
        'changed_by' => 'ChangedBy',
        'reference' => 'Reference',
        'keywords' => 'Keywords',
        'roles_list' => 'RolesList',
        'contributors' => 'Contributors',
        'session_proposal_user_fields' => 'SessionProposalUserFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'organization_code' => 'setOrganizationCode',
        'event' => 'setEvent',
        'session_proposal_title' => 'setSessionProposalTitle',
        'text' => 'setText',
        'html_text' => 'setHtmlText',
        'topic' => 'setTopic',
        'overall_score' => 'setOverallScore',
        'status' => 'setStatus',
        'submitter' => 'setSubmitter',
        'presentation_type' => 'setPresentationType',
        'sort_order' => 'setSortOrder',
        'submission_form' => 'setSubmissionForm',
        'entered_on' => 'setEnteredOn',
        'entered_by' => 'setEnteredBy',
        'changed_on' => 'setChangedOn',
        'changed_by' => 'setChangedBy',
        'reference' => 'setReference',
        'keywords' => 'setKeywords',
        'roles_list' => 'setRolesList',
        'contributors' => 'setContributors',
        'session_proposal_user_fields' => 'setSessionProposalUserFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'organization_code' => 'getOrganizationCode',
        'event' => 'getEvent',
        'session_proposal_title' => 'getSessionProposalTitle',
        'text' => 'getText',
        'html_text' => 'getHtmlText',
        'topic' => 'getTopic',
        'overall_score' => 'getOverallScore',
        'status' => 'getStatus',
        'submitter' => 'getSubmitter',
        'presentation_type' => 'getPresentationType',
        'sort_order' => 'getSortOrder',
        'submission_form' => 'getSubmissionForm',
        'entered_on' => 'getEnteredOn',
        'entered_by' => 'getEnteredBy',
        'changed_on' => 'getChangedOn',
        'changed_by' => 'getChangedBy',
        'reference' => 'getReference',
        'keywords' => 'getKeywords',
        'roles_list' => 'getRolesList',
        'contributors' => 'getContributors',
        'session_proposal_user_fields' => 'getSessionProposalUserFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['organization_code'] = isset($data['organization_code']) ? $data['organization_code'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['session_proposal_title'] = isset($data['session_proposal_title']) ? $data['session_proposal_title'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['html_text'] = isset($data['html_text']) ? $data['html_text'] : null;
        $this->container['topic'] = isset($data['topic']) ? $data['topic'] : null;
        $this->container['overall_score'] = isset($data['overall_score']) ? $data['overall_score'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['submitter'] = isset($data['submitter']) ? $data['submitter'] : null;
        $this->container['presentation_type'] = isset($data['presentation_type']) ? $data['presentation_type'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['submission_form'] = isset($data['submission_form']) ? $data['submission_form'] : null;
        $this->container['entered_on'] = isset($data['entered_on']) ? $data['entered_on'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['changed_on'] = isset($data['changed_on']) ? $data['changed_on'] : null;
        $this->container['changed_by'] = isset($data['changed_by']) ? $data['changed_by'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['roles_list'] = isset($data['roles_list']) ? $data['roles_list'] : null;
        $this->container['contributors'] = isset($data['contributors']) ? $data['contributors'] : null;
        $this->container['session_proposal_user_fields'] = isset($data['session_proposal_user_fields']) ? $data['session_proposal_user_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['organization_code'] === null) {
            $invalidProperties[] = "'organization_code' can't be null";
        }
        if ($this->container['event'] === null) {
            $invalidProperties[] = "'event' can't be null";
        }
        if ($this->container['session_proposal_title'] === null) {
            $invalidProperties[] = "'session_proposal_title' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ($this->container['html_text'] === null) {
            $invalidProperties[] = "'html_text' can't be null";
        }
        if ($this->container['topic'] === null) {
            $invalidProperties[] = "'topic' can't be null";
        }
        if ($this->container['overall_score'] === null) {
            $invalidProperties[] = "'overall_score' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['submitter'] === null) {
            $invalidProperties[] = "'submitter' can't be null";
        }
        if ($this->container['presentation_type'] === null) {
            $invalidProperties[] = "'presentation_type' can't be null";
        }
        if ($this->container['sort_order'] === null) {
            $invalidProperties[] = "'sort_order' can't be null";
        }
        if ($this->container['submission_form'] === null) {
            $invalidProperties[] = "'submission_form' can't be null";
        }
        if ($this->container['entered_on'] === null) {
            $invalidProperties[] = "'entered_on' can't be null";
        }
        if ($this->container['entered_by'] === null) {
            $invalidProperties[] = "'entered_by' can't be null";
        }
        if ($this->container['changed_on'] === null) {
            $invalidProperties[] = "'changed_on' can't be null";
        }
        if ($this->container['changed_by'] === null) {
            $invalidProperties[] = "'changed_by' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ($this->container['keywords'] === null) {
            $invalidProperties[] = "'keywords' can't be null";
        }
        if ($this->container['roles_list'] === null) {
            $invalidProperties[] = "'roles_list' can't be null";
        }
        if ($this->container['contributors'] === null) {
            $invalidProperties[] = "'contributors' can't be null";
        }
        if ($this->container['session_proposal_user_fields'] === null) {
            $invalidProperties[] = "'session_proposal_user_fields' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Indentifier - Use for GET and PUT URLs  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> AbstractId  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets organization_code
     *
     * @return string
     */
    public function getOrganizationCode()
    {
        return $this->container['organization_code'];
    }

    /**
     * Sets organization_code
     *
     * @param string $organization_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> OrgCode  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrganizationCode($organization_code)
    {
        $this->container['organization_code'] = $organization_code;

        return $this;
    }

    /**
     * Gets event
     *
     * @return int
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param int $event <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EventId  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Add Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets session_proposal_title
     *
     * @return string
     */
    public function getSessionProposalTitle()
    {
        return $this->container['session_proposal_title'];
    }

    /**
     * Sets session_proposal_title
     *
     * @param string $session_proposal_title <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Title of the session proposal  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> Title  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1000  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSessionProposalTitle($session_proposal_title)
    {
        $this->container['session_proposal_title'] = $session_proposal_title;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Raw text of the session proposal without any of its HTML formatting codes.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> RawText  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets html_text
     *
     * @return string
     */
    public function getHtmlText()
    {
        return $this->container['html_text'];
    }

    /**
     * Sets html_text
     *
     * @param string $html_text <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Session Proposal HTML Text  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> HTMLText  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setHtmlText($html_text)
    {
        $this->container['html_text'] = $html_text;

        return $this;
    }

    /**
     * Gets topic
     *
     * @return int
     */
    public function getTopic()
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param int $topic <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Id of the topic the session proposal is associated with  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> AbstractTopicId  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setTopic($topic)
    {
        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets overall_score
     *
     * @return double
     */
    public function getOverallScore()
    {
        return $this->container['overall_score'];
    }

    /**
     * Sets overall_score
     *
     * @param double $overall_score <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> OverallScore  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 72  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOverallScore($overall_score)
    {
        $this->container['overall_score'] = $overall_score;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Session Proposal Status ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> AbstractStatusId  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets submitter
     *
     * @return string
     */
    public function getSubmitter()
    {
        return $this->container['submitter'];
    }

    /**
     * Sets submitter
     *
     * @param string $submitter <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Submitter Account Code  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> SubmitterAccountCode  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 8  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSubmitter($submitter)
    {
        $this->container['submitter'] = $submitter;

        return $this;
    }

    /**
     * Gets presentation_type
     *
     * @return int
     */
    public function getPresentationType()
    {
        return $this->container['presentation_type'];
    }

    /**
     * Sets presentation_type
     *
     * @param int $presentation_type <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Sequence number of the presentation type associated with the session proposal.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> AbstractPresentationTypeId  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPresentationType($presentation_type)
    {
        $this->container['presentation_type'] = $presentation_type;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int $sort_order <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> SortOrder  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets submission_form
     *
     * @return int
     */
    public function getSubmissionForm()
    {
        return $this->container['submission_form'];
    }

    /**
     * Sets submission_form
     *
     * @param int $submission_form <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> ID of the abstract management configuration that was used to add the session proposal.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> AbstractWebConfigId  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Add Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSubmissionForm($submission_form)
    {
        $this->container['submission_form'] = $submission_form;

        return $this;
    }

    /**
     * Gets entered_on
     *
     * @return \DateTime
     */
    public function getEnteredOn()
    {
        return $this->container['entered_on'];
    }

    /**
     * Sets entered_on
     *
     * @param \DateTime $entered_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EnteredStamp  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredOn($entered_on)
    {
        $this->container['entered_on'] = $entered_on;

        return $this;
    }

    /**
     * Gets entered_by
     *
     * @return int
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     *
     * @param int $entered_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EnteredUser  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets changed_on
     *
     * @return \DateTime
     */
    public function getChangedOn()
    {
        return $this->container['changed_on'];
    }

    /**
     * Sets changed_on
     *
     * @param \DateTime $changed_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> UpdatedStamp  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedOn($changed_on)
    {
        $this->container['changed_on'] = $changed_on;

        return $this;
    }

    /**
     * Gets changed_by
     *
     * @return int
     */
    public function getChangedBy()
    {
        return $this->container['changed_by'];
    }

    /**
     * Sets changed_by
     *
     * @param int $changed_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> UpdatedUser  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedBy($changed_by)
    {
        $this->container['changed_by'] = $changed_by;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> Reference  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 55  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string $keywords <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Display all keywords. Multiple selections will be a separated by comma.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> cKEYWORDS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets roles_list
     *
     * @return string
     */
    public function getRolesList()
    {
        return $this->container['roles_list'];
    }

    /**
     * Sets roles_list
     *
     * @param string $roles_list <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> List of Contributor Roles. Multiple selections will be a delimited list.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> cROLES  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setRolesList($roles_list)
    {
        $this->container['roles_list'] = $roles_list;

        return $this;
    }

    /**
     * Gets contributors
     *
     * @return string
     */
    public function getContributors()
    {
        return $this->container['contributors'];
    }

    /**
     * Sets contributors
     *
     * @param string $contributors <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> List of contributors account code. Multiple selections will be a delimited list.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> cCONTRIBUTORS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setContributors($contributors)
    {
        $this->container['contributors'] = $contributors;

        return $this;
    }

    /**
     * Gets session_proposal_user_fields
     *
     * @return \FomF\Ungerboeck\Client\Model\UserFields
     */
    public function getSessionProposalUserFields()
    {
        return $this->container['session_proposal_user_fields'];
    }

    /**
     * Sets session_proposal_user_fields
     *
     * @param \FomF\Ungerboeck\Client\Model\UserFields $session_proposal_user_fields <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> This holds the abstracts user field values. This is not filled on searches.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> AbstractCustomFields Table  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span></span></div>
     *
     * @return $this
     */
    public function setSessionProposalUserFields($session_proposal_user_fields)
    {
        $this->container['session_proposal_user_fields'] = $session_proposal_user_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


