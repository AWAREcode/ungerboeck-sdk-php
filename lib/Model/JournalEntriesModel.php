<?php
/**
 * JournalEntriesModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * JournalEntriesModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JournalEntriesModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JournalEntriesModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization' => 'string',
        'year' => 'int',
        'period' => 'int',
        'source' => 'string',
        'entry_number' => 'string',
        'status' => 'string',
        'description' => 'string',
        'transaction_date' => '\DateTime',
        'posted_date' => '\DateTime',
        'reverse_entry' => 'string',
        'reversal_made' => 'string',
        'entered_on' => '\DateTime',
        'entered_by' => 'string',
        'changed_on' => '\DateTime',
        'changed_by' => 'string',
        'cost_revenue' => 'string',
        'all_non_invoiced_orders' => 'string',
        'order_type' => 'string',
        'actual_plan_forecast' => 'string',
        'event' => 'int',
        'invoiced_only' => 'string',
        'ar_transaction_class' => 'string',
        'date_from' => '\DateTime',
        'date_to' => '\DateTime',
        'event_status' => 'string',
        'ar_transaction_source' => 'string',
        'ar_transaction_type' => 'string',
        'lines' => 'int',
        'event_date_from' => '\DateTime',
        'event_date_to' => '\DateTime',
        'event_date_used' => 'string',
        'debits' => 'double',
        'credits' => 'double',
        'locked' => 'string',
        'locked_by' => 'string',
        'difference' => 'double',
        'approved_by' => 'string',
        'approved_on' => '\DateTime',
        'posted_by' => 'string',
        'batch' => 'string',
        'invoice' => 'int',
        'year_period' => 'string',
        'inventory_transaction_type' => 'string',
        'ar_control' => 'string',
        'order_department' => 'string',
        'exported' => 'string',
        'auto_post' => 'string',
        'currency' => 'string',
        'journal_entry_details' => '\FomF\Ungerboeck\Client\Model\JournalEntryDetailsModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization' => null,
        'year' => 'int32',
        'period' => 'int32',
        'source' => null,
        'entry_number' => null,
        'status' => null,
        'description' => null,
        'transaction_date' => 'date-time',
        'posted_date' => 'date-time',
        'reverse_entry' => null,
        'reversal_made' => null,
        'entered_on' => 'date-time',
        'entered_by' => null,
        'changed_on' => 'date-time',
        'changed_by' => null,
        'cost_revenue' => null,
        'all_non_invoiced_orders' => null,
        'order_type' => null,
        'actual_plan_forecast' => null,
        'event' => 'int32',
        'invoiced_only' => null,
        'ar_transaction_class' => null,
        'date_from' => 'date-time',
        'date_to' => 'date-time',
        'event_status' => null,
        'ar_transaction_source' => null,
        'ar_transaction_type' => null,
        'lines' => 'int32',
        'event_date_from' => 'date-time',
        'event_date_to' => 'date-time',
        'event_date_used' => null,
        'debits' => 'double',
        'credits' => 'double',
        'locked' => null,
        'locked_by' => null,
        'difference' => 'double',
        'approved_by' => null,
        'approved_on' => 'date-time',
        'posted_by' => null,
        'batch' => null,
        'invoice' => 'int32',
        'year_period' => null,
        'inventory_transaction_type' => null,
        'ar_control' => null,
        'order_department' => null,
        'exported' => null,
        'auto_post' => null,
        'currency' => null,
        'journal_entry_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization' => 'Organization',
        'year' => 'Year',
        'period' => 'Period',
        'source' => 'Source',
        'entry_number' => 'EntryNumber',
        'status' => 'Status',
        'description' => 'Description',
        'transaction_date' => 'TransactionDate',
        'posted_date' => 'PostedDate',
        'reverse_entry' => 'ReverseEntry',
        'reversal_made' => 'ReversalMade',
        'entered_on' => 'EnteredOn',
        'entered_by' => 'EnteredBy',
        'changed_on' => 'ChangedOn',
        'changed_by' => 'ChangedBy',
        'cost_revenue' => 'CostRevenue',
        'all_non_invoiced_orders' => 'AllNonInvoicedOrders',
        'order_type' => 'OrderType',
        'actual_plan_forecast' => 'ActualPlanForecast',
        'event' => 'Event',
        'invoiced_only' => 'InvoicedOnly',
        'ar_transaction_class' => 'ARTransactionClass',
        'date_from' => 'DateFrom',
        'date_to' => 'DateTo',
        'event_status' => 'EventStatus',
        'ar_transaction_source' => 'ARTransactionSource',
        'ar_transaction_type' => 'ARTransactionType',
        'lines' => 'Lines',
        'event_date_from' => 'EventDateFrom',
        'event_date_to' => 'EventDateTo',
        'event_date_used' => 'EventDateUsed',
        'debits' => 'Debits',
        'credits' => 'Credits',
        'locked' => 'Locked',
        'locked_by' => 'LockedBy',
        'difference' => 'Difference',
        'approved_by' => 'ApprovedBy',
        'approved_on' => 'ApprovedOn',
        'posted_by' => 'PostedBy',
        'batch' => 'Batch',
        'invoice' => 'Invoice',
        'year_period' => 'YearPeriod',
        'inventory_transaction_type' => 'InventoryTransactionType',
        'ar_control' => 'ARControl',
        'order_department' => 'OrderDepartment',
        'exported' => 'Exported',
        'auto_post' => 'AutoPost',
        'currency' => 'Currency',
        'journal_entry_details' => 'JournalEntryDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization' => 'setOrganization',
        'year' => 'setYear',
        'period' => 'setPeriod',
        'source' => 'setSource',
        'entry_number' => 'setEntryNumber',
        'status' => 'setStatus',
        'description' => 'setDescription',
        'transaction_date' => 'setTransactionDate',
        'posted_date' => 'setPostedDate',
        'reverse_entry' => 'setReverseEntry',
        'reversal_made' => 'setReversalMade',
        'entered_on' => 'setEnteredOn',
        'entered_by' => 'setEnteredBy',
        'changed_on' => 'setChangedOn',
        'changed_by' => 'setChangedBy',
        'cost_revenue' => 'setCostRevenue',
        'all_non_invoiced_orders' => 'setAllNonInvoicedOrders',
        'order_type' => 'setOrderType',
        'actual_plan_forecast' => 'setActualPlanForecast',
        'event' => 'setEvent',
        'invoiced_only' => 'setInvoicedOnly',
        'ar_transaction_class' => 'setArTransactionClass',
        'date_from' => 'setDateFrom',
        'date_to' => 'setDateTo',
        'event_status' => 'setEventStatus',
        'ar_transaction_source' => 'setArTransactionSource',
        'ar_transaction_type' => 'setArTransactionType',
        'lines' => 'setLines',
        'event_date_from' => 'setEventDateFrom',
        'event_date_to' => 'setEventDateTo',
        'event_date_used' => 'setEventDateUsed',
        'debits' => 'setDebits',
        'credits' => 'setCredits',
        'locked' => 'setLocked',
        'locked_by' => 'setLockedBy',
        'difference' => 'setDifference',
        'approved_by' => 'setApprovedBy',
        'approved_on' => 'setApprovedOn',
        'posted_by' => 'setPostedBy',
        'batch' => 'setBatch',
        'invoice' => 'setInvoice',
        'year_period' => 'setYearPeriod',
        'inventory_transaction_type' => 'setInventoryTransactionType',
        'ar_control' => 'setArControl',
        'order_department' => 'setOrderDepartment',
        'exported' => 'setExported',
        'auto_post' => 'setAutoPost',
        'currency' => 'setCurrency',
        'journal_entry_details' => 'setJournalEntryDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization' => 'getOrganization',
        'year' => 'getYear',
        'period' => 'getPeriod',
        'source' => 'getSource',
        'entry_number' => 'getEntryNumber',
        'status' => 'getStatus',
        'description' => 'getDescription',
        'transaction_date' => 'getTransactionDate',
        'posted_date' => 'getPostedDate',
        'reverse_entry' => 'getReverseEntry',
        'reversal_made' => 'getReversalMade',
        'entered_on' => 'getEnteredOn',
        'entered_by' => 'getEnteredBy',
        'changed_on' => 'getChangedOn',
        'changed_by' => 'getChangedBy',
        'cost_revenue' => 'getCostRevenue',
        'all_non_invoiced_orders' => 'getAllNonInvoicedOrders',
        'order_type' => 'getOrderType',
        'actual_plan_forecast' => 'getActualPlanForecast',
        'event' => 'getEvent',
        'invoiced_only' => 'getInvoicedOnly',
        'ar_transaction_class' => 'getArTransactionClass',
        'date_from' => 'getDateFrom',
        'date_to' => 'getDateTo',
        'event_status' => 'getEventStatus',
        'ar_transaction_source' => 'getArTransactionSource',
        'ar_transaction_type' => 'getArTransactionType',
        'lines' => 'getLines',
        'event_date_from' => 'getEventDateFrom',
        'event_date_to' => 'getEventDateTo',
        'event_date_used' => 'getEventDateUsed',
        'debits' => 'getDebits',
        'credits' => 'getCredits',
        'locked' => 'getLocked',
        'locked_by' => 'getLockedBy',
        'difference' => 'getDifference',
        'approved_by' => 'getApprovedBy',
        'approved_on' => 'getApprovedOn',
        'posted_by' => 'getPostedBy',
        'batch' => 'getBatch',
        'invoice' => 'getInvoice',
        'year_period' => 'getYearPeriod',
        'inventory_transaction_type' => 'getInventoryTransactionType',
        'ar_control' => 'getArControl',
        'order_department' => 'getOrderDepartment',
        'exported' => 'getExported',
        'auto_post' => 'getAutoPost',
        'currency' => 'getCurrency',
        'journal_entry_details' => 'getJournalEntryDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['entry_number'] = isset($data['entry_number']) ? $data['entry_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
        $this->container['posted_date'] = isset($data['posted_date']) ? $data['posted_date'] : null;
        $this->container['reverse_entry'] = isset($data['reverse_entry']) ? $data['reverse_entry'] : null;
        $this->container['reversal_made'] = isset($data['reversal_made']) ? $data['reversal_made'] : null;
        $this->container['entered_on'] = isset($data['entered_on']) ? $data['entered_on'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['changed_on'] = isset($data['changed_on']) ? $data['changed_on'] : null;
        $this->container['changed_by'] = isset($data['changed_by']) ? $data['changed_by'] : null;
        $this->container['cost_revenue'] = isset($data['cost_revenue']) ? $data['cost_revenue'] : null;
        $this->container['all_non_invoiced_orders'] = isset($data['all_non_invoiced_orders']) ? $data['all_non_invoiced_orders'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['actual_plan_forecast'] = isset($data['actual_plan_forecast']) ? $data['actual_plan_forecast'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['invoiced_only'] = isset($data['invoiced_only']) ? $data['invoiced_only'] : null;
        $this->container['ar_transaction_class'] = isset($data['ar_transaction_class']) ? $data['ar_transaction_class'] : null;
        $this->container['date_from'] = isset($data['date_from']) ? $data['date_from'] : null;
        $this->container['date_to'] = isset($data['date_to']) ? $data['date_to'] : null;
        $this->container['event_status'] = isset($data['event_status']) ? $data['event_status'] : null;
        $this->container['ar_transaction_source'] = isset($data['ar_transaction_source']) ? $data['ar_transaction_source'] : null;
        $this->container['ar_transaction_type'] = isset($data['ar_transaction_type']) ? $data['ar_transaction_type'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['event_date_from'] = isset($data['event_date_from']) ? $data['event_date_from'] : null;
        $this->container['event_date_to'] = isset($data['event_date_to']) ? $data['event_date_to'] : null;
        $this->container['event_date_used'] = isset($data['event_date_used']) ? $data['event_date_used'] : null;
        $this->container['debits'] = isset($data['debits']) ? $data['debits'] : null;
        $this->container['credits'] = isset($data['credits']) ? $data['credits'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['locked_by'] = isset($data['locked_by']) ? $data['locked_by'] : null;
        $this->container['difference'] = isset($data['difference']) ? $data['difference'] : null;
        $this->container['approved_by'] = isset($data['approved_by']) ? $data['approved_by'] : null;
        $this->container['approved_on'] = isset($data['approved_on']) ? $data['approved_on'] : null;
        $this->container['posted_by'] = isset($data['posted_by']) ? $data['posted_by'] : null;
        $this->container['batch'] = isset($data['batch']) ? $data['batch'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['year_period'] = isset($data['year_period']) ? $data['year_period'] : null;
        $this->container['inventory_transaction_type'] = isset($data['inventory_transaction_type']) ? $data['inventory_transaction_type'] : null;
        $this->container['ar_control'] = isset($data['ar_control']) ? $data['ar_control'] : null;
        $this->container['order_department'] = isset($data['order_department']) ? $data['order_department'] : null;
        $this->container['exported'] = isset($data['exported']) ? $data['exported'] : null;
        $this->container['auto_post'] = isset($data['auto_post']) ? $data['auto_post'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['journal_entry_details'] = isset($data['journal_entry_details']) ? $data['journal_entry_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['organization'] === null) {
            $invalidProperties[] = "'organization' can't be null";
        }
        if ($this->container['year'] === null) {
            $invalidProperties[] = "'year' can't be null";
        }
        if ($this->container['period'] === null) {
            $invalidProperties[] = "'period' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['entry_number'] === null) {
            $invalidProperties[] = "'entry_number' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['transaction_date'] === null) {
            $invalidProperties[] = "'transaction_date' can't be null";
        }
        if ($this->container['posted_date'] === null) {
            $invalidProperties[] = "'posted_date' can't be null";
        }
        if ($this->container['reverse_entry'] === null) {
            $invalidProperties[] = "'reverse_entry' can't be null";
        }
        if ($this->container['reversal_made'] === null) {
            $invalidProperties[] = "'reversal_made' can't be null";
        }
        if ($this->container['entered_on'] === null) {
            $invalidProperties[] = "'entered_on' can't be null";
        }
        if ($this->container['entered_by'] === null) {
            $invalidProperties[] = "'entered_by' can't be null";
        }
        if ($this->container['changed_on'] === null) {
            $invalidProperties[] = "'changed_on' can't be null";
        }
        if ($this->container['changed_by'] === null) {
            $invalidProperties[] = "'changed_by' can't be null";
        }
        if ($this->container['cost_revenue'] === null) {
            $invalidProperties[] = "'cost_revenue' can't be null";
        }
        if ($this->container['all_non_invoiced_orders'] === null) {
            $invalidProperties[] = "'all_non_invoiced_orders' can't be null";
        }
        if ($this->container['order_type'] === null) {
            $invalidProperties[] = "'order_type' can't be null";
        }
        if ($this->container['actual_plan_forecast'] === null) {
            $invalidProperties[] = "'actual_plan_forecast' can't be null";
        }
        if ($this->container['event'] === null) {
            $invalidProperties[] = "'event' can't be null";
        }
        if ($this->container['invoiced_only'] === null) {
            $invalidProperties[] = "'invoiced_only' can't be null";
        }
        if ($this->container['ar_transaction_class'] === null) {
            $invalidProperties[] = "'ar_transaction_class' can't be null";
        }
        if ($this->container['date_from'] === null) {
            $invalidProperties[] = "'date_from' can't be null";
        }
        if ($this->container['date_to'] === null) {
            $invalidProperties[] = "'date_to' can't be null";
        }
        if ($this->container['event_status'] === null) {
            $invalidProperties[] = "'event_status' can't be null";
        }
        if ($this->container['ar_transaction_source'] === null) {
            $invalidProperties[] = "'ar_transaction_source' can't be null";
        }
        if ($this->container['ar_transaction_type'] === null) {
            $invalidProperties[] = "'ar_transaction_type' can't be null";
        }
        if ($this->container['lines'] === null) {
            $invalidProperties[] = "'lines' can't be null";
        }
        if ($this->container['event_date_from'] === null) {
            $invalidProperties[] = "'event_date_from' can't be null";
        }
        if ($this->container['event_date_to'] === null) {
            $invalidProperties[] = "'event_date_to' can't be null";
        }
        if ($this->container['event_date_used'] === null) {
            $invalidProperties[] = "'event_date_used' can't be null";
        }
        if ($this->container['debits'] === null) {
            $invalidProperties[] = "'debits' can't be null";
        }
        if ($this->container['credits'] === null) {
            $invalidProperties[] = "'credits' can't be null";
        }
        if ($this->container['locked'] === null) {
            $invalidProperties[] = "'locked' can't be null";
        }
        if ($this->container['locked_by'] === null) {
            $invalidProperties[] = "'locked_by' can't be null";
        }
        if ($this->container['difference'] === null) {
            $invalidProperties[] = "'difference' can't be null";
        }
        if ($this->container['approved_by'] === null) {
            $invalidProperties[] = "'approved_by' can't be null";
        }
        if ($this->container['approved_on'] === null) {
            $invalidProperties[] = "'approved_on' can't be null";
        }
        if ($this->container['posted_by'] === null) {
            $invalidProperties[] = "'posted_by' can't be null";
        }
        if ($this->container['batch'] === null) {
            $invalidProperties[] = "'batch' can't be null";
        }
        if ($this->container['invoice'] === null) {
            $invalidProperties[] = "'invoice' can't be null";
        }
        if ($this->container['year_period'] === null) {
            $invalidProperties[] = "'year_period' can't be null";
        }
        if ($this->container['inventory_transaction_type'] === null) {
            $invalidProperties[] = "'inventory_transaction_type' can't be null";
        }
        if ($this->container['ar_control'] === null) {
            $invalidProperties[] = "'ar_control' can't be null";
        }
        if ($this->container['order_department'] === null) {
            $invalidProperties[] = "'order_department' can't be null";
        }
        if ($this->container['exported'] === null) {
            $invalidProperties[] = "'exported' can't be null";
        }
        if ($this->container['auto_post'] === null) {
            $invalidProperties[] = "'auto_post' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['journal_entry_details'] === null) {
            $invalidProperties[] = "'journal_entry_details' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization
     *
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string $organization <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_ORG_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int $year <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_FISCAL_YR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int $period <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_FISCAL_PERIOD  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_SOURCE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets entry_number
     *
     * @return string
     */
    public function getEntryNumber()
    {
        return $this->container['entry_number'];
    }

    /**
     * Sets entry_number
     *
     * @param string $entry_number <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_ENTRY_NBR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 7  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEntryNumber($entry_number)
    {
        $this->container['entry_number'] = $entry_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_ENTRY_STS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_DESC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 100  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return \DateTime
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param \DateTime $transaction_date <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_TRANS_DATE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets posted_date
     *
     * @return \DateTime
     */
    public function getPostedDate()
    {
        return $this->container['posted_date'];
    }

    /**
     * Sets posted_date
     *
     * @param \DateTime $posted_date <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_POSTED_DATE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPostedDate($posted_date)
    {
        $this->container['posted_date'] = $posted_date;

        return $this;
    }

    /**
     * Gets reverse_entry
     *
     * @return string
     */
    public function getReverseEntry()
    {
        return $this->container['reverse_entry'];
    }

    /**
     * Sets reverse_entry
     *
     * @param string $reverse_entry <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_REVERSE_ENTRY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setReverseEntry($reverse_entry)
    {
        $this->container['reverse_entry'] = $reverse_entry;

        return $this;
    }

    /**
     * Gets reversal_made
     *
     * @return string
     */
    public function getReversalMade()
    {
        return $this->container['reversal_made'];
    }

    /**
     * Sets reversal_made
     *
     * @param string $reversal_made <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_REVERSAL_MADE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setReversalMade($reversal_made)
    {
        $this->container['reversal_made'] = $reversal_made;

        return $this;
    }

    /**
     * Gets entered_on
     *
     * @return \DateTime
     */
    public function getEnteredOn()
    {
        return $this->container['entered_on'];
    }

    /**
     * Sets entered_on
     *
     * @param \DateTime $entered_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_ENT_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredOn($entered_on)
    {
        $this->container['entered_on'] = $entered_on;

        return $this;
    }

    /**
     * Gets entered_by
     *
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     *
     * @param string $entered_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_ENT_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets changed_on
     *
     * @return \DateTime
     */
    public function getChangedOn()
    {
        return $this->container['changed_on'];
    }

    /**
     * Sets changed_on
     *
     * @param \DateTime $changed_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_UPD_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedOn($changed_on)
    {
        $this->container['changed_on'] = $changed_on;

        return $this;
    }

    /**
     * Gets changed_by
     *
     * @return string
     */
    public function getChangedBy()
    {
        return $this->container['changed_by'];
    }

    /**
     * Sets changed_by
     *
     * @param string $changed_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_UPD_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedBy($changed_by)
    {
        $this->container['changed_by'] = $changed_by;

        return $this;
    }

    /**
     * Gets cost_revenue
     *
     * @return string
     */
    public function getCostRevenue()
    {
        return $this->container['cost_revenue'];
    }

    /**
     * Sets cost_revenue
     *
     * @param string $cost_revenue <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_COST_REVENUE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCostRevenue($cost_revenue)
    {
        $this->container['cost_revenue'] = $cost_revenue;

        return $this;
    }

    /**
     * Gets all_non_invoiced_orders
     *
     * @return string
     */
    public function getAllNonInvoicedOrders()
    {
        return $this->container['all_non_invoiced_orders'];
    }

    /**
     * Sets all_non_invoiced_orders
     *
     * @param string $all_non_invoiced_orders <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_CLOSED_ORDERS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAllNonInvoicedOrders($all_non_invoiced_orders)
    {
        $this->container['all_non_invoiced_orders'] = $all_non_invoiced_orders;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_ORDER_TYPE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets actual_plan_forecast
     *
     * @return string
     */
    public function getActualPlanForecast()
    {
        return $this->container['actual_plan_forecast'];
    }

    /**
     * Sets actual_plan_forecast
     *
     * @param string $actual_plan_forecast <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_ACT_PLAN_FORE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setActualPlanForecast($actual_plan_forecast)
    {
        $this->container['actual_plan_forecast'] = $actual_plan_forecast;

        return $this;
    }

    /**
     * Gets event
     *
     * @return int
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param int $event <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_EVENT_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets invoiced_only
     *
     * @return string
     */
    public function getInvoicedOnly()
    {
        return $this->container['invoiced_only'];
    }

    /**
     * Sets invoiced_only
     *
     * @param string $invoiced_only <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_INVOICED  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setInvoicedOnly($invoiced_only)
    {
        $this->container['invoiced_only'] = $invoiced_only;

        return $this;
    }

    /**
     * Gets ar_transaction_class
     *
     * @return string
     */
    public function getArTransactionClass()
    {
        return $this->container['ar_transaction_class'];
    }

    /**
     * Sets ar_transaction_class
     *
     * @param string $ar_transaction_class <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_AR_TRANS_CLASS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setArTransactionClass($ar_transaction_class)
    {
        $this->container['ar_transaction_class'] = $ar_transaction_class;

        return $this;
    }

    /**
     * Gets date_from
     *
     * @return \DateTime
     */
    public function getDateFrom()
    {
        return $this->container['date_from'];
    }

    /**
     * Sets date_from
     *
     * @param \DateTime $date_from <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_TRAN_DATE_FROM  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDateFrom($date_from)
    {
        $this->container['date_from'] = $date_from;

        return $this;
    }

    /**
     * Gets date_to
     *
     * @return \DateTime
     */
    public function getDateTo()
    {
        return $this->container['date_to'];
    }

    /**
     * Sets date_to
     *
     * @param \DateTime $date_to <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_TRAN_DATE_TO  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDateTo($date_to)
    {
        $this->container['date_to'] = $date_to;

        return $this;
    }

    /**
     * Gets event_status
     *
     * @return string
     */
    public function getEventStatus()
    {
        return $this->container['event_status'];
    }

    /**
     * Sets event_status
     *
     * @param string $event_status <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_EVENT_STATUS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEventStatus($event_status)
    {
        $this->container['event_status'] = $event_status;

        return $this;
    }

    /**
     * Gets ar_transaction_source
     *
     * @return string
     */
    public function getArTransactionSource()
    {
        return $this->container['ar_transaction_source'];
    }

    /**
     * Sets ar_transaction_source
     *
     * @param string $ar_transaction_source <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_AR_TRANS_SOURCE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setArTransactionSource($ar_transaction_source)
    {
        $this->container['ar_transaction_source'] = $ar_transaction_source;

        return $this;
    }

    /**
     * Gets ar_transaction_type
     *
     * @return string
     */
    public function getArTransactionType()
    {
        return $this->container['ar_transaction_type'];
    }

    /**
     * Sets ar_transaction_type
     *
     * @param string $ar_transaction_type <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_AR_TRANS_TYPE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setArTransactionType($ar_transaction_type)
    {
        $this->container['ar_transaction_type'] = $ar_transaction_type;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return int
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param int $lines <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_NBR_ENTRIES  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets event_date_from
     *
     * @return \DateTime
     */
    public function getEventDateFrom()
    {
        return $this->container['event_date_from'];
    }

    /**
     * Sets event_date_from
     *
     * @param \DateTime $event_date_from <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_EVENT_DATE_FROM  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEventDateFrom($event_date_from)
    {
        $this->container['event_date_from'] = $event_date_from;

        return $this;
    }

    /**
     * Gets event_date_to
     *
     * @return \DateTime
     */
    public function getEventDateTo()
    {
        return $this->container['event_date_to'];
    }

    /**
     * Sets event_date_to
     *
     * @param \DateTime $event_date_to <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_EVENT_DATE_TO  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEventDateTo($event_date_to)
    {
        $this->container['event_date_to'] = $event_date_to;

        return $this;
    }

    /**
     * Gets event_date_used
     *
     * @return string
     */
    public function getEventDateUsed()
    {
        return $this->container['event_date_used'];
    }

    /**
     * Sets event_date_used
     *
     * @param string $event_date_used <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_EVENT_DATE_IND  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEventDateUsed($event_date_used)
    {
        $this->container['event_date_used'] = $event_date_used;

        return $this;
    }

    /**
     * Gets debits
     *
     * @return double
     */
    public function getDebits()
    {
        return $this->container['debits'];
    }

    /**
     * Sets debits
     *
     * @param double $debits <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_ENTRY_DEBIT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDebits($debits)
    {
        $this->container['debits'] = $debits;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return double
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param double $credits <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_ENTRY_CREDIT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCredits($credits)
    {
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return string
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param string $locked <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_LOCKED  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets locked_by
     *
     * @return string
     */
    public function getLockedBy()
    {
        return $this->container['locked_by'];
    }

    /**
     * Sets locked_by
     *
     * @param string $locked_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_LOCKED_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLockedBy($locked_by)
    {
        $this->container['locked_by'] = $locked_by;

        return $this;
    }

    /**
     * Gets difference
     *
     * @return double
     */
    public function getDifference()
    {
        return $this->container['difference'];
    }

    /**
     * Sets difference
     *
     * @param double $difference <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_DIFF  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDifference($difference)
    {
        $this->container['difference'] = $difference;

        return $this;
    }

    /**
     * Gets approved_by
     *
     * @return string
     */
    public function getApprovedBy()
    {
        return $this->container['approved_by'];
    }

    /**
     * Sets approved_by
     *
     * @param string $approved_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_APPROVED_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setApprovedBy($approved_by)
    {
        $this->container['approved_by'] = $approved_by;

        return $this;
    }

    /**
     * Gets approved_on
     *
     * @return \DateTime
     */
    public function getApprovedOn()
    {
        return $this->container['approved_on'];
    }

    /**
     * Sets approved_on
     *
     * @param \DateTime $approved_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_APPROVED_DATE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setApprovedOn($approved_on)
    {
        $this->container['approved_on'] = $approved_on;

        return $this;
    }

    /**
     * Gets posted_by
     *
     * @return string
     */
    public function getPostedBy()
    {
        return $this->container['posted_by'];
    }

    /**
     * Sets posted_by
     *
     * @param string $posted_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_POSTED_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPostedBy($posted_by)
    {
        $this->container['posted_by'] = $posted_by;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string $batch <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_INT_BATCH_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBatch($batch)
    {
        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return int
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param int $invoice <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_INVOICE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets year_period
     *
     * @return string
     */
    public function getYearPeriod()
    {
        return $this->container['year_period'];
    }

    /**
     * Sets year_period
     *
     * @param string $year_period <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_FYP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setYearPeriod($year_period)
    {
        $this->container['year_period'] = $year_period;

        return $this;
    }

    /**
     * Gets inventory_transaction_type
     *
     * @return string
     */
    public function getInventoryTransactionType()
    {
        return $this->container['inventory_transaction_type'];
    }

    /**
     * Sets inventory_transaction_type
     *
     * @param string $inventory_transaction_type <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_INV_TRANS_TYPE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setInventoryTransactionType($inventory_transaction_type)
    {
        $this->container['inventory_transaction_type'] = $inventory_transaction_type;

        return $this;
    }

    /**
     * Gets ar_control
     *
     * @return string
     */
    public function getArControl()
    {
        return $this->container['ar_control'];
    }

    /**
     * Sets ar_control
     *
     * @param string $ar_control <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_AR_CONTROL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setArControl($ar_control)
    {
        $this->container['ar_control'] = $ar_control;

        return $this;
    }

    /**
     * Gets order_department
     *
     * @return string
     */
    public function getOrderDepartment()
    {
        return $this->container['order_department'];
    }

    /**
     * Sets order_department
     *
     * @param string $order_department <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_ORD_DEPT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrderDepartment($order_department)
    {
        $this->container['order_department'] = $order_department;

        return $this;
    }

    /**
     * Gets exported
     *
     * @return string
     */
    public function getExported()
    {
        return $this->container['exported'];
    }

    /**
     * Sets exported
     *
     * @param string $exported <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_EXPORTED  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setExported($exported)
    {
        $this->container['exported'] = $exported;

        return $this;
    }

    /**
     * Gets auto_post
     *
     * @return string
     */
    public function getAutoPost()
    {
        return $this->container['auto_post'];
    }

    /**
     * Sets auto_post
     *
     * @param string $auto_post <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_AUTO_POST  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAutoPost($auto_post)
    {
        $this->container['auto_post'] = $auto_post;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> GL100_FC_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets journal_entry_details
     *
     * @return \FomF\Ungerboeck\Client\Model\JournalEntryDetailsModel[]
     */
    public function getJournalEntryDetails()
    {
        return $this->container['journal_entry_details'];
    }

    /**
     * Sets journal_entry_details
     *
     * @param \FomF\Ungerboeck\Client\Model\JournalEntryDetailsModel[] $journal_entry_details <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Holds list of journal entry details associated to the journal entry.   This will be null unless on a Put or Post you pass in at least one JournalEntryDetailsModel. This will also be null in  a Get unless your search query OData contain a Select.   i.e. (Year eq {year} and Period eq {period} and Source eq {source} and EntryNumber eq {entryNumber}$select=[JournalEntryDetails])  Year eq {2018} and Period eq {1} and Source eq {'MJ'} and {EntryNumber} eq {'0000659'}$select=[JournalEntryDetails]  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> GL101_ENTRY_DTL Table</span></div>
     *
     * @return $this
     */
    public function setJournalEntryDetails($journal_entry_details)
    {
        $this->container['journal_entry_details'] = $journal_entry_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


