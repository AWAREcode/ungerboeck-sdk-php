<?php
/**
 * UsersModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * UsersModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UsersModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UsersModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'display_name' => 'string',
        'organization' => 'string',
        'initial_menu' => 'string',
        'group' => 'string',
        'entered_by_code' => 'string',
        'changed_by_code' => 'string',
        'initials' => 'string',
        'hold' => 'string',
        'working_directory' => 'string',
        'printer' => 'string',
        'report_cache_quantity' => 'int',
        'retire' => 'string',
        'login_id' => 'string',
        'theme' => 'int',
        'reply_to_email' => 'string',
        'dictionary' => 'int',
        'spell_check' => 'string',
        'email_notification' => 'string',
        'custom_report_dictionary' => 'int',
        'email_send_process' => 'string',
        'remote_access' => 'string',
        'activation_status' => 'string',
        'email' => 'string',
        'password_established' => '\DateTime',
        'locked' => 'string',
        'locked_on' => '\DateTime',
        'invalid_attempts' => 'int',
        'first_invalid_attempt' => '\DateTime',
        'dashboard' => 'int',
        'mobile_access' => 'string',
        'mobile_theme' => 'int',
        'access_level' => 'int',
        'startup_favorite' => 'int',
        'default_zoom_amount' => 'int',
        'auth_configuration' => 'string',
        'always_use_default_view' => 'string',
        'locale' => 'int',
        'color_scheme_mode' => 'int',
        'entered_on' => '\DateTime',
        'changed_on' => '\DateTime',
        'user_type' => 'int',
        'exhibition_user_type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'display_name' => null,
        'organization' => null,
        'initial_menu' => null,
        'group' => null,
        'entered_by_code' => null,
        'changed_by_code' => null,
        'initials' => null,
        'hold' => null,
        'working_directory' => null,
        'printer' => null,
        'report_cache_quantity' => 'int32',
        'retire' => null,
        'login_id' => null,
        'theme' => 'int32',
        'reply_to_email' => null,
        'dictionary' => 'int32',
        'spell_check' => null,
        'email_notification' => null,
        'custom_report_dictionary' => 'int32',
        'email_send_process' => null,
        'remote_access' => null,
        'activation_status' => null,
        'email' => null,
        'password_established' => 'date-time',
        'locked' => null,
        'locked_on' => 'date-time',
        'invalid_attempts' => 'int32',
        'first_invalid_attempt' => 'date-time',
        'dashboard' => 'int32',
        'mobile_access' => null,
        'mobile_theme' => 'int32',
        'access_level' => 'int32',
        'startup_favorite' => 'int32',
        'default_zoom_amount' => 'int32',
        'auth_configuration' => null,
        'always_use_default_view' => null,
        'locale' => 'int32',
        'color_scheme_mode' => 'int32',
        'entered_on' => 'date-time',
        'changed_on' => 'date-time',
        'user_type' => 'int32',
        'exhibition_user_type' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'display_name' => 'DisplayName',
        'organization' => 'Organization',
        'initial_menu' => 'InitialMenu',
        'group' => 'Group',
        'entered_by_code' => 'EnteredByCode',
        'changed_by_code' => 'ChangedByCode',
        'initials' => 'Initials',
        'hold' => 'Hold',
        'working_directory' => 'WorkingDirectory',
        'printer' => 'Printer',
        'report_cache_quantity' => 'ReportCacheQuantity',
        'retire' => 'Retire',
        'login_id' => 'LoginID',
        'theme' => 'Theme',
        'reply_to_email' => 'ReplyToEmail',
        'dictionary' => 'Dictionary',
        'spell_check' => 'SpellCheck',
        'email_notification' => 'EmailNotification',
        'custom_report_dictionary' => 'CustomReportDictionary',
        'email_send_process' => 'EmailSendProcess',
        'remote_access' => 'RemoteAccess',
        'activation_status' => 'ActivationStatus',
        'email' => 'Email',
        'password_established' => 'PasswordEstablished',
        'locked' => 'Locked',
        'locked_on' => 'LockedOn',
        'invalid_attempts' => 'InvalidAttempts',
        'first_invalid_attempt' => 'FirstInvalidAttempt',
        'dashboard' => 'Dashboard',
        'mobile_access' => 'MobileAccess',
        'mobile_theme' => 'MobileTheme',
        'access_level' => 'AccessLevel',
        'startup_favorite' => 'StartupFavorite',
        'default_zoom_amount' => 'DefaultZoomAmount',
        'auth_configuration' => 'AuthConfiguration',
        'always_use_default_view' => 'AlwaysUseDefaultView',
        'locale' => 'Locale',
        'color_scheme_mode' => 'ColorSchemeMode',
        'entered_on' => 'EnteredOn',
        'changed_on' => 'ChangedOn',
        'user_type' => 'UserType',
        'exhibition_user_type' => 'ExhibitionUserType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'display_name' => 'setDisplayName',
        'organization' => 'setOrganization',
        'initial_menu' => 'setInitialMenu',
        'group' => 'setGroup',
        'entered_by_code' => 'setEnteredByCode',
        'changed_by_code' => 'setChangedByCode',
        'initials' => 'setInitials',
        'hold' => 'setHold',
        'working_directory' => 'setWorkingDirectory',
        'printer' => 'setPrinter',
        'report_cache_quantity' => 'setReportCacheQuantity',
        'retire' => 'setRetire',
        'login_id' => 'setLoginId',
        'theme' => 'setTheme',
        'reply_to_email' => 'setReplyToEmail',
        'dictionary' => 'setDictionary',
        'spell_check' => 'setSpellCheck',
        'email_notification' => 'setEmailNotification',
        'custom_report_dictionary' => 'setCustomReportDictionary',
        'email_send_process' => 'setEmailSendProcess',
        'remote_access' => 'setRemoteAccess',
        'activation_status' => 'setActivationStatus',
        'email' => 'setEmail',
        'password_established' => 'setPasswordEstablished',
        'locked' => 'setLocked',
        'locked_on' => 'setLockedOn',
        'invalid_attempts' => 'setInvalidAttempts',
        'first_invalid_attempt' => 'setFirstInvalidAttempt',
        'dashboard' => 'setDashboard',
        'mobile_access' => 'setMobileAccess',
        'mobile_theme' => 'setMobileTheme',
        'access_level' => 'setAccessLevel',
        'startup_favorite' => 'setStartupFavorite',
        'default_zoom_amount' => 'setDefaultZoomAmount',
        'auth_configuration' => 'setAuthConfiguration',
        'always_use_default_view' => 'setAlwaysUseDefaultView',
        'locale' => 'setLocale',
        'color_scheme_mode' => 'setColorSchemeMode',
        'entered_on' => 'setEnteredOn',
        'changed_on' => 'setChangedOn',
        'user_type' => 'setUserType',
        'exhibition_user_type' => 'setExhibitionUserType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'display_name' => 'getDisplayName',
        'organization' => 'getOrganization',
        'initial_menu' => 'getInitialMenu',
        'group' => 'getGroup',
        'entered_by_code' => 'getEnteredByCode',
        'changed_by_code' => 'getChangedByCode',
        'initials' => 'getInitials',
        'hold' => 'getHold',
        'working_directory' => 'getWorkingDirectory',
        'printer' => 'getPrinter',
        'report_cache_quantity' => 'getReportCacheQuantity',
        'retire' => 'getRetire',
        'login_id' => 'getLoginId',
        'theme' => 'getTheme',
        'reply_to_email' => 'getReplyToEmail',
        'dictionary' => 'getDictionary',
        'spell_check' => 'getSpellCheck',
        'email_notification' => 'getEmailNotification',
        'custom_report_dictionary' => 'getCustomReportDictionary',
        'email_send_process' => 'getEmailSendProcess',
        'remote_access' => 'getRemoteAccess',
        'activation_status' => 'getActivationStatus',
        'email' => 'getEmail',
        'password_established' => 'getPasswordEstablished',
        'locked' => 'getLocked',
        'locked_on' => 'getLockedOn',
        'invalid_attempts' => 'getInvalidAttempts',
        'first_invalid_attempt' => 'getFirstInvalidAttempt',
        'dashboard' => 'getDashboard',
        'mobile_access' => 'getMobileAccess',
        'mobile_theme' => 'getMobileTheme',
        'access_level' => 'getAccessLevel',
        'startup_favorite' => 'getStartupFavorite',
        'default_zoom_amount' => 'getDefaultZoomAmount',
        'auth_configuration' => 'getAuthConfiguration',
        'always_use_default_view' => 'getAlwaysUseDefaultView',
        'locale' => 'getLocale',
        'color_scheme_mode' => 'getColorSchemeMode',
        'entered_on' => 'getEnteredOn',
        'changed_on' => 'getChangedOn',
        'user_type' => 'getUserType',
        'exhibition_user_type' => 'getExhibitionUserType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['initial_menu'] = isset($data['initial_menu']) ? $data['initial_menu'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['entered_by_code'] = isset($data['entered_by_code']) ? $data['entered_by_code'] : null;
        $this->container['changed_by_code'] = isset($data['changed_by_code']) ? $data['changed_by_code'] : null;
        $this->container['initials'] = isset($data['initials']) ? $data['initials'] : null;
        $this->container['hold'] = isset($data['hold']) ? $data['hold'] : null;
        $this->container['working_directory'] = isset($data['working_directory']) ? $data['working_directory'] : null;
        $this->container['printer'] = isset($data['printer']) ? $data['printer'] : null;
        $this->container['report_cache_quantity'] = isset($data['report_cache_quantity']) ? $data['report_cache_quantity'] : null;
        $this->container['retire'] = isset($data['retire']) ? $data['retire'] : null;
        $this->container['login_id'] = isset($data['login_id']) ? $data['login_id'] : null;
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['reply_to_email'] = isset($data['reply_to_email']) ? $data['reply_to_email'] : null;
        $this->container['dictionary'] = isset($data['dictionary']) ? $data['dictionary'] : null;
        $this->container['spell_check'] = isset($data['spell_check']) ? $data['spell_check'] : null;
        $this->container['email_notification'] = isset($data['email_notification']) ? $data['email_notification'] : null;
        $this->container['custom_report_dictionary'] = isset($data['custom_report_dictionary']) ? $data['custom_report_dictionary'] : null;
        $this->container['email_send_process'] = isset($data['email_send_process']) ? $data['email_send_process'] : null;
        $this->container['remote_access'] = isset($data['remote_access']) ? $data['remote_access'] : null;
        $this->container['activation_status'] = isset($data['activation_status']) ? $data['activation_status'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['password_established'] = isset($data['password_established']) ? $data['password_established'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['locked_on'] = isset($data['locked_on']) ? $data['locked_on'] : null;
        $this->container['invalid_attempts'] = isset($data['invalid_attempts']) ? $data['invalid_attempts'] : null;
        $this->container['first_invalid_attempt'] = isset($data['first_invalid_attempt']) ? $data['first_invalid_attempt'] : null;
        $this->container['dashboard'] = isset($data['dashboard']) ? $data['dashboard'] : null;
        $this->container['mobile_access'] = isset($data['mobile_access']) ? $data['mobile_access'] : null;
        $this->container['mobile_theme'] = isset($data['mobile_theme']) ? $data['mobile_theme'] : null;
        $this->container['access_level'] = isset($data['access_level']) ? $data['access_level'] : null;
        $this->container['startup_favorite'] = isset($data['startup_favorite']) ? $data['startup_favorite'] : null;
        $this->container['default_zoom_amount'] = isset($data['default_zoom_amount']) ? $data['default_zoom_amount'] : null;
        $this->container['auth_configuration'] = isset($data['auth_configuration']) ? $data['auth_configuration'] : null;
        $this->container['always_use_default_view'] = isset($data['always_use_default_view']) ? $data['always_use_default_view'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['color_scheme_mode'] = isset($data['color_scheme_mode']) ? $data['color_scheme_mode'] : null;
        $this->container['entered_on'] = isset($data['entered_on']) ? $data['entered_on'] : null;
        $this->container['changed_on'] = isset($data['changed_on']) ? $data['changed_on'] : null;
        $this->container['user_type'] = isset($data['user_type']) ? $data['user_type'] : null;
        $this->container['exhibition_user_type'] = isset($data['exhibition_user_type']) ? $data['exhibition_user_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['organization'] === null) {
            $invalidProperties[] = "'organization' can't be null";
        }
        if ($this->container['initial_menu'] === null) {
            $invalidProperties[] = "'initial_menu' can't be null";
        }
        if ($this->container['group'] === null) {
            $invalidProperties[] = "'group' can't be null";
        }
        if ($this->container['entered_by_code'] === null) {
            $invalidProperties[] = "'entered_by_code' can't be null";
        }
        if ($this->container['changed_by_code'] === null) {
            $invalidProperties[] = "'changed_by_code' can't be null";
        }
        if ($this->container['initials'] === null) {
            $invalidProperties[] = "'initials' can't be null";
        }
        if ($this->container['hold'] === null) {
            $invalidProperties[] = "'hold' can't be null";
        }
        if ($this->container['working_directory'] === null) {
            $invalidProperties[] = "'working_directory' can't be null";
        }
        if ($this->container['printer'] === null) {
            $invalidProperties[] = "'printer' can't be null";
        }
        if ($this->container['report_cache_quantity'] === null) {
            $invalidProperties[] = "'report_cache_quantity' can't be null";
        }
        if ($this->container['retire'] === null) {
            $invalidProperties[] = "'retire' can't be null";
        }
        if ($this->container['login_id'] === null) {
            $invalidProperties[] = "'login_id' can't be null";
        }
        if ($this->container['theme'] === null) {
            $invalidProperties[] = "'theme' can't be null";
        }
        if ($this->container['reply_to_email'] === null) {
            $invalidProperties[] = "'reply_to_email' can't be null";
        }
        if ($this->container['dictionary'] === null) {
            $invalidProperties[] = "'dictionary' can't be null";
        }
        if ($this->container['spell_check'] === null) {
            $invalidProperties[] = "'spell_check' can't be null";
        }
        if ($this->container['email_notification'] === null) {
            $invalidProperties[] = "'email_notification' can't be null";
        }
        if ($this->container['custom_report_dictionary'] === null) {
            $invalidProperties[] = "'custom_report_dictionary' can't be null";
        }
        if ($this->container['email_send_process'] === null) {
            $invalidProperties[] = "'email_send_process' can't be null";
        }
        if ($this->container['remote_access'] === null) {
            $invalidProperties[] = "'remote_access' can't be null";
        }
        if ($this->container['activation_status'] === null) {
            $invalidProperties[] = "'activation_status' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['password_established'] === null) {
            $invalidProperties[] = "'password_established' can't be null";
        }
        if ($this->container['locked'] === null) {
            $invalidProperties[] = "'locked' can't be null";
        }
        if ($this->container['locked_on'] === null) {
            $invalidProperties[] = "'locked_on' can't be null";
        }
        if ($this->container['invalid_attempts'] === null) {
            $invalidProperties[] = "'invalid_attempts' can't be null";
        }
        if ($this->container['first_invalid_attempt'] === null) {
            $invalidProperties[] = "'first_invalid_attempt' can't be null";
        }
        if ($this->container['dashboard'] === null) {
            $invalidProperties[] = "'dashboard' can't be null";
        }
        if ($this->container['mobile_access'] === null) {
            $invalidProperties[] = "'mobile_access' can't be null";
        }
        if ($this->container['mobile_theme'] === null) {
            $invalidProperties[] = "'mobile_theme' can't be null";
        }
        if ($this->container['access_level'] === null) {
            $invalidProperties[] = "'access_level' can't be null";
        }
        if ($this->container['startup_favorite'] === null) {
            $invalidProperties[] = "'startup_favorite' can't be null";
        }
        if ($this->container['default_zoom_amount'] === null) {
            $invalidProperties[] = "'default_zoom_amount' can't be null";
        }
        if ($this->container['auth_configuration'] === null) {
            $invalidProperties[] = "'auth_configuration' can't be null";
        }
        if ($this->container['always_use_default_view'] === null) {
            $invalidProperties[] = "'always_use_default_view' can't be null";
        }
        if ($this->container['locale'] === null) {
            $invalidProperties[] = "'locale' can't be null";
        }
        if ($this->container['color_scheme_mode'] === null) {
            $invalidProperties[] = "'color_scheme_mode' can't be null";
        }
        if ($this->container['entered_on'] === null) {
            $invalidProperties[] = "'entered_on' can't be null";
        }
        if ($this->container['changed_on'] === null) {
            $invalidProperties[] = "'changed_on' can't be null";
        }
        if ($this->container['user_type'] === null) {
            $invalidProperties[] = "'user_type' can't be null";
        }
        if ($this->container['exhibition_user_type'] === null) {
            $invalidProperties[] = "'exhibition_user_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Identifying property used in the URLs.  This is required and cannot be auto-filled.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> MM405_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_USER_NAME  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 30  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string $organization <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Note that this is not a key identifier of this record, but simply an option for the initial organization for the user.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> MM405_INIT_ORG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets initial_menu
     *
     * @return string
     */
    public function getInitialMenu()
    {
        return $this->container['initial_menu'];
    }

    /**
     * Sets initial_menu
     *
     * @param string $initial_menu <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_INIT_MENU  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 20  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setInitialMenu($initial_menu)
    {
        $this->container['initial_menu'] = $initial_menu;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_USER_GROUP_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets entered_by_code
     *
     * @return string
     */
    public function getEnteredByCode()
    {
        return $this->container['entered_by_code'];
    }

    /**
     * Sets entered_by_code
     *
     * @param string $entered_by_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_ENT_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredByCode($entered_by_code)
    {
        $this->container['entered_by_code'] = $entered_by_code;

        return $this;
    }

    /**
     * Gets changed_by_code
     *
     * @return string
     */
    public function getChangedByCode()
    {
        return $this->container['changed_by_code'];
    }

    /**
     * Sets changed_by_code
     *
     * @param string $changed_by_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_UPD_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedByCode($changed_by_code)
    {
        $this->container['changed_by_code'] = $changed_by_code;

        return $this;
    }

    /**
     * Gets initials
     *
     * @return string
     */
    public function getInitials()
    {
        return $this->container['initials'];
    }

    /**
     * Sets initials
     *
     * @param string $initials <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_USER_INITIALS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setInitials($initials)
    {
        $this->container['initials'] = $initials;

        return $this;
    }

    /**
     * Gets hold
     *
     * @return string
     */
    public function getHold()
    {
        return $this->container['hold'];
    }

    /**
     * Sets hold
     *
     * @param string $hold <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_DEF_HOLD  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setHold($hold)
    {
        $this->container['hold'] = $hold;

        return $this;
    }

    /**
     * Gets working_directory
     *
     * @return string
     */
    public function getWorkingDirectory()
    {
        return $this->container['working_directory'];
    }

    /**
     * Sets working_directory
     *
     * @param string $working_directory <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_WORK_DIR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 200  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setWorkingDirectory($working_directory)
    {
        $this->container['working_directory'] = $working_directory;

        return $this;
    }

    /**
     * Gets printer
     *
     * @return string
     */
    public function getPrinter()
    {
        return $this->container['printer'];
    }

    /**
     * Sets printer
     *
     * @param string $printer <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_DEF_PRT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPrinter($printer)
    {
        $this->container['printer'] = $printer;

        return $this;
    }

    /**
     * Gets report_cache_quantity
     *
     * @return int
     */
    public function getReportCacheQuantity()
    {
        return $this->container['report_cache_quantity'];
    }

    /**
     * Sets report_cache_quantity
     *
     * @param int $report_cache_quantity <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_CACHE_RPT_QTY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setReportCacheQuantity($report_cache_quantity)
    {
        $this->container['report_cache_quantity'] = $report_cache_quantity;

        return $this;
    }

    /**
     * Gets retire
     *
     * @return string
     */
    public function getRetire()
    {
        return $this->container['retire'];
    }

    /**
     * Sets retire
     *
     * @param string $retire <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_RETIRE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setRetire($retire)
    {
        $this->container['retire'] = $retire;

        return $this;
    }

    /**
     * Gets login_id
     *
     * @return string
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     *
     * @param string $login_id <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_LOGIN_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 128  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLoginId($login_id)
    {
        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return int
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param int $theme <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_LAY_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets reply_to_email
     *
     * @return string
     */
    public function getReplyToEmail()
    {
        return $this->container['reply_to_email'];
    }

    /**
     * Sets reply_to_email
     *
     * @param string $reply_to_email <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_USER_CODE1_50X  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 50  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setReplyToEmail($reply_to_email)
    {
        $this->container['reply_to_email'] = $reply_to_email;

        return $this;
    }

    /**
     * Gets dictionary
     *
     * @return int
     */
    public function getDictionary()
    {
        return $this->container['dictionary'];
    }

    /**
     * Sets dictionary
     *
     * @param int $dictionary <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_USER_NBR1_030P  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDictionary($dictionary)
    {
        $this->container['dictionary'] = $dictionary;

        return $this;
    }

    /**
     * Gets spell_check
     *
     * @return string
     */
    public function getSpellCheck()
    {
        return $this->container['spell_check'];
    }

    /**
     * Sets spell_check
     *
     * @param string $spell_check <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_AUTO_SPELL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSpellCheck($spell_check)
    {
        $this->container['spell_check'] = $spell_check;

        return $this;
    }

    /**
     * Gets email_notification
     *
     * @return string
     */
    public function getEmailNotification()
    {
        return $this->container['email_notification'];
    }

    /**
     * Sets email_notification
     *
     * @param string $email_notification <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_EMAIL_TRC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEmailNotification($email_notification)
    {
        $this->container['email_notification'] = $email_notification;

        return $this;
    }

    /**
     * Gets custom_report_dictionary
     *
     * @return int
     */
    public function getCustomReportDictionary()
    {
        return $this->container['custom_report_dictionary'];
    }

    /**
     * Sets custom_report_dictionary
     *
     * @param int $custom_report_dictionary <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_CUST_RPT_DICT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCustomReportDictionary($custom_report_dictionary)
    {
        $this->container['custom_report_dictionary'] = $custom_report_dictionary;

        return $this;
    }

    /**
     * Gets email_send_process
     *
     * @return string
     */
    public function getEmailSendProcess()
    {
        return $this->container['email_send_process'];
    }

    /**
     * Sets email_send_process
     *
     * @param string $email_send_process <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_EMAIL_METHOD  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEmailSendProcess($email_send_process)
    {
        $this->container['email_send_process'] = $email_send_process;

        return $this;
    }

    /**
     * Gets remote_access
     *
     * @return string
     */
    public function getRemoteAccess()
    {
        return $this->container['remote_access'];
    }

    /**
     * Sets remote_access
     *
     * @param string $remote_access <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_ALLOW_REMOTE_ACCESS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setRemoteAccess($remote_access)
    {
        $this->container['remote_access'] = $remote_access;

        return $this;
    }

    /**
     * Gets activation_status
     *
     * @return string
     */
    public function getActivationStatus()
    {
        return $this->container['activation_status'];
    }

    /**
     * Sets activation_status
     *
     * @param string $activation_status <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> The user cannot sign in until this is activated and a password is set.  You can send an activation email using the SendActivateUserEmail endpoint  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> MM405_REQ_ACTIVATION  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setActivationStatus($activation_status)
    {
        $this->container['activation_status'] = $activation_status;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> The SendActivateUserEmail() Users endpoint will send an email to this address.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> MM405_EMAIL_ADDRESS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 255  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password_established
     *
     * @return \DateTime
     */
    public function getPasswordEstablished()
    {
        return $this->container['password_established'];
    }

    /**
     * Sets password_established
     *
     * @param \DateTime $password_established <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_PWD_EST_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPasswordEstablished($password_established)
    {
        $this->container['password_established'] = $password_established;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return string
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param string $locked <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_LOCK_FLAG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets locked_on
     *
     * @return \DateTime
     */
    public function getLockedOn()
    {
        return $this->container['locked_on'];
    }

    /**
     * Sets locked_on
     *
     * @param \DateTime $locked_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_LOCK_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLockedOn($locked_on)
    {
        $this->container['locked_on'] = $locked_on;

        return $this;
    }

    /**
     * Gets invalid_attempts
     *
     * @return int
     */
    public function getInvalidAttempts()
    {
        return $this->container['invalid_attempts'];
    }

    /**
     * Sets invalid_attempts
     *
     * @param int $invalid_attempts <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_INVALID_ATTEMPTS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setInvalidAttempts($invalid_attempts)
    {
        $this->container['invalid_attempts'] = $invalid_attempts;

        return $this;
    }

    /**
     * Gets first_invalid_attempt
     *
     * @return \DateTime
     */
    public function getFirstInvalidAttempt()
    {
        return $this->container['first_invalid_attempt'];
    }

    /**
     * Sets first_invalid_attempt
     *
     * @param \DateTime $first_invalid_attempt <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_1ST_INVALID_ATT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setFirstInvalidAttempt($first_invalid_attempt)
    {
        $this->container['first_invalid_attempt'] = $first_invalid_attempt;

        return $this;
    }

    /**
     * Gets dashboard
     *
     * @return int
     */
    public function getDashboard()
    {
        return $this->container['dashboard'];
    }

    /**
     * Sets dashboard
     *
     * @param int $dashboard <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_HOME_PAGE_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDashboard($dashboard)
    {
        $this->container['dashboard'] = $dashboard;

        return $this;
    }

    /**
     * Gets mobile_access
     *
     * @return string
     */
    public function getMobileAccess()
    {
        return $this->container['mobile_access'];
    }

    /**
     * Sets mobile_access
     *
     * @param string $mobile_access <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_ALLOW_MOBILE_ACCESS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setMobileAccess($mobile_access)
    {
        $this->container['mobile_access'] = $mobile_access;

        return $this;
    }

    /**
     * Gets mobile_theme
     *
     * @return int
     */
    public function getMobileTheme()
    {
        return $this->container['mobile_theme'];
    }

    /**
     * Sets mobile_theme
     *
     * @param int $mobile_theme <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_MOBILE_LAY_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setMobileTheme($mobile_theme)
    {
        $this->container['mobile_theme'] = $mobile_theme;

        return $this;
    }

    /**
     * Gets access_level
     *
     * @return int
     */
    public function getAccessLevel()
    {
        return $this->container['access_level'];
    }

    /**
     * Sets access_level
     *
     * @param int $access_level <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_ACCESS_MODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAccessLevel($access_level)
    {
        $this->container['access_level'] = $access_level;

        return $this;
    }

    /**
     * Gets startup_favorite
     *
     * @return int
     */
    public function getStartupFavorite()
    {
        return $this->container['startup_favorite'];
    }

    /**
     * Sets startup_favorite
     *
     * @param int $startup_favorite <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_FAVORITE_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setStartupFavorite($startup_favorite)
    {
        $this->container['startup_favorite'] = $startup_favorite;

        return $this;
    }

    /**
     * Gets default_zoom_amount
     *
     * @return int
     */
    public function getDefaultZoomAmount()
    {
        return $this->container['default_zoom_amount'];
    }

    /**
     * Sets default_zoom_amount
     *
     * @param int $default_zoom_amount <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_ZOOM_PCT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDefaultZoomAmount($default_zoom_amount)
    {
        $this->container['default_zoom_amount'] = $default_zoom_amount;

        return $this;
    }

    /**
     * Gets auth_configuration
     *
     * @return string
     */
    public function getAuthConfiguration()
    {
        return $this->container['auth_configuration'];
    }

    /**
     * Sets auth_configuration
     *
     * @param string $auth_configuration <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_AUTH_CONFIG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAuthConfiguration($auth_configuration)
    {
        $this->container['auth_configuration'] = $auth_configuration;

        return $this;
    }

    /**
     * Gets always_use_default_view
     *
     * @return string
     */
    public function getAlwaysUseDefaultView()
    {
        return $this->container['always_use_default_view'];
    }

    /**
     * Sets always_use_default_view
     *
     * @param string $always_use_default_view <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_USE_THEME_VIEW  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlwaysUseDefaultView($always_use_default_view)
    {
        $this->container['always_use_default_view'] = $always_use_default_view;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return int
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param int $locale <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_LOCALE_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets color_scheme_mode
     *
     * @return int
     */
    public function getColorSchemeMode()
    {
        return $this->container['color_scheme_mode'];
    }

    /**
     * Sets color_scheme_mode
     *
     * @param int $color_scheme_mode <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> MM405_APP_COLOR_SCHEME_MODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setColorSchemeMode($color_scheme_mode)
    {
        $this->container['color_scheme_mode'] = $color_scheme_mode;

        return $this;
    }

    /**
     * Gets entered_on
     *
     * @return \DateTime
     */
    public function getEnteredOn()
    {
        return $this->container['entered_on'];
    }

    /**
     * Sets entered_on
     *
     * @param \DateTime $entered_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cENT_DATE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredOn($entered_on)
    {
        $this->container['entered_on'] = $entered_on;

        return $this;
    }

    /**
     * Gets changed_on
     *
     * @return \DateTime
     */
    public function getChangedOn()
    {
        return $this->container['changed_on'];
    }

    /**
     * Sets changed_on
     *
     * @param \DateTime $changed_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cUPD_DATE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedOn($changed_on)
    {
        $this->container['changed_on'] = $changed_on;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return int
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param int $user_type <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cU4V_PROD_USER_TYPE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUserType($user_type)
    {
        $this->container['user_type'] = $user_type;

        return $this;
    }

    /**
     * Gets exhibition_user_type
     *
     * @return int
     */
    public function getExhibitionUserType()
    {
        return $this->container['exhibition_user_type'];
    }

    /**
     * Sets exhibition_user_type
     *
     * @param int $exhibition_user_type <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> cU4E_PROD_USER_TYPE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setExhibitionUserType($exhibition_user_type)
    {
        $this->container['exhibition_user_type'] = $exhibition_user_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


