<?php
/**
 * PreferenceSettingsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * PreferenceSettingsModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PreferenceSettingsModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PreferenceSettingsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization' => 'string',
        'id' => 'int',
        'contact' => 'string',
        'consent_settings_id' => 'int',
        'preference_type' => 'int',
        'consent_given' => 'string',
        'entered_on' => '\DateTime',
        'entered_by' => 'string',
        'changed_on' => '\DateTime',
        'changed_by' => 'string',
        'description' => 'string',
        'alternate_description1' => 'string',
        'alternate_description2' => 'string',
        'alternate_description3' => 'string',
        'alternate_description4' => 'string',
        'alternate_description5' => 'string',
        'summary' => 'string',
        'application' => 'string',
        'alternate_summary1' => 'string',
        'alternate_summary2' => 'string',
        'alternate_summary3' => 'string',
        'alternate_summary4' => 'string',
        'alternate_summary5' => 'string',
        'instructions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization' => null,
        'id' => 'int32',
        'contact' => null,
        'consent_settings_id' => 'int32',
        'preference_type' => 'int32',
        'consent_given' => null,
        'entered_on' => 'date-time',
        'entered_by' => null,
        'changed_on' => 'date-time',
        'changed_by' => null,
        'description' => null,
        'alternate_description1' => null,
        'alternate_description2' => null,
        'alternate_description3' => null,
        'alternate_description4' => null,
        'alternate_description5' => null,
        'summary' => null,
        'application' => null,
        'alternate_summary1' => null,
        'alternate_summary2' => null,
        'alternate_summary3' => null,
        'alternate_summary4' => null,
        'alternate_summary5' => null,
        'instructions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization' => 'Organization',
        'id' => 'ID',
        'contact' => 'Contact',
        'consent_settings_id' => 'ConsentSettingsID',
        'preference_type' => 'PreferenceType',
        'consent_given' => 'ConsentGiven',
        'entered_on' => 'EnteredOn',
        'entered_by' => 'EnteredBy',
        'changed_on' => 'ChangedOn',
        'changed_by' => 'ChangedBy',
        'description' => 'Description',
        'alternate_description1' => 'AlternateDescription1',
        'alternate_description2' => 'AlternateDescription2',
        'alternate_description3' => 'AlternateDescription3',
        'alternate_description4' => 'AlternateDescription4',
        'alternate_description5' => 'AlternateDescription5',
        'summary' => 'Summary',
        'application' => 'Application',
        'alternate_summary1' => 'AlternateSummary1',
        'alternate_summary2' => 'AlternateSummary2',
        'alternate_summary3' => 'AlternateSummary3',
        'alternate_summary4' => 'AlternateSummary4',
        'alternate_summary5' => 'AlternateSummary5',
        'instructions' => 'Instructions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization' => 'setOrganization',
        'id' => 'setId',
        'contact' => 'setContact',
        'consent_settings_id' => 'setConsentSettingsId',
        'preference_type' => 'setPreferenceType',
        'consent_given' => 'setConsentGiven',
        'entered_on' => 'setEnteredOn',
        'entered_by' => 'setEnteredBy',
        'changed_on' => 'setChangedOn',
        'changed_by' => 'setChangedBy',
        'description' => 'setDescription',
        'alternate_description1' => 'setAlternateDescription1',
        'alternate_description2' => 'setAlternateDescription2',
        'alternate_description3' => 'setAlternateDescription3',
        'alternate_description4' => 'setAlternateDescription4',
        'alternate_description5' => 'setAlternateDescription5',
        'summary' => 'setSummary',
        'application' => 'setApplication',
        'alternate_summary1' => 'setAlternateSummary1',
        'alternate_summary2' => 'setAlternateSummary2',
        'alternate_summary3' => 'setAlternateSummary3',
        'alternate_summary4' => 'setAlternateSummary4',
        'alternate_summary5' => 'setAlternateSummary5',
        'instructions' => 'setInstructions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization' => 'getOrganization',
        'id' => 'getId',
        'contact' => 'getContact',
        'consent_settings_id' => 'getConsentSettingsId',
        'preference_type' => 'getPreferenceType',
        'consent_given' => 'getConsentGiven',
        'entered_on' => 'getEnteredOn',
        'entered_by' => 'getEnteredBy',
        'changed_on' => 'getChangedOn',
        'changed_by' => 'getChangedBy',
        'description' => 'getDescription',
        'alternate_description1' => 'getAlternateDescription1',
        'alternate_description2' => 'getAlternateDescription2',
        'alternate_description3' => 'getAlternateDescription3',
        'alternate_description4' => 'getAlternateDescription4',
        'alternate_description5' => 'getAlternateDescription5',
        'summary' => 'getSummary',
        'application' => 'getApplication',
        'alternate_summary1' => 'getAlternateSummary1',
        'alternate_summary2' => 'getAlternateSummary2',
        'alternate_summary3' => 'getAlternateSummary3',
        'alternate_summary4' => 'getAlternateSummary4',
        'alternate_summary5' => 'getAlternateSummary5',
        'instructions' => 'getInstructions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['consent_settings_id'] = isset($data['consent_settings_id']) ? $data['consent_settings_id'] : null;
        $this->container['preference_type'] = isset($data['preference_type']) ? $data['preference_type'] : null;
        $this->container['consent_given'] = isset($data['consent_given']) ? $data['consent_given'] : null;
        $this->container['entered_on'] = isset($data['entered_on']) ? $data['entered_on'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['changed_on'] = isset($data['changed_on']) ? $data['changed_on'] : null;
        $this->container['changed_by'] = isset($data['changed_by']) ? $data['changed_by'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['alternate_description1'] = isset($data['alternate_description1']) ? $data['alternate_description1'] : null;
        $this->container['alternate_description2'] = isset($data['alternate_description2']) ? $data['alternate_description2'] : null;
        $this->container['alternate_description3'] = isset($data['alternate_description3']) ? $data['alternate_description3'] : null;
        $this->container['alternate_description4'] = isset($data['alternate_description4']) ? $data['alternate_description4'] : null;
        $this->container['alternate_description5'] = isset($data['alternate_description5']) ? $data['alternate_description5'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['application'] = isset($data['application']) ? $data['application'] : null;
        $this->container['alternate_summary1'] = isset($data['alternate_summary1']) ? $data['alternate_summary1'] : null;
        $this->container['alternate_summary2'] = isset($data['alternate_summary2']) ? $data['alternate_summary2'] : null;
        $this->container['alternate_summary3'] = isset($data['alternate_summary3']) ? $data['alternate_summary3'] : null;
        $this->container['alternate_summary4'] = isset($data['alternate_summary4']) ? $data['alternate_summary4'] : null;
        $this->container['alternate_summary5'] = isset($data['alternate_summary5']) ? $data['alternate_summary5'] : null;
        $this->container['instructions'] = isset($data['instructions']) ? $data['instructions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['organization'] === null) {
            $invalidProperties[] = "'organization' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['contact'] === null) {
            $invalidProperties[] = "'contact' can't be null";
        }
        if ($this->container['consent_settings_id'] === null) {
            $invalidProperties[] = "'consent_settings_id' can't be null";
        }
        if ($this->container['preference_type'] === null) {
            $invalidProperties[] = "'preference_type' can't be null";
        }
        if ($this->container['consent_given'] === null) {
            $invalidProperties[] = "'consent_given' can't be null";
        }
        if ($this->container['entered_on'] === null) {
            $invalidProperties[] = "'entered_on' can't be null";
        }
        if ($this->container['entered_by'] === null) {
            $invalidProperties[] = "'entered_by' can't be null";
        }
        if ($this->container['changed_on'] === null) {
            $invalidProperties[] = "'changed_on' can't be null";
        }
        if ($this->container['changed_by'] === null) {
            $invalidProperties[] = "'changed_by' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['alternate_description1'] === null) {
            $invalidProperties[] = "'alternate_description1' can't be null";
        }
        if ($this->container['alternate_description2'] === null) {
            $invalidProperties[] = "'alternate_description2' can't be null";
        }
        if ($this->container['alternate_description3'] === null) {
            $invalidProperties[] = "'alternate_description3' can't be null";
        }
        if ($this->container['alternate_description4'] === null) {
            $invalidProperties[] = "'alternate_description4' can't be null";
        }
        if ($this->container['alternate_description5'] === null) {
            $invalidProperties[] = "'alternate_description5' can't be null";
        }
        if ($this->container['summary'] === null) {
            $invalidProperties[] = "'summary' can't be null";
        }
        if ($this->container['application'] === null) {
            $invalidProperties[] = "'application' can't be null";
        }
        if ($this->container['alternate_summary1'] === null) {
            $invalidProperties[] = "'alternate_summary1' can't be null";
        }
        if ($this->container['alternate_summary2'] === null) {
            $invalidProperties[] = "'alternate_summary2' can't be null";
        }
        if ($this->container['alternate_summary3'] === null) {
            $invalidProperties[] = "'alternate_summary3' can't be null";
        }
        if ($this->container['alternate_summary4'] === null) {
            $invalidProperties[] = "'alternate_summary4' can't be null";
        }
        if ($this->container['alternate_summary5'] === null) {
            $invalidProperties[] = "'alternate_summary5' can't be null";
        }
        if ($this->container['instructions'] === null) {
            $invalidProperties[] = "'instructions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization
     *
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string $organization <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Identifier field.  Use this in the URLs for GET, DELETE and PUT.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> MM612_ORG_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Identifier field.  Use this in the URLs for GET, DELETE and PUT.  You do not need to set this on POST, as it is automatically generated within Ungerboeck.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> MM612_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return string
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param string $contact <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> When doing a POST, use this field to attach the preference setting to an account.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> MM612_ACCT_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 8  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Add Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets consent_settings_id
     *
     * @return int
     */
    public function getConsentSettingsId()
    {
        return $this->container['consent_settings_id'];
    }

    /**
     * Sets consent_settings_id
     *
     * @param int $consent_settings_id <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> This is based on the MM611 table and is just for informational purposes.  The system auto generates the value.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setConsentSettingsId($consent_settings_id)
    {
        $this->container['consent_settings_id'] = $consent_settings_id;

        return $this;
    }

    /**
     * Gets preference_type
     *
     * @return int
     */
    public function getPreferenceType()
    {
        return $this->container['preference_type'];
    }

    /**
     * Sets preference_type
     *
     * @param int $preference_type <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> When doing a POST, fill this field with the corresponding preference type ID.  This is found on the Preference Type window (Or on the table as MM610_ID)  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_CONSENT_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Add Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPreferenceType($preference_type)
    {
        $this->container['preference_type'] = $preference_type;

        return $this;
    }

    /**
     * Gets consent_given
     *
     * @return string
     */
    public function getConsentGiven()
    {
        return $this->container['consent_given'];
    }

    /**
     * Sets consent_given
     *
     * @param string $consent_given <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Enter 0 for consent not given, enter 1 for consent given.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_CONSENT_GIVEN  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setConsentGiven($consent_given)
    {
        $this->container['consent_given'] = $consent_given;

        return $this;
    }

    /**
     * Gets entered_on
     *
     * @return \DateTime
     */
    public function getEnteredOn()
    {
        return $this->container['entered_on'];
    }

    /**
     * Sets entered_on
     *
     * @param \DateTime $entered_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_ENT_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredOn($entered_on)
    {
        $this->container['entered_on'] = $entered_on;

        return $this;
    }

    /**
     * Gets entered_by
     *
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     *
     * @param string $entered_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_ENT_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets changed_on
     *
     * @return \DateTime
     */
    public function getChangedOn()
    {
        return $this->container['changed_on'];
    }

    /**
     * Sets changed_on
     *
     * @param \DateTime $changed_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_UPD_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedOn($changed_on)
    {
        $this->container['changed_on'] = $changed_on;

        return $this;
    }

    /**
     * Gets changed_by
     *
     * @return string
     */
    public function getChangedBy()
    {
        return $this->container['changed_by'];
    }

    /**
     * Sets changed_by
     *
     * @param string $changed_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_UPD_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedBy($changed_by)
    {
        $this->container['changed_by'] = $changed_by;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_DESC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 255  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets alternate_description1
     *
     * @return string
     */
    public function getAlternateDescription1()
    {
        return $this->container['alternate_description1'];
    }

    /**
     * Sets alternate_description1
     *
     * @param string $alternate_description1 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_ALT_DESC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 255  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateDescription1($alternate_description1)
    {
        $this->container['alternate_description1'] = $alternate_description1;

        return $this;
    }

    /**
     * Gets alternate_description2
     *
     * @return string
     */
    public function getAlternateDescription2()
    {
        return $this->container['alternate_description2'];
    }

    /**
     * Sets alternate_description2
     *
     * @param string $alternate_description2 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_ALT_DESC_2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 255  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateDescription2($alternate_description2)
    {
        $this->container['alternate_description2'] = $alternate_description2;

        return $this;
    }

    /**
     * Gets alternate_description3
     *
     * @return string
     */
    public function getAlternateDescription3()
    {
        return $this->container['alternate_description3'];
    }

    /**
     * Sets alternate_description3
     *
     * @param string $alternate_description3 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_ALT_DESC_3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 255  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateDescription3($alternate_description3)
    {
        $this->container['alternate_description3'] = $alternate_description3;

        return $this;
    }

    /**
     * Gets alternate_description4
     *
     * @return string
     */
    public function getAlternateDescription4()
    {
        return $this->container['alternate_description4'];
    }

    /**
     * Sets alternate_description4
     *
     * @param string $alternate_description4 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_ALT_DESC_4  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 255  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateDescription4($alternate_description4)
    {
        $this->container['alternate_description4'] = $alternate_description4;

        return $this;
    }

    /**
     * Gets alternate_description5
     *
     * @return string
     */
    public function getAlternateDescription5()
    {
        return $this->container['alternate_description5'];
    }

    /**
     * Sets alternate_description5
     *
     * @param string $alternate_description5 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_ALT_DESC_5  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 255  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateDescription5($alternate_description5)
    {
        $this->container['alternate_description5'] = $alternate_description5;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_SUMMARY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1000  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets application
     *
     * @return string
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param string $application <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_APPL_USED  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setApplication($application)
    {
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets alternate_summary1
     *
     * @return string
     */
    public function getAlternateSummary1()
    {
        return $this->container['alternate_summary1'];
    }

    /**
     * Sets alternate_summary1
     *
     * @param string $alternate_summary1 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_ALT_SUMMARY_1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1000  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateSummary1($alternate_summary1)
    {
        $this->container['alternate_summary1'] = $alternate_summary1;

        return $this;
    }

    /**
     * Gets alternate_summary2
     *
     * @return string
     */
    public function getAlternateSummary2()
    {
        return $this->container['alternate_summary2'];
    }

    /**
     * Sets alternate_summary2
     *
     * @param string $alternate_summary2 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_ALT_SUMMARY_2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1000  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateSummary2($alternate_summary2)
    {
        $this->container['alternate_summary2'] = $alternate_summary2;

        return $this;
    }

    /**
     * Gets alternate_summary3
     *
     * @return string
     */
    public function getAlternateSummary3()
    {
        return $this->container['alternate_summary3'];
    }

    /**
     * Sets alternate_summary3
     *
     * @param string $alternate_summary3 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_ALT_SUMMARY_3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1000  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateSummary3($alternate_summary3)
    {
        $this->container['alternate_summary3'] = $alternate_summary3;

        return $this;
    }

    /**
     * Gets alternate_summary4
     *
     * @return string
     */
    public function getAlternateSummary4()
    {
        return $this->container['alternate_summary4'];
    }

    /**
     * Sets alternate_summary4
     *
     * @param string $alternate_summary4 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_ALT_SUMMARY_4  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1000  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateSummary4($alternate_summary4)
    {
        $this->container['alternate_summary4'] = $alternate_summary4;

        return $this;
    }

    /**
     * Gets alternate_summary5
     *
     * @return string
     */
    public function getAlternateSummary5()
    {
        return $this->container['alternate_summary5'];
    }

    /**
     * Sets alternate_summary5
     *
     * @param string $alternate_summary5 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_ALT_SUMMARY_5  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1000  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateSummary5($alternate_summary5)
    {
        $this->container['alternate_summary5'] = $alternate_summary5;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string $instructions <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> ConsentSettings_MM611_INSTRUCTIONS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1000  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setInstructions($instructions)
    {
        $this->container['instructions'] = $instructions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


