<?php
/**
 * EventStatusesModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * EventStatusesModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventStatusesModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EventStatusesModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'description' => 'string',
        'event_scope' => 'string',
        'job_scope' => 'string',
        'abbreviated_code' => 'string',
        'abbreviated_description' => 'string',
        'assignable_by_marketing' => 'string',
        'background_color' => 'int',
        'text_color' => 'int',
        'status_group' => 'string',
        'pattern' => 'string',
        'allowedfor_block_use' => 'string',
        'lost_flag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'description' => null,
        'event_scope' => null,
        'job_scope' => null,
        'abbreviated_code' => null,
        'abbreviated_description' => null,
        'assignable_by_marketing' => null,
        'background_color' => 'int32',
        'text_color' => 'int32',
        'status_group' => null,
        'pattern' => null,
        'allowedfor_block_use' => null,
        'lost_flag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'description' => 'Description',
        'event_scope' => 'EventScope',
        'job_scope' => 'JobScope',
        'abbreviated_code' => 'AbbreviatedCode',
        'abbreviated_description' => 'AbbreviatedDescription',
        'assignable_by_marketing' => 'AssignableByMarketing',
        'background_color' => 'BackgroundColor',
        'text_color' => 'TextColor',
        'status_group' => 'StatusGroup',
        'pattern' => 'Pattern',
        'allowedfor_block_use' => 'AllowedforBlockUse',
        'lost_flag' => 'LostFlag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'description' => 'setDescription',
        'event_scope' => 'setEventScope',
        'job_scope' => 'setJobScope',
        'abbreviated_code' => 'setAbbreviatedCode',
        'abbreviated_description' => 'setAbbreviatedDescription',
        'assignable_by_marketing' => 'setAssignableByMarketing',
        'background_color' => 'setBackgroundColor',
        'text_color' => 'setTextColor',
        'status_group' => 'setStatusGroup',
        'pattern' => 'setPattern',
        'allowedfor_block_use' => 'setAllowedforBlockUse',
        'lost_flag' => 'setLostFlag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'description' => 'getDescription',
        'event_scope' => 'getEventScope',
        'job_scope' => 'getJobScope',
        'abbreviated_code' => 'getAbbreviatedCode',
        'abbreviated_description' => 'getAbbreviatedDescription',
        'assignable_by_marketing' => 'getAssignableByMarketing',
        'background_color' => 'getBackgroundColor',
        'text_color' => 'getTextColor',
        'status_group' => 'getStatusGroup',
        'pattern' => 'getPattern',
        'allowedfor_block_use' => 'getAllowedforBlockUse',
        'lost_flag' => 'getLostFlag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['event_scope'] = isset($data['event_scope']) ? $data['event_scope'] : null;
        $this->container['job_scope'] = isset($data['job_scope']) ? $data['job_scope'] : null;
        $this->container['abbreviated_code'] = isset($data['abbreviated_code']) ? $data['abbreviated_code'] : null;
        $this->container['abbreviated_description'] = isset($data['abbreviated_description']) ? $data['abbreviated_description'] : null;
        $this->container['assignable_by_marketing'] = isset($data['assignable_by_marketing']) ? $data['assignable_by_marketing'] : null;
        $this->container['background_color'] = isset($data['background_color']) ? $data['background_color'] : null;
        $this->container['text_color'] = isset($data['text_color']) ? $data['text_color'] : null;
        $this->container['status_group'] = isset($data['status_group']) ? $data['status_group'] : null;
        $this->container['pattern'] = isset($data['pattern']) ? $data['pattern'] : null;
        $this->container['allowedfor_block_use'] = isset($data['allowedfor_block_use']) ? $data['allowedfor_block_use'] : null;
        $this->container['lost_flag'] = isset($data['lost_flag']) ? $data['lost_flag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['event_scope'] === null) {
            $invalidProperties[] = "'event_scope' can't be null";
        }
        if ($this->container['job_scope'] === null) {
            $invalidProperties[] = "'job_scope' can't be null";
        }
        if ($this->container['abbreviated_code'] === null) {
            $invalidProperties[] = "'abbreviated_code' can't be null";
        }
        if ($this->container['abbreviated_description'] === null) {
            $invalidProperties[] = "'abbreviated_description' can't be null";
        }
        if ($this->container['assignable_by_marketing'] === null) {
            $invalidProperties[] = "'assignable_by_marketing' can't be null";
        }
        if ($this->container['background_color'] === null) {
            $invalidProperties[] = "'background_color' can't be null";
        }
        if ($this->container['text_color'] === null) {
            $invalidProperties[] = "'text_color' can't be null";
        }
        if ($this->container['status_group'] === null) {
            $invalidProperties[] = "'status_group' can't be null";
        }
        if ($this->container['pattern'] === null) {
            $invalidProperties[] = "'pattern' can't be null";
        }
        if ($this->container['allowedfor_block_use'] === null) {
            $invalidProperties[] = "'allowedfor_block_use' can't be null";
        }
        if ($this->container['lost_flag'] === null) {
            $invalidProperties[] = "'lost_flag' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV130_STATUS_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV130_STATUS_DESC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 40  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets event_scope
     *
     * @return string
     */
    public function getEventScope()
    {
        return $this->container['event_scope'];
    }

    /**
     * Sets event_scope
     *
     * @param string $event_scope <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV130_EVT_FUNC_EFB  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEventScope($event_scope)
    {
        $this->container['event_scope'] = $event_scope;

        return $this;
    }

    /**
     * Gets job_scope
     *
     * @return string
     */
    public function getJobScope()
    {
        return $this->container['job_scope'];
    }

    /**
     * Sets job_scope
     *
     * @param string $job_scope <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV130_JOB_FUNC_JFB  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setJobScope($job_scope)
    {
        $this->container['job_scope'] = $job_scope;

        return $this;
    }

    /**
     * Gets abbreviated_code
     *
     * @return string
     */
    public function getAbbreviatedCode()
    {
        return $this->container['abbreviated_code'];
    }

    /**
     * Sets abbreviated_code
     *
     * @param string $abbreviated_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV130_USR_DEFN_STS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAbbreviatedCode($abbreviated_code)
    {
        $this->container['abbreviated_code'] = $abbreviated_code;

        return $this;
    }

    /**
     * Gets abbreviated_description
     *
     * @return string
     */
    public function getAbbreviatedDescription()
    {
        return $this->container['abbreviated_description'];
    }

    /**
     * Sets abbreviated_description
     *
     * @param string $abbreviated_description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV130_ABBR_STS_DESC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 5  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAbbreviatedDescription($abbreviated_description)
    {
        $this->container['abbreviated_description'] = $abbreviated_description;

        return $this;
    }

    /**
     * Gets assignable_by_marketing
     *
     * @return string
     */
    public function getAssignableByMarketing()
    {
        return $this->container['assignable_by_marketing'];
    }

    /**
     * Sets assignable_by_marketing
     *
     * @param string $assignable_by_marketing <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV130_MKT_CTL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAssignableByMarketing($assignable_by_marketing)
    {
        $this->container['assignable_by_marketing'] = $assignable_by_marketing;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return int
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param int $background_color <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV130_STS_COLOR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBackgroundColor($background_color)
    {
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets text_color
     *
     * @return int
     */
    public function getTextColor()
    {
        return $this->container['text_color'];
    }

    /**
     * Sets text_color
     *
     * @param int $text_color <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV130_TXT_COLOR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setTextColor($text_color)
    {
        $this->container['text_color'] = $text_color;

        return $this;
    }

    /**
     * Gets status_group
     *
     * @return string
     */
    public function getStatusGroup()
    {
        return $this->container['status_group'];
    }

    /**
     * Sets status_group
     *
     * @param string $status_group <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV130_USR_STS_3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setStatusGroup($status_group)
    {
        $this->container['status_group'] = $status_group;

        return $this;
    }

    /**
     * Gets pattern
     *
     * @return string
     */
    public function getPattern()
    {
        return $this->container['pattern'];
    }

    /**
     * Sets pattern
     *
     * @param string $pattern <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV130_USR_STS_7  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPattern($pattern)
    {
        $this->container['pattern'] = $pattern;

        return $this;
    }

    /**
     * Gets allowedfor_block_use
     *
     * @return string
     */
    public function getAllowedforBlockUse()
    {
        return $this->container['allowedfor_block_use'];
    }

    /**
     * Sets allowedfor_block_use
     *
     * @param string $allowedfor_block_use <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV130_ALLOW_BLOCKS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAllowedforBlockUse($allowedfor_block_use)
    {
        $this->container['allowedfor_block_use'] = $allowedfor_block_use;

        return $this;
    }

    /**
     * Gets lost_flag
     *
     * @return string
     */
    public function getLostFlag()
    {
        return $this->container['lost_flag'];
    }

    /**
     * Sets lost_flag
     *
     * @param string $lost_flag <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV130_LOST_FLAG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLostFlag($lost_flag)
    {
        $this->container['lost_flag'] = $lost_flag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


