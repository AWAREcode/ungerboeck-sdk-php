<?php
/**
 * SpacesModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * SpacesModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SpacesModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SpacesModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization' => 'string',
        'code' => 'string',
        'space_description' => 'string',
        'order' => 'string',
        'bold' => 'string',
        'visible' => 'string',
        'base_composite' => 'string',
        'indent' => 'string',
        'space_gl6x' => 'string',
        'space_gl2x' => 'string',
        'note1' => 'string',
        'note2' => 'string',
        'line_break' => 'string',
        'type' => 'string',
        'changed_by_code' => 'string',
        'underline' => 'string',
        'itemize_bookings' => 'string',
        'user_field' => 'string',
        'abbreviated_description' => 'string',
        'account' => 'string',
        'inventory' => 'string',
        'sensitivity' => 'string',
        'alternate_description' => 'string',
        'default_booking_um' => 'string',
        'default_booking_units' => 'double',
        'alternate_description2' => 'string',
        'check_conflicts_by' => 'string',
        'capacity_id_to_use' => 'string',
        'capacity_amount' => 'double',
        'count_utilization' => 'string',
        'quick_view' => 'string',
        'changed_on' => '\DateTime',
        'entered_on' => '\DateTime',
        'entered_by_code' => 'string',
        'text_color' => 'int',
        'alternate_description3' => 'string',
        'alternate_description4' => 'string',
        'alternate_description5' => 'string',
        'level1_space_hierarchy' => 'int',
        'level2_space_hierarchy' => 'int',
        'lead_hours' => 'double',
        'strike_hours' => 'double',
        'generic_space' => 'string',
        'bookable' => 'string',
        'useas_anchor_venue' => 'string',
        'usefor_registration' => 'string',
        'location' => 'string',
        'box_office_vendor_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization' => null,
        'code' => null,
        'space_description' => null,
        'order' => null,
        'bold' => null,
        'visible' => null,
        'base_composite' => null,
        'indent' => null,
        'space_gl6x' => null,
        'space_gl2x' => null,
        'note1' => null,
        'note2' => null,
        'line_break' => null,
        'type' => null,
        'changed_by_code' => null,
        'underline' => null,
        'itemize_bookings' => null,
        'user_field' => null,
        'abbreviated_description' => null,
        'account' => null,
        'inventory' => null,
        'sensitivity' => null,
        'alternate_description' => null,
        'default_booking_um' => null,
        'default_booking_units' => 'double',
        'alternate_description2' => null,
        'check_conflicts_by' => null,
        'capacity_id_to_use' => null,
        'capacity_amount' => 'double',
        'count_utilization' => null,
        'quick_view' => null,
        'changed_on' => 'date-time',
        'entered_on' => 'date-time',
        'entered_by_code' => null,
        'text_color' => 'int32',
        'alternate_description3' => null,
        'alternate_description4' => null,
        'alternate_description5' => null,
        'level1_space_hierarchy' => 'int32',
        'level2_space_hierarchy' => 'int32',
        'lead_hours' => 'double',
        'strike_hours' => 'double',
        'generic_space' => null,
        'bookable' => null,
        'useas_anchor_venue' => null,
        'usefor_registration' => null,
        'location' => null,
        'box_office_vendor_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization' => 'Organization',
        'code' => 'Code',
        'space_description' => 'SpaceDescription',
        'order' => 'Order',
        'bold' => 'Bold',
        'visible' => 'Visible',
        'base_composite' => 'BaseComposite',
        'indent' => 'Indent',
        'space_gl6x' => 'SpaceGL6x',
        'space_gl2x' => 'SpaceGL2x',
        'note1' => 'Note1',
        'note2' => 'Note2',
        'line_break' => 'LineBreak',
        'type' => 'Type',
        'changed_by_code' => 'ChangedByCode',
        'underline' => 'Underline',
        'itemize_bookings' => 'ItemizeBookings',
        'user_field' => 'UserField',
        'abbreviated_description' => 'AbbreviatedDescription',
        'account' => 'Account',
        'inventory' => 'Inventory',
        'sensitivity' => 'Sensitivity',
        'alternate_description' => 'AlternateDescription',
        'default_booking_um' => 'DefaultBookingUM',
        'default_booking_units' => 'DefaultBookingUnits',
        'alternate_description2' => 'AlternateDescription2',
        'check_conflicts_by' => 'CheckConflictsBy',
        'capacity_id_to_use' => 'CapacityIDToUse',
        'capacity_amount' => 'CapacityAmount',
        'count_utilization' => 'CountUtilization',
        'quick_view' => 'QuickView',
        'changed_on' => 'ChangedOn',
        'entered_on' => 'EnteredOn',
        'entered_by_code' => 'EnteredByCode',
        'text_color' => 'TextColor',
        'alternate_description3' => 'AlternateDescription3',
        'alternate_description4' => 'AlternateDescription4',
        'alternate_description5' => 'AlternateDescription5',
        'level1_space_hierarchy' => 'Level1SpaceHierarchy',
        'level2_space_hierarchy' => 'Level2SpaceHierarchy',
        'lead_hours' => 'LeadHours',
        'strike_hours' => 'StrikeHours',
        'generic_space' => 'GenericSpace',
        'bookable' => 'Bookable',
        'useas_anchor_venue' => 'UseasAnchorVenue',
        'usefor_registration' => 'UseforRegistration',
        'location' => 'Location',
        'box_office_vendor_id' => 'BoxOfficeVendorID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization' => 'setOrganization',
        'code' => 'setCode',
        'space_description' => 'setSpaceDescription',
        'order' => 'setOrder',
        'bold' => 'setBold',
        'visible' => 'setVisible',
        'base_composite' => 'setBaseComposite',
        'indent' => 'setIndent',
        'space_gl6x' => 'setSpaceGl6x',
        'space_gl2x' => 'setSpaceGl2x',
        'note1' => 'setNote1',
        'note2' => 'setNote2',
        'line_break' => 'setLineBreak',
        'type' => 'setType',
        'changed_by_code' => 'setChangedByCode',
        'underline' => 'setUnderline',
        'itemize_bookings' => 'setItemizeBookings',
        'user_field' => 'setUserField',
        'abbreviated_description' => 'setAbbreviatedDescription',
        'account' => 'setAccount',
        'inventory' => 'setInventory',
        'sensitivity' => 'setSensitivity',
        'alternate_description' => 'setAlternateDescription',
        'default_booking_um' => 'setDefaultBookingUm',
        'default_booking_units' => 'setDefaultBookingUnits',
        'alternate_description2' => 'setAlternateDescription2',
        'check_conflicts_by' => 'setCheckConflictsBy',
        'capacity_id_to_use' => 'setCapacityIdToUse',
        'capacity_amount' => 'setCapacityAmount',
        'count_utilization' => 'setCountUtilization',
        'quick_view' => 'setQuickView',
        'changed_on' => 'setChangedOn',
        'entered_on' => 'setEnteredOn',
        'entered_by_code' => 'setEnteredByCode',
        'text_color' => 'setTextColor',
        'alternate_description3' => 'setAlternateDescription3',
        'alternate_description4' => 'setAlternateDescription4',
        'alternate_description5' => 'setAlternateDescription5',
        'level1_space_hierarchy' => 'setLevel1SpaceHierarchy',
        'level2_space_hierarchy' => 'setLevel2SpaceHierarchy',
        'lead_hours' => 'setLeadHours',
        'strike_hours' => 'setStrikeHours',
        'generic_space' => 'setGenericSpace',
        'bookable' => 'setBookable',
        'useas_anchor_venue' => 'setUseasAnchorVenue',
        'usefor_registration' => 'setUseforRegistration',
        'location' => 'setLocation',
        'box_office_vendor_id' => 'setBoxOfficeVendorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization' => 'getOrganization',
        'code' => 'getCode',
        'space_description' => 'getSpaceDescription',
        'order' => 'getOrder',
        'bold' => 'getBold',
        'visible' => 'getVisible',
        'base_composite' => 'getBaseComposite',
        'indent' => 'getIndent',
        'space_gl6x' => 'getSpaceGl6x',
        'space_gl2x' => 'getSpaceGl2x',
        'note1' => 'getNote1',
        'note2' => 'getNote2',
        'line_break' => 'getLineBreak',
        'type' => 'getType',
        'changed_by_code' => 'getChangedByCode',
        'underline' => 'getUnderline',
        'itemize_bookings' => 'getItemizeBookings',
        'user_field' => 'getUserField',
        'abbreviated_description' => 'getAbbreviatedDescription',
        'account' => 'getAccount',
        'inventory' => 'getInventory',
        'sensitivity' => 'getSensitivity',
        'alternate_description' => 'getAlternateDescription',
        'default_booking_um' => 'getDefaultBookingUm',
        'default_booking_units' => 'getDefaultBookingUnits',
        'alternate_description2' => 'getAlternateDescription2',
        'check_conflicts_by' => 'getCheckConflictsBy',
        'capacity_id_to_use' => 'getCapacityIdToUse',
        'capacity_amount' => 'getCapacityAmount',
        'count_utilization' => 'getCountUtilization',
        'quick_view' => 'getQuickView',
        'changed_on' => 'getChangedOn',
        'entered_on' => 'getEnteredOn',
        'entered_by_code' => 'getEnteredByCode',
        'text_color' => 'getTextColor',
        'alternate_description3' => 'getAlternateDescription3',
        'alternate_description4' => 'getAlternateDescription4',
        'alternate_description5' => 'getAlternateDescription5',
        'level1_space_hierarchy' => 'getLevel1SpaceHierarchy',
        'level2_space_hierarchy' => 'getLevel2SpaceHierarchy',
        'lead_hours' => 'getLeadHours',
        'strike_hours' => 'getStrikeHours',
        'generic_space' => 'getGenericSpace',
        'bookable' => 'getBookable',
        'useas_anchor_venue' => 'getUseasAnchorVenue',
        'usefor_registration' => 'getUseforRegistration',
        'location' => 'getLocation',
        'box_office_vendor_id' => 'getBoxOfficeVendorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['space_description'] = isset($data['space_description']) ? $data['space_description'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['bold'] = isset($data['bold']) ? $data['bold'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : null;
        $this->container['base_composite'] = isset($data['base_composite']) ? $data['base_composite'] : null;
        $this->container['indent'] = isset($data['indent']) ? $data['indent'] : null;
        $this->container['space_gl6x'] = isset($data['space_gl6x']) ? $data['space_gl6x'] : null;
        $this->container['space_gl2x'] = isset($data['space_gl2x']) ? $data['space_gl2x'] : null;
        $this->container['note1'] = isset($data['note1']) ? $data['note1'] : null;
        $this->container['note2'] = isset($data['note2']) ? $data['note2'] : null;
        $this->container['line_break'] = isset($data['line_break']) ? $data['line_break'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['changed_by_code'] = isset($data['changed_by_code']) ? $data['changed_by_code'] : null;
        $this->container['underline'] = isset($data['underline']) ? $data['underline'] : null;
        $this->container['itemize_bookings'] = isset($data['itemize_bookings']) ? $data['itemize_bookings'] : null;
        $this->container['user_field'] = isset($data['user_field']) ? $data['user_field'] : null;
        $this->container['abbreviated_description'] = isset($data['abbreviated_description']) ? $data['abbreviated_description'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['sensitivity'] = isset($data['sensitivity']) ? $data['sensitivity'] : null;
        $this->container['alternate_description'] = isset($data['alternate_description']) ? $data['alternate_description'] : null;
        $this->container['default_booking_um'] = isset($data['default_booking_um']) ? $data['default_booking_um'] : null;
        $this->container['default_booking_units'] = isset($data['default_booking_units']) ? $data['default_booking_units'] : null;
        $this->container['alternate_description2'] = isset($data['alternate_description2']) ? $data['alternate_description2'] : null;
        $this->container['check_conflicts_by'] = isset($data['check_conflicts_by']) ? $data['check_conflicts_by'] : null;
        $this->container['capacity_id_to_use'] = isset($data['capacity_id_to_use']) ? $data['capacity_id_to_use'] : null;
        $this->container['capacity_amount'] = isset($data['capacity_amount']) ? $data['capacity_amount'] : null;
        $this->container['count_utilization'] = isset($data['count_utilization']) ? $data['count_utilization'] : null;
        $this->container['quick_view'] = isset($data['quick_view']) ? $data['quick_view'] : null;
        $this->container['changed_on'] = isset($data['changed_on']) ? $data['changed_on'] : null;
        $this->container['entered_on'] = isset($data['entered_on']) ? $data['entered_on'] : null;
        $this->container['entered_by_code'] = isset($data['entered_by_code']) ? $data['entered_by_code'] : null;
        $this->container['text_color'] = isset($data['text_color']) ? $data['text_color'] : null;
        $this->container['alternate_description3'] = isset($data['alternate_description3']) ? $data['alternate_description3'] : null;
        $this->container['alternate_description4'] = isset($data['alternate_description4']) ? $data['alternate_description4'] : null;
        $this->container['alternate_description5'] = isset($data['alternate_description5']) ? $data['alternate_description5'] : null;
        $this->container['level1_space_hierarchy'] = isset($data['level1_space_hierarchy']) ? $data['level1_space_hierarchy'] : null;
        $this->container['level2_space_hierarchy'] = isset($data['level2_space_hierarchy']) ? $data['level2_space_hierarchy'] : null;
        $this->container['lead_hours'] = isset($data['lead_hours']) ? $data['lead_hours'] : null;
        $this->container['strike_hours'] = isset($data['strike_hours']) ? $data['strike_hours'] : null;
        $this->container['generic_space'] = isset($data['generic_space']) ? $data['generic_space'] : null;
        $this->container['bookable'] = isset($data['bookable']) ? $data['bookable'] : null;
        $this->container['useas_anchor_venue'] = isset($data['useas_anchor_venue']) ? $data['useas_anchor_venue'] : null;
        $this->container['usefor_registration'] = isset($data['usefor_registration']) ? $data['usefor_registration'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['box_office_vendor_id'] = isset($data['box_office_vendor_id']) ? $data['box_office_vendor_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['organization'] === null) {
            $invalidProperties[] = "'organization' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['space_description'] === null) {
            $invalidProperties[] = "'space_description' can't be null";
        }
        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        if ($this->container['bold'] === null) {
            $invalidProperties[] = "'bold' can't be null";
        }
        if ($this->container['visible'] === null) {
            $invalidProperties[] = "'visible' can't be null";
        }
        if ($this->container['base_composite'] === null) {
            $invalidProperties[] = "'base_composite' can't be null";
        }
        if ($this->container['indent'] === null) {
            $invalidProperties[] = "'indent' can't be null";
        }
        if ($this->container['space_gl6x'] === null) {
            $invalidProperties[] = "'space_gl6x' can't be null";
        }
        if ($this->container['space_gl2x'] === null) {
            $invalidProperties[] = "'space_gl2x' can't be null";
        }
        if ($this->container['note1'] === null) {
            $invalidProperties[] = "'note1' can't be null";
        }
        if ($this->container['note2'] === null) {
            $invalidProperties[] = "'note2' can't be null";
        }
        if ($this->container['line_break'] === null) {
            $invalidProperties[] = "'line_break' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['changed_by_code'] === null) {
            $invalidProperties[] = "'changed_by_code' can't be null";
        }
        if ($this->container['underline'] === null) {
            $invalidProperties[] = "'underline' can't be null";
        }
        if ($this->container['itemize_bookings'] === null) {
            $invalidProperties[] = "'itemize_bookings' can't be null";
        }
        if ($this->container['user_field'] === null) {
            $invalidProperties[] = "'user_field' can't be null";
        }
        if ($this->container['abbreviated_description'] === null) {
            $invalidProperties[] = "'abbreviated_description' can't be null";
        }
        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        if ($this->container['inventory'] === null) {
            $invalidProperties[] = "'inventory' can't be null";
        }
        if ($this->container['sensitivity'] === null) {
            $invalidProperties[] = "'sensitivity' can't be null";
        }
        if ($this->container['alternate_description'] === null) {
            $invalidProperties[] = "'alternate_description' can't be null";
        }
        if ($this->container['default_booking_um'] === null) {
            $invalidProperties[] = "'default_booking_um' can't be null";
        }
        if ($this->container['default_booking_units'] === null) {
            $invalidProperties[] = "'default_booking_units' can't be null";
        }
        if ($this->container['alternate_description2'] === null) {
            $invalidProperties[] = "'alternate_description2' can't be null";
        }
        if ($this->container['check_conflicts_by'] === null) {
            $invalidProperties[] = "'check_conflicts_by' can't be null";
        }
        if ($this->container['capacity_id_to_use'] === null) {
            $invalidProperties[] = "'capacity_id_to_use' can't be null";
        }
        if ($this->container['capacity_amount'] === null) {
            $invalidProperties[] = "'capacity_amount' can't be null";
        }
        if ($this->container['count_utilization'] === null) {
            $invalidProperties[] = "'count_utilization' can't be null";
        }
        if ($this->container['quick_view'] === null) {
            $invalidProperties[] = "'quick_view' can't be null";
        }
        if ($this->container['changed_on'] === null) {
            $invalidProperties[] = "'changed_on' can't be null";
        }
        if ($this->container['entered_on'] === null) {
            $invalidProperties[] = "'entered_on' can't be null";
        }
        if ($this->container['entered_by_code'] === null) {
            $invalidProperties[] = "'entered_by_code' can't be null";
        }
        if ($this->container['text_color'] === null) {
            $invalidProperties[] = "'text_color' can't be null";
        }
        if ($this->container['alternate_description3'] === null) {
            $invalidProperties[] = "'alternate_description3' can't be null";
        }
        if ($this->container['alternate_description4'] === null) {
            $invalidProperties[] = "'alternate_description4' can't be null";
        }
        if ($this->container['alternate_description5'] === null) {
            $invalidProperties[] = "'alternate_description5' can't be null";
        }
        if ($this->container['level1_space_hierarchy'] === null) {
            $invalidProperties[] = "'level1_space_hierarchy' can't be null";
        }
        if ($this->container['level2_space_hierarchy'] === null) {
            $invalidProperties[] = "'level2_space_hierarchy' can't be null";
        }
        if ($this->container['lead_hours'] === null) {
            $invalidProperties[] = "'lead_hours' can't be null";
        }
        if ($this->container['strike_hours'] === null) {
            $invalidProperties[] = "'strike_hours' can't be null";
        }
        if ($this->container['generic_space'] === null) {
            $invalidProperties[] = "'generic_space' can't be null";
        }
        if ($this->container['bookable'] === null) {
            $invalidProperties[] = "'bookable' can't be null";
        }
        if ($this->container['useas_anchor_venue'] === null) {
            $invalidProperties[] = "'useas_anchor_venue' can't be null";
        }
        if ($this->container['usefor_registration'] === null) {
            $invalidProperties[] = "'usefor_registration' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['box_office_vendor_id'] === null) {
            $invalidProperties[] = "'box_office_vendor_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization
     *
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string $organization <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_ORG_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_SPACE_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets space_description
     *
     * @return string
     */
    public function getSpaceDescription()
    {
        return $this->container['space_description'];
    }

    /**
     * Sets space_description
     *
     * @param string $space_description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_SPACE_DESC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 100  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSpaceDescription($space_description)
    {
        $this->container['space_description'] = $space_description;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_CAL_SEQ  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 4  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets bold
     *
     * @return string
     */
    public function getBold()
    {
        return $this->container['bold'];
    }

    /**
     * Sets bold
     *
     * @param string $bold <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_SPACE_BOLD  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBold($bold)
    {
        $this->container['bold'] = $bold;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return string
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param string $visible <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_BOOKABLE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets base_composite
     *
     * @return string
     */
    public function getBaseComposite()
    {
        return $this->container['base_composite'];
    }

    /**
     * Sets base_composite
     *
     * @param string $base_composite <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_BASE_COMB_FLAG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBaseComposite($base_composite)
    {
        $this->container['base_composite'] = $base_composite;

        return $this;
    }

    /**
     * Gets indent
     *
     * @return string
     */
    public function getIndent()
    {
        return $this->container['indent'];
    }

    /**
     * Sets indent
     *
     * @param string $indent <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_SPACE_INDENT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setIndent($indent)
    {
        $this->container['indent'] = $indent;

        return $this;
    }

    /**
     * Gets space_gl6x
     *
     * @return string
     */
    public function getSpaceGl6x()
    {
        return $this->container['space_gl6x'];
    }

    /**
     * Sets space_gl6x
     *
     * @param string $space_gl6x <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_SPACE_GL_6X  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSpaceGl6x($space_gl6x)
    {
        $this->container['space_gl6x'] = $space_gl6x;

        return $this;
    }

    /**
     * Gets space_gl2x
     *
     * @return string
     */
    public function getSpaceGl2x()
    {
        return $this->container['space_gl2x'];
    }

    /**
     * Sets space_gl2x
     *
     * @param string $space_gl2x <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_SPACE_GL_2X  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSpaceGl2x($space_gl2x)
    {
        $this->container['space_gl2x'] = $space_gl2x;

        return $this;
    }

    /**
     * Gets note1
     *
     * @return string
     */
    public function getNote1()
    {
        return $this->container['note1'];
    }

    /**
     * Sets note1
     *
     * @param string $note1 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_NOTE_1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 58  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setNote1($note1)
    {
        $this->container['note1'] = $note1;

        return $this;
    }

    /**
     * Gets note2
     *
     * @return string
     */
    public function getNote2()
    {
        return $this->container['note2'];
    }

    /**
     * Sets note2
     *
     * @param string $note2 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_NOTE_2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 58  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setNote2($note2)
    {
        $this->container['note2'] = $note2;

        return $this;
    }

    /**
     * Gets line_break
     *
     * @return string
     */
    public function getLineBreak()
    {
        return $this->container['line_break'];
    }

    /**
     * Sets line_break
     *
     * @param string $line_break <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_SPACE_BREAK  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLineBreak($line_break)
    {
        $this->container['line_break'] = $line_break;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_SPACE_TYPE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets changed_by_code
     *
     * @return string
     */
    public function getChangedByCode()
    {
        return $this->container['changed_by_code'];
    }

    /**
     * Sets changed_by_code
     *
     * @param string $changed_by_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_UPD_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedByCode($changed_by_code)
    {
        $this->container['changed_by_code'] = $changed_by_code;

        return $this;
    }

    /**
     * Gets underline
     *
     * @return string
     */
    public function getUnderline()
    {
        return $this->container['underline'];
    }

    /**
     * Sets underline
     *
     * @param string $underline <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_SPACE_UNDER  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUnderline($underline)
    {
        $this->container['underline'] = $underline;

        return $this;
    }

    /**
     * Gets itemize_bookings
     *
     * @return string
     */
    public function getItemizeBookings()
    {
        return $this->container['itemize_bookings'];
    }

    /**
     * Sets itemize_bookings
     *
     * @param string $itemize_bookings <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_ABBR_NAME_7X  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 7  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setItemizeBookings($itemize_bookings)
    {
        $this->container['itemize_bookings'] = $itemize_bookings;

        return $this;
    }

    /**
     * Gets user_field
     *
     * @return string
     */
    public function getUserField()
    {
        return $this->container['user_field'];
    }

    /**
     * Sets user_field
     *
     * @param string $user_field <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_USER_FLD_6X  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUserField($user_field)
    {
        $this->container['user_field'] = $user_field;

        return $this;
    }

    /**
     * Gets abbreviated_description
     *
     * @return string
     */
    public function getAbbreviatedDescription()
    {
        return $this->container['abbreviated_description'];
    }

    /**
     * Sets abbreviated_description
     *
     * @param string $abbreviated_description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_ABBR_SPC_DESC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 15  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAbbreviatedDescription($abbreviated_description)
    {
        $this->container['abbreviated_description'] = $abbreviated_description;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string $account <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_SPACE_ACCT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 8  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return string
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param string $inventory <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_INVENTORY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets sensitivity
     *
     * @return string
     */
    public function getSensitivity()
    {
        return $this->container['sensitivity'];
    }

    /**
     * Sets sensitivity
     *
     * @param string $sensitivity <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_SENSITIVITY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSensitivity($sensitivity)
    {
        $this->container['sensitivity'] = $sensitivity;

        return $this;
    }

    /**
     * Gets alternate_description
     *
     * @return string
     */
    public function getAlternateDescription()
    {
        return $this->container['alternate_description'];
    }

    /**
     * Sets alternate_description
     *
     * @param string $alternate_description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_ALT_SPACE_DESC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 100  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateDescription($alternate_description)
    {
        $this->container['alternate_description'] = $alternate_description;

        return $this;
    }

    /**
     * Gets default_booking_um
     *
     * @return string
     */
    public function getDefaultBookingUm()
    {
        return $this->container['default_booking_um'];
    }

    /**
     * Sets default_booking_um
     *
     * @param string $default_booking_um <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_DEF_UOM  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDefaultBookingUm($default_booking_um)
    {
        $this->container['default_booking_um'] = $default_booking_um;

        return $this;
    }

    /**
     * Gets default_booking_units
     *
     * @return double
     */
    public function getDefaultBookingUnits()
    {
        return $this->container['default_booking_units'];
    }

    /**
     * Sets default_booking_units
     *
     * @param double $default_booking_units <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_DEF_UNITS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDefaultBookingUnits($default_booking_units)
    {
        $this->container['default_booking_units'] = $default_booking_units;

        return $this;
    }

    /**
     * Gets alternate_description2
     *
     * @return string
     */
    public function getAlternateDescription2()
    {
        return $this->container['alternate_description2'];
    }

    /**
     * Sets alternate_description2
     *
     * @param string $alternate_description2 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_ALT_SPACE_DESC2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 100  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateDescription2($alternate_description2)
    {
        $this->container['alternate_description2'] = $alternate_description2;

        return $this;
    }

    /**
     * Gets check_conflicts_by
     *
     * @return string
     */
    public function getCheckConflictsBy()
    {
        return $this->container['check_conflicts_by'];
    }

    /**
     * Sets check_conflicts_by
     *
     * @param string $check_conflicts_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_ALLOW_CONFL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCheckConflictsBy($check_conflicts_by)
    {
        $this->container['check_conflicts_by'] = $check_conflicts_by;

        return $this;
    }

    /**
     * Gets capacity_id_to_use
     *
     * @return string
     */
    public function getCapacityIdToUse()
    {
        return $this->container['capacity_id_to_use'];
    }

    /**
     * Sets capacity_id_to_use
     *
     * @param string $capacity_id_to_use <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_CAPACITY_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 8  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCapacityIdToUse($capacity_id_to_use)
    {
        $this->container['capacity_id_to_use'] = $capacity_id_to_use;

        return $this;
    }

    /**
     * Gets capacity_amount
     *
     * @return double
     */
    public function getCapacityAmount()
    {
        return $this->container['capacity_amount'];
    }

    /**
     * Sets capacity_amount
     *
     * @param double $capacity_amount <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_CAPACITY_AMT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 92  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCapacityAmount($capacity_amount)
    {
        $this->container['capacity_amount'] = $capacity_amount;

        return $this;
    }

    /**
     * Gets count_utilization
     *
     * @return string
     */
    public function getCountUtilization()
    {
        return $this->container['count_utilization'];
    }

    /**
     * Sets count_utilization
     *
     * @param string $count_utilization <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_USAGE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCountUtilization($count_utilization)
    {
        $this->container['count_utilization'] = $count_utilization;

        return $this;
    }

    /**
     * Gets quick_view
     *
     * @return string
     */
    public function getQuickView()
    {
        return $this->container['quick_view'];
    }

    /**
     * Sets quick_view
     *
     * @param string $quick_view <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_CAL_QVIEW  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setQuickView($quick_view)
    {
        $this->container['quick_view'] = $quick_view;

        return $this;
    }

    /**
     * Gets changed_on
     *
     * @return \DateTime
     */
    public function getChangedOn()
    {
        return $this->container['changed_on'];
    }

    /**
     * Sets changed_on
     *
     * @param \DateTime $changed_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_UPD_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedOn($changed_on)
    {
        $this->container['changed_on'] = $changed_on;

        return $this;
    }

    /**
     * Gets entered_on
     *
     * @return \DateTime
     */
    public function getEnteredOn()
    {
        return $this->container['entered_on'];
    }

    /**
     * Sets entered_on
     *
     * @param \DateTime $entered_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_ENT_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredOn($entered_on)
    {
        $this->container['entered_on'] = $entered_on;

        return $this;
    }

    /**
     * Gets entered_by_code
     *
     * @return string
     */
    public function getEnteredByCode()
    {
        return $this->container['entered_by_code'];
    }

    /**
     * Sets entered_by_code
     *
     * @param string $entered_by_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_ENT_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredByCode($entered_by_code)
    {
        $this->container['entered_by_code'] = $entered_by_code;

        return $this;
    }

    /**
     * Gets text_color
     *
     * @return int
     */
    public function getTextColor()
    {
        return $this->container['text_color'];
    }

    /**
     * Sets text_color
     *
     * @param int $text_color <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_TEXT_COLOR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setTextColor($text_color)
    {
        $this->container['text_color'] = $text_color;

        return $this;
    }

    /**
     * Gets alternate_description3
     *
     * @return string
     */
    public function getAlternateDescription3()
    {
        return $this->container['alternate_description3'];
    }

    /**
     * Sets alternate_description3
     *
     * @param string $alternate_description3 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_ALT_SPACE_DESC3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 100  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateDescription3($alternate_description3)
    {
        $this->container['alternate_description3'] = $alternate_description3;

        return $this;
    }

    /**
     * Gets alternate_description4
     *
     * @return string
     */
    public function getAlternateDescription4()
    {
        return $this->container['alternate_description4'];
    }

    /**
     * Sets alternate_description4
     *
     * @param string $alternate_description4 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_ALT_SPACE_DESC4  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 100  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateDescription4($alternate_description4)
    {
        $this->container['alternate_description4'] = $alternate_description4;

        return $this;
    }

    /**
     * Gets alternate_description5
     *
     * @return string
     */
    public function getAlternateDescription5()
    {
        return $this->container['alternate_description5'];
    }

    /**
     * Sets alternate_description5
     *
     * @param string $alternate_description5 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_ALT_SPACE_DESC5  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 100  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateDescription5($alternate_description5)
    {
        $this->container['alternate_description5'] = $alternate_description5;

        return $this;
    }

    /**
     * Gets level1_space_hierarchy
     *
     * @return int
     */
    public function getLevel1SpaceHierarchy()
    {
        return $this->container['level1_space_hierarchy'];
    }

    /**
     * Sets level1_space_hierarchy
     *
     * @param int $level1_space_hierarchy <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Level 2 hierarchy required if set.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> EV800_HIER_LEVEL_1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLevel1SpaceHierarchy($level1_space_hierarchy)
    {
        $this->container['level1_space_hierarchy'] = $level1_space_hierarchy;

        return $this;
    }

    /**
     * Gets level2_space_hierarchy
     *
     * @return int
     */
    public function getLevel2SpaceHierarchy()
    {
        return $this->container['level2_space_hierarchy'];
    }

    /**
     * Sets level2_space_hierarchy
     *
     * @param int $level2_space_hierarchy <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> Level 1 hierarchy required if set.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> EV800_HIER_LEVEL_2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLevel2SpaceHierarchy($level2_space_hierarchy)
    {
        $this->container['level2_space_hierarchy'] = $level2_space_hierarchy;

        return $this;
    }

    /**
     * Gets lead_hours
     *
     * @return double
     */
    public function getLeadHours()
    {
        return $this->container['lead_hours'];
    }

    /**
     * Sets lead_hours
     *
     * @param double $lead_hours <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_LEAD_HRS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 72  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLeadHours($lead_hours)
    {
        $this->container['lead_hours'] = $lead_hours;

        return $this;
    }

    /**
     * Gets strike_hours
     *
     * @return double
     */
    public function getStrikeHours()
    {
        return $this->container['strike_hours'];
    }

    /**
     * Sets strike_hours
     *
     * @param double $strike_hours <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_STRIKE_HRS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 72  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setStrikeHours($strike_hours)
    {
        $this->container['strike_hours'] = $strike_hours;

        return $this;
    }

    /**
     * Gets generic_space
     *
     * @return string
     */
    public function getGenericSpace()
    {
        return $this->container['generic_space'];
    }

    /**
     * Sets generic_space
     *
     * @param string $generic_space <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_GENERIC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setGenericSpace($generic_space)
    {
        $this->container['generic_space'] = $generic_space;

        return $this;
    }

    /**
     * Gets bookable
     *
     * @return string
     */
    public function getBookable()
    {
        return $this->container['bookable'];
    }

    /**
     * Sets bookable
     *
     * @param string $bookable <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_CAL_USE_BOOK  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBookable($bookable)
    {
        $this->container['bookable'] = $bookable;

        return $this;
    }

    /**
     * Gets useas_anchor_venue
     *
     * @return string
     */
    public function getUseasAnchorVenue()
    {
        return $this->container['useas_anchor_venue'];
    }

    /**
     * Sets useas_anchor_venue
     *
     * @param string $useas_anchor_venue <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_USE_FOR_ANCHOR_VENUE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUseasAnchorVenue($useas_anchor_venue)
    {
        $this->container['useas_anchor_venue'] = $useas_anchor_venue;

        return $this;
    }

    /**
     * Gets usefor_registration
     *
     * @return string
     */
    public function getUseforRegistration()
    {
        return $this->container['usefor_registration'];
    }

    /**
     * Sets usefor_registration
     *
     * @param string $usefor_registration <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_USER_FOR_MAPS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUseforRegistration($usefor_registration)
    {
        $this->container['usefor_registration'] = $usefor_registration;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_MAP_SOURCE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2000  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets box_office_vendor_id
     *
     * @return string
     */
    public function getBoxOfficeVendorId()
    {
        return $this->container['box_office_vendor_id'];
    }

    /**
     * Sets box_office_vendor_id
     *
     * @param string $box_office_vendor_id <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV800_BOX_OFFICE_VENDOR_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 50  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBoxOfficeVendorId($box_office_vendor_id)
    {
        $this->container['box_office_vendor_id'] = $box_office_vendor_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


