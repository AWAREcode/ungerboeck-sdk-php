<?php
/**
 * BoothsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * BoothsModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BoothsModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BoothsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization_code' => 'string',
        'sequence_number' => 'int',
        'booth' => 'string',
        'banner_name' => 'string',
        'rank' => 'string',
        'booth_status' => 'string',
        'event' => 'int',
        'function' => 'int',
        'gross_area' => 'double',
        'unit_of_measure' => 'string',
        'column_a' => 'string',
        'column_b' => 'string',
        'open_sides' => 'int',
        'account' => 'string',
        'column_c' => 'string',
        'color' => 'string',
        'changed_on' => '\DateTime',
        'changed_by' => 'string',
        'bold' => 'string',
        'italicize' => 'string',
        'entered_on' => '\DateTime',
        'entered_by' => 'string',
        'underline' => 'string',
        'length' => 'double',
        'width' => 'double',
        'capacity_um' => 'string',
        'capacity_units' => 'double',
        'drawing' => 'int',
        'net_area' => 'double',
        'note' => 'string',
        'show_banner' => 'string',
        'show_booth_code' => 'string',
        'order_number' => 'int',
        'alternate_banner_name1' => 'string',
        'alternate_banner_name2' => 'string',
        'font' => 'string',
        'open_sides_setting' => 'string',
        'alternate_banner_name3' => 'string',
        'alternate_banner_name4' => 'string',
        'alternate_banner_name5' => 'string',
        'order_length' => 'double',
        'order_width' => 'double',
        'front_side_specification' => 'string',
        'front_side_measurement' => 'double',
        'open_side_total' => 'double',
        'manual_open_sides_flag' => 'string',
        'pavilion' => 'int',
        'section' => 'int',
        'open_sides_resource' => 'int',
        'dimensions_resource' => 'int',
        'area_resource' => 'int',
        'booth_user_fields' => '\FomF\Ungerboeck\Client\Model\UserFields'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization_code' => null,
        'sequence_number' => 'int32',
        'booth' => null,
        'banner_name' => null,
        'rank' => null,
        'booth_status' => null,
        'event' => 'int32',
        'function' => 'int32',
        'gross_area' => 'double',
        'unit_of_measure' => null,
        'column_a' => null,
        'column_b' => null,
        'open_sides' => 'int32',
        'account' => null,
        'column_c' => null,
        'color' => null,
        'changed_on' => 'date-time',
        'changed_by' => null,
        'bold' => null,
        'italicize' => null,
        'entered_on' => 'date-time',
        'entered_by' => null,
        'underline' => null,
        'length' => 'double',
        'width' => 'double',
        'capacity_um' => null,
        'capacity_units' => 'double',
        'drawing' => 'int32',
        'net_area' => 'double',
        'note' => null,
        'show_banner' => null,
        'show_booth_code' => null,
        'order_number' => 'int32',
        'alternate_banner_name1' => null,
        'alternate_banner_name2' => null,
        'font' => null,
        'open_sides_setting' => null,
        'alternate_banner_name3' => null,
        'alternate_banner_name4' => null,
        'alternate_banner_name5' => null,
        'order_length' => 'double',
        'order_width' => 'double',
        'front_side_specification' => null,
        'front_side_measurement' => 'double',
        'open_side_total' => 'double',
        'manual_open_sides_flag' => null,
        'pavilion' => 'int32',
        'section' => 'int32',
        'open_sides_resource' => 'int32',
        'dimensions_resource' => 'int32',
        'area_resource' => 'int32',
        'booth_user_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization_code' => 'OrganizationCode',
        'sequence_number' => 'SequenceNumber',
        'booth' => 'Booth',
        'banner_name' => 'BannerName',
        'rank' => 'Rank',
        'booth_status' => 'BoothStatus',
        'event' => 'Event',
        'function' => 'Function',
        'gross_area' => 'GrossArea',
        'unit_of_measure' => 'UnitOfMeasure',
        'column_a' => 'ColumnA',
        'column_b' => 'ColumnB',
        'open_sides' => 'OpenSides',
        'account' => 'Account',
        'column_c' => 'ColumnC',
        'color' => 'Color',
        'changed_on' => 'ChangedOn',
        'changed_by' => 'ChangedBy',
        'bold' => 'Bold',
        'italicize' => 'Italicize',
        'entered_on' => 'EnteredOn',
        'entered_by' => 'EnteredBy',
        'underline' => 'Underline',
        'length' => 'Length',
        'width' => 'Width',
        'capacity_um' => 'CapacityUM',
        'capacity_units' => 'CapacityUnits',
        'drawing' => 'Drawing',
        'net_area' => 'NetArea',
        'note' => 'Note',
        'show_banner' => 'ShowBanner',
        'show_booth_code' => 'ShowBoothCode',
        'order_number' => 'OrderNumber',
        'alternate_banner_name1' => 'AlternateBannerName1',
        'alternate_banner_name2' => 'AlternateBannerName2',
        'font' => 'Font',
        'open_sides_setting' => 'OpenSidesSetting',
        'alternate_banner_name3' => 'AlternateBannerName3',
        'alternate_banner_name4' => 'AlternateBannerName4',
        'alternate_banner_name5' => 'AlternateBannerName5',
        'order_length' => 'OrderLength',
        'order_width' => 'OrderWidth',
        'front_side_specification' => 'FrontSideSpecification',
        'front_side_measurement' => 'FrontSideMeasurement',
        'open_side_total' => 'OpenSideTotal',
        'manual_open_sides_flag' => 'ManualOpenSidesFlag',
        'pavilion' => 'Pavilion',
        'section' => 'Section',
        'open_sides_resource' => 'OpenSidesResource',
        'dimensions_resource' => 'DimensionsResource',
        'area_resource' => 'AreaResource',
        'booth_user_fields' => 'BoothUserFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization_code' => 'setOrganizationCode',
        'sequence_number' => 'setSequenceNumber',
        'booth' => 'setBooth',
        'banner_name' => 'setBannerName',
        'rank' => 'setRank',
        'booth_status' => 'setBoothStatus',
        'event' => 'setEvent',
        'function' => 'setFunction',
        'gross_area' => 'setGrossArea',
        'unit_of_measure' => 'setUnitOfMeasure',
        'column_a' => 'setColumnA',
        'column_b' => 'setColumnB',
        'open_sides' => 'setOpenSides',
        'account' => 'setAccount',
        'column_c' => 'setColumnC',
        'color' => 'setColor',
        'changed_on' => 'setChangedOn',
        'changed_by' => 'setChangedBy',
        'bold' => 'setBold',
        'italicize' => 'setItalicize',
        'entered_on' => 'setEnteredOn',
        'entered_by' => 'setEnteredBy',
        'underline' => 'setUnderline',
        'length' => 'setLength',
        'width' => 'setWidth',
        'capacity_um' => 'setCapacityUm',
        'capacity_units' => 'setCapacityUnits',
        'drawing' => 'setDrawing',
        'net_area' => 'setNetArea',
        'note' => 'setNote',
        'show_banner' => 'setShowBanner',
        'show_booth_code' => 'setShowBoothCode',
        'order_number' => 'setOrderNumber',
        'alternate_banner_name1' => 'setAlternateBannerName1',
        'alternate_banner_name2' => 'setAlternateBannerName2',
        'font' => 'setFont',
        'open_sides_setting' => 'setOpenSidesSetting',
        'alternate_banner_name3' => 'setAlternateBannerName3',
        'alternate_banner_name4' => 'setAlternateBannerName4',
        'alternate_banner_name5' => 'setAlternateBannerName5',
        'order_length' => 'setOrderLength',
        'order_width' => 'setOrderWidth',
        'front_side_specification' => 'setFrontSideSpecification',
        'front_side_measurement' => 'setFrontSideMeasurement',
        'open_side_total' => 'setOpenSideTotal',
        'manual_open_sides_flag' => 'setManualOpenSidesFlag',
        'pavilion' => 'setPavilion',
        'section' => 'setSection',
        'open_sides_resource' => 'setOpenSidesResource',
        'dimensions_resource' => 'setDimensionsResource',
        'area_resource' => 'setAreaResource',
        'booth_user_fields' => 'setBoothUserFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization_code' => 'getOrganizationCode',
        'sequence_number' => 'getSequenceNumber',
        'booth' => 'getBooth',
        'banner_name' => 'getBannerName',
        'rank' => 'getRank',
        'booth_status' => 'getBoothStatus',
        'event' => 'getEvent',
        'function' => 'getFunction',
        'gross_area' => 'getGrossArea',
        'unit_of_measure' => 'getUnitOfMeasure',
        'column_a' => 'getColumnA',
        'column_b' => 'getColumnB',
        'open_sides' => 'getOpenSides',
        'account' => 'getAccount',
        'column_c' => 'getColumnC',
        'color' => 'getColor',
        'changed_on' => 'getChangedOn',
        'changed_by' => 'getChangedBy',
        'bold' => 'getBold',
        'italicize' => 'getItalicize',
        'entered_on' => 'getEnteredOn',
        'entered_by' => 'getEnteredBy',
        'underline' => 'getUnderline',
        'length' => 'getLength',
        'width' => 'getWidth',
        'capacity_um' => 'getCapacityUm',
        'capacity_units' => 'getCapacityUnits',
        'drawing' => 'getDrawing',
        'net_area' => 'getNetArea',
        'note' => 'getNote',
        'show_banner' => 'getShowBanner',
        'show_booth_code' => 'getShowBoothCode',
        'order_number' => 'getOrderNumber',
        'alternate_banner_name1' => 'getAlternateBannerName1',
        'alternate_banner_name2' => 'getAlternateBannerName2',
        'font' => 'getFont',
        'open_sides_setting' => 'getOpenSidesSetting',
        'alternate_banner_name3' => 'getAlternateBannerName3',
        'alternate_banner_name4' => 'getAlternateBannerName4',
        'alternate_banner_name5' => 'getAlternateBannerName5',
        'order_length' => 'getOrderLength',
        'order_width' => 'getOrderWidth',
        'front_side_specification' => 'getFrontSideSpecification',
        'front_side_measurement' => 'getFrontSideMeasurement',
        'open_side_total' => 'getOpenSideTotal',
        'manual_open_sides_flag' => 'getManualOpenSidesFlag',
        'pavilion' => 'getPavilion',
        'section' => 'getSection',
        'open_sides_resource' => 'getOpenSidesResource',
        'dimensions_resource' => 'getDimensionsResource',
        'area_resource' => 'getAreaResource',
        'booth_user_fields' => 'getBoothUserFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization_code'] = isset($data['organization_code']) ? $data['organization_code'] : null;
        $this->container['sequence_number'] = isset($data['sequence_number']) ? $data['sequence_number'] : null;
        $this->container['booth'] = isset($data['booth']) ? $data['booth'] : null;
        $this->container['banner_name'] = isset($data['banner_name']) ? $data['banner_name'] : null;
        $this->container['rank'] = isset($data['rank']) ? $data['rank'] : null;
        $this->container['booth_status'] = isset($data['booth_status']) ? $data['booth_status'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['function'] = isset($data['function']) ? $data['function'] : null;
        $this->container['gross_area'] = isset($data['gross_area']) ? $data['gross_area'] : null;
        $this->container['unit_of_measure'] = isset($data['unit_of_measure']) ? $data['unit_of_measure'] : null;
        $this->container['column_a'] = isset($data['column_a']) ? $data['column_a'] : null;
        $this->container['column_b'] = isset($data['column_b']) ? $data['column_b'] : null;
        $this->container['open_sides'] = isset($data['open_sides']) ? $data['open_sides'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['column_c'] = isset($data['column_c']) ? $data['column_c'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['changed_on'] = isset($data['changed_on']) ? $data['changed_on'] : null;
        $this->container['changed_by'] = isset($data['changed_by']) ? $data['changed_by'] : null;
        $this->container['bold'] = isset($data['bold']) ? $data['bold'] : null;
        $this->container['italicize'] = isset($data['italicize']) ? $data['italicize'] : null;
        $this->container['entered_on'] = isset($data['entered_on']) ? $data['entered_on'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['underline'] = isset($data['underline']) ? $data['underline'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['capacity_um'] = isset($data['capacity_um']) ? $data['capacity_um'] : null;
        $this->container['capacity_units'] = isset($data['capacity_units']) ? $data['capacity_units'] : null;
        $this->container['drawing'] = isset($data['drawing']) ? $data['drawing'] : null;
        $this->container['net_area'] = isset($data['net_area']) ? $data['net_area'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['show_banner'] = isset($data['show_banner']) ? $data['show_banner'] : null;
        $this->container['show_booth_code'] = isset($data['show_booth_code']) ? $data['show_booth_code'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['alternate_banner_name1'] = isset($data['alternate_banner_name1']) ? $data['alternate_banner_name1'] : null;
        $this->container['alternate_banner_name2'] = isset($data['alternate_banner_name2']) ? $data['alternate_banner_name2'] : null;
        $this->container['font'] = isset($data['font']) ? $data['font'] : null;
        $this->container['open_sides_setting'] = isset($data['open_sides_setting']) ? $data['open_sides_setting'] : null;
        $this->container['alternate_banner_name3'] = isset($data['alternate_banner_name3']) ? $data['alternate_banner_name3'] : null;
        $this->container['alternate_banner_name4'] = isset($data['alternate_banner_name4']) ? $data['alternate_banner_name4'] : null;
        $this->container['alternate_banner_name5'] = isset($data['alternate_banner_name5']) ? $data['alternate_banner_name5'] : null;
        $this->container['order_length'] = isset($data['order_length']) ? $data['order_length'] : null;
        $this->container['order_width'] = isset($data['order_width']) ? $data['order_width'] : null;
        $this->container['front_side_specification'] = isset($data['front_side_specification']) ? $data['front_side_specification'] : null;
        $this->container['front_side_measurement'] = isset($data['front_side_measurement']) ? $data['front_side_measurement'] : null;
        $this->container['open_side_total'] = isset($data['open_side_total']) ? $data['open_side_total'] : null;
        $this->container['manual_open_sides_flag'] = isset($data['manual_open_sides_flag']) ? $data['manual_open_sides_flag'] : null;
        $this->container['pavilion'] = isset($data['pavilion']) ? $data['pavilion'] : null;
        $this->container['section'] = isset($data['section']) ? $data['section'] : null;
        $this->container['open_sides_resource'] = isset($data['open_sides_resource']) ? $data['open_sides_resource'] : null;
        $this->container['dimensions_resource'] = isset($data['dimensions_resource']) ? $data['dimensions_resource'] : null;
        $this->container['area_resource'] = isset($data['area_resource']) ? $data['area_resource'] : null;
        $this->container['booth_user_fields'] = isset($data['booth_user_fields']) ? $data['booth_user_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['organization_code'] === null) {
            $invalidProperties[] = "'organization_code' can't be null";
        }
        if ($this->container['sequence_number'] === null) {
            $invalidProperties[] = "'sequence_number' can't be null";
        }
        if ($this->container['booth'] === null) {
            $invalidProperties[] = "'booth' can't be null";
        }
        if ($this->container['banner_name'] === null) {
            $invalidProperties[] = "'banner_name' can't be null";
        }
        if ($this->container['rank'] === null) {
            $invalidProperties[] = "'rank' can't be null";
        }
        if ($this->container['booth_status'] === null) {
            $invalidProperties[] = "'booth_status' can't be null";
        }
        if ($this->container['event'] === null) {
            $invalidProperties[] = "'event' can't be null";
        }
        if ($this->container['function'] === null) {
            $invalidProperties[] = "'function' can't be null";
        }
        if ($this->container['gross_area'] === null) {
            $invalidProperties[] = "'gross_area' can't be null";
        }
        if ($this->container['unit_of_measure'] === null) {
            $invalidProperties[] = "'unit_of_measure' can't be null";
        }
        if ($this->container['column_a'] === null) {
            $invalidProperties[] = "'column_a' can't be null";
        }
        if ($this->container['column_b'] === null) {
            $invalidProperties[] = "'column_b' can't be null";
        }
        if ($this->container['open_sides'] === null) {
            $invalidProperties[] = "'open_sides' can't be null";
        }
        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        if ($this->container['column_c'] === null) {
            $invalidProperties[] = "'column_c' can't be null";
        }
        if ($this->container['color'] === null) {
            $invalidProperties[] = "'color' can't be null";
        }
        if ($this->container['changed_on'] === null) {
            $invalidProperties[] = "'changed_on' can't be null";
        }
        if ($this->container['changed_by'] === null) {
            $invalidProperties[] = "'changed_by' can't be null";
        }
        if ($this->container['bold'] === null) {
            $invalidProperties[] = "'bold' can't be null";
        }
        if ($this->container['italicize'] === null) {
            $invalidProperties[] = "'italicize' can't be null";
        }
        if ($this->container['entered_on'] === null) {
            $invalidProperties[] = "'entered_on' can't be null";
        }
        if ($this->container['entered_by'] === null) {
            $invalidProperties[] = "'entered_by' can't be null";
        }
        if ($this->container['underline'] === null) {
            $invalidProperties[] = "'underline' can't be null";
        }
        if ($this->container['length'] === null) {
            $invalidProperties[] = "'length' can't be null";
        }
        if ($this->container['width'] === null) {
            $invalidProperties[] = "'width' can't be null";
        }
        if ($this->container['capacity_um'] === null) {
            $invalidProperties[] = "'capacity_um' can't be null";
        }
        if ($this->container['capacity_units'] === null) {
            $invalidProperties[] = "'capacity_units' can't be null";
        }
        if ($this->container['drawing'] === null) {
            $invalidProperties[] = "'drawing' can't be null";
        }
        if ($this->container['net_area'] === null) {
            $invalidProperties[] = "'net_area' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalidProperties[] = "'note' can't be null";
        }
        if ($this->container['show_banner'] === null) {
            $invalidProperties[] = "'show_banner' can't be null";
        }
        if ($this->container['show_booth_code'] === null) {
            $invalidProperties[] = "'show_booth_code' can't be null";
        }
        if ($this->container['order_number'] === null) {
            $invalidProperties[] = "'order_number' can't be null";
        }
        if ($this->container['alternate_banner_name1'] === null) {
            $invalidProperties[] = "'alternate_banner_name1' can't be null";
        }
        if ($this->container['alternate_banner_name2'] === null) {
            $invalidProperties[] = "'alternate_banner_name2' can't be null";
        }
        if ($this->container['font'] === null) {
            $invalidProperties[] = "'font' can't be null";
        }
        if ($this->container['open_sides_setting'] === null) {
            $invalidProperties[] = "'open_sides_setting' can't be null";
        }
        if ($this->container['alternate_banner_name3'] === null) {
            $invalidProperties[] = "'alternate_banner_name3' can't be null";
        }
        if ($this->container['alternate_banner_name4'] === null) {
            $invalidProperties[] = "'alternate_banner_name4' can't be null";
        }
        if ($this->container['alternate_banner_name5'] === null) {
            $invalidProperties[] = "'alternate_banner_name5' can't be null";
        }
        if ($this->container['order_length'] === null) {
            $invalidProperties[] = "'order_length' can't be null";
        }
        if ($this->container['order_width'] === null) {
            $invalidProperties[] = "'order_width' can't be null";
        }
        if ($this->container['front_side_specification'] === null) {
            $invalidProperties[] = "'front_side_specification' can't be null";
        }
        if ($this->container['front_side_measurement'] === null) {
            $invalidProperties[] = "'front_side_measurement' can't be null";
        }
        if ($this->container['open_side_total'] === null) {
            $invalidProperties[] = "'open_side_total' can't be null";
        }
        if ($this->container['manual_open_sides_flag'] === null) {
            $invalidProperties[] = "'manual_open_sides_flag' can't be null";
        }
        if ($this->container['pavilion'] === null) {
            $invalidProperties[] = "'pavilion' can't be null";
        }
        if ($this->container['section'] === null) {
            $invalidProperties[] = "'section' can't be null";
        }
        if ($this->container['open_sides_resource'] === null) {
            $invalidProperties[] = "'open_sides_resource' can't be null";
        }
        if ($this->container['dimensions_resource'] === null) {
            $invalidProperties[] = "'dimensions_resource' can't be null";
        }
        if ($this->container['area_resource'] === null) {
            $invalidProperties[] = "'area_resource' can't be null";
        }
        if ($this->container['booth_user_fields'] === null) {
            $invalidProperties[] = "'booth_user_fields' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization_code
     *
     * @return string
     */
    public function getOrganizationCode()
    {
        return $this->container['organization_code'];
    }

    /**
     * Sets organization_code
     *
     * @param string $organization_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ORG_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrganizationCode($organization_code)
    {
        $this->container['organization_code'] = $organization_code;

        return $this;
    }

    /**
     * Gets sequence_number
     *
     * @return int
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param int $sequence_number <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_SEQ_NBR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSequenceNumber($sequence_number)
    {
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets booth
     *
     * @return string
     */
    public function getBooth()
    {
        return $this->container['booth'];
    }

    /**
     * Sets booth
     *
     * @param string $booth <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ASSIGN_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Add Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBooth($booth)
    {
        $this->container['booth'] = $booth;

        return $this;
    }

    /**
     * Gets banner_name
     *
     * @return string
     */
    public function getBannerName()
    {
        return $this->container['banner_name'];
    }

    /**
     * Sets banner_name
     *
     * @param string $banner_name <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ACCT_NAME  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 150  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBannerName($banner_name)
    {
        $this->container['banner_name'] = $banner_name;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return string
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param string $rank <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_RANK  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setRank($rank)
    {
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets booth_status
     *
     * @return string
     */
    public function getBoothStatus()
    {
        return $this->container['booth_status'];
    }

    /**
     * Sets booth_status
     *
     * @param string $booth_status <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ASSIGN_STS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBoothStatus($booth_status)
    {
        $this->container['booth_status'] = $booth_status;

        return $this;
    }

    /**
     * Gets event
     *
     * @return int
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param int $event <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_EVT_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Add Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets function
     *
     * @return int
     */
    public function getFunction()
    {
        return $this->container['function'];
    }

    /**
     * Sets function
     *
     * @param int $function <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_FUNC_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Add Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setFunction($function)
    {
        $this->container['function'] = $function;

        return $this;
    }

    /**
     * Gets gross_area
     *
     * @return double
     */
    public function getGrossArea()
    {
        return $this->container['gross_area'];
    }

    /**
     * Sets gross_area
     *
     * @param double $gross_area <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_SIZE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setGrossArea($gross_area)
    {
        $this->container['gross_area'] = $gross_area;

        return $this;
    }

    /**
     * Gets unit_of_measure
     *
     * @return string
     */
    public function getUnitOfMeasure()
    {
        return $this->container['unit_of_measure'];
    }

    /**
     * Sets unit_of_measure
     *
     * @param string $unit_of_measure <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_UOM  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 5  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUnitOfMeasure($unit_of_measure)
    {
        $this->container['unit_of_measure'] = $unit_of_measure;

        return $this;
    }

    /**
     * Gets column_a
     *
     * @return string
     */
    public function getColumnA()
    {
        return $this->container['column_a'];
    }

    /**
     * Sets column_a
     *
     * @param string $column_a <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_COL_A  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Add Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setColumnA($column_a)
    {
        $this->container['column_a'] = $column_a;

        return $this;
    }

    /**
     * Gets column_b
     *
     * @return string
     */
    public function getColumnB()
    {
        return $this->container['column_b'];
    }

    /**
     * Sets column_b
     *
     * @param string $column_b <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_COL_B  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Add Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setColumnB($column_b)
    {
        $this->container['column_b'] = $column_b;

        return $this;
    }

    /**
     * Gets open_sides
     *
     * @return int
     */
    public function getOpenSides()
    {
        return $this->container['open_sides'];
    }

    /**
     * Sets open_sides
     *
     * @param int $open_sides <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_OPEN_CRNR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOpenSides($open_sides)
    {
        $this->container['open_sides'] = $open_sides;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string $account <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ACCT_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 8  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets column_c
     *
     * @return string
     */
    public function getColumnC()
    {
        return $this->container['column_c'];
    }

    /**
     * Sets column_c
     *
     * @param string $column_c <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_COL_C  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Add Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setColumnC($column_c)
    {
        $this->container['column_c'] = $column_c;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_COLOR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets changed_on
     *
     * @return \DateTime
     */
    public function getChangedOn()
    {
        return $this->container['changed_on'];
    }

    /**
     * Sets changed_on
     *
     * @param \DateTime $changed_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_UPD_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedOn($changed_on)
    {
        $this->container['changed_on'] = $changed_on;

        return $this;
    }

    /**
     * Gets changed_by
     *
     * @return string
     */
    public function getChangedBy()
    {
        return $this->container['changed_by'];
    }

    /**
     * Sets changed_by
     *
     * @param string $changed_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_UPD_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedBy($changed_by)
    {
        $this->container['changed_by'] = $changed_by;

        return $this;
    }

    /**
     * Gets bold
     *
     * @return string
     */
    public function getBold()
    {
        return $this->container['bold'];
    }

    /**
     * Sets bold
     *
     * @param string $bold <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_BOLD  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBold($bold)
    {
        $this->container['bold'] = $bold;

        return $this;
    }

    /**
     * Gets italicize
     *
     * @return string
     */
    public function getItalicize()
    {
        return $this->container['italicize'];
    }

    /**
     * Sets italicize
     *
     * @param string $italicize <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ITALICS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setItalicize($italicize)
    {
        $this->container['italicize'] = $italicize;

        return $this;
    }

    /**
     * Gets entered_on
     *
     * @return \DateTime
     */
    public function getEnteredOn()
    {
        return $this->container['entered_on'];
    }

    /**
     * Sets entered_on
     *
     * @param \DateTime $entered_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ENT_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredOn($entered_on)
    {
        $this->container['entered_on'] = $entered_on;

        return $this;
    }

    /**
     * Gets entered_by
     *
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     *
     * @param string $entered_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ENT_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets underline
     *
     * @return string
     */
    public function getUnderline()
    {
        return $this->container['underline'];
    }

    /**
     * Sets underline
     *
     * @param string $underline <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_UNDERLINE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUnderline($underline)
    {
        $this->container['underline'] = $underline;

        return $this;
    }

    /**
     * Gets length
     *
     * @return double
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param double $length <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_LENGTH  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param double $width <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_WIDTH  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets capacity_um
     *
     * @return string
     */
    public function getCapacityUm()
    {
        return $this->container['capacity_um'];
    }

    /**
     * Sets capacity_um
     *
     * @param string $capacity_um <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_CAP_UOM  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 5  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCapacityUm($capacity_um)
    {
        $this->container['capacity_um'] = $capacity_um;

        return $this;
    }

    /**
     * Gets capacity_units
     *
     * @return double
     */
    public function getCapacityUnits()
    {
        return $this->container['capacity_units'];
    }

    /**
     * Sets capacity_units
     *
     * @param double $capacity_units <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_CAP_UNITS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCapacityUnits($capacity_units)
    {
        $this->container['capacity_units'] = $capacity_units;

        return $this;
    }

    /**
     * Gets drawing
     *
     * @return int
     */
    public function getDrawing()
    {
        return $this->container['drawing'];
    }

    /**
     * Sets drawing
     *
     * @param int $drawing <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_MAP_SEQ  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Add Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDrawing($drawing)
    {
        $this->container['drawing'] = $drawing;

        return $this;
    }

    /**
     * Gets net_area
     *
     * @return double
     */
    public function getNetArea()
    {
        return $this->container['net_area'];
    }

    /**
     * Sets net_area
     *
     * @param double $net_area <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_DISP_SIZE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setNetArea($net_area)
    {
        $this->container['net_area'] = $net_area;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_NOTE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 150  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets show_banner
     *
     * @return string
     */
    public function getShowBanner()
    {
        return $this->container['show_banner'];
    }

    /**
     * Sets show_banner
     *
     * @param string $show_banner <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_SHOW_BANNER  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setShowBanner($show_banner)
    {
        $this->container['show_banner'] = $show_banner;

        return $this;
    }

    /**
     * Gets show_booth_code
     *
     * @return string
     */
    public function getShowBoothCode()
    {
        return $this->container['show_booth_code'];
    }

    /**
     * Sets show_booth_code
     *
     * @param string $show_booth_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_SHOW_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setShowBoothCode($show_booth_code)
    {
        $this->container['show_booth_code'] = $show_booth_code;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return int
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param int $order_number <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ORD_NBR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets alternate_banner_name1
     *
     * @return string
     */
    public function getAlternateBannerName1()
    {
        return $this->container['alternate_banner_name1'];
    }

    /**
     * Sets alternate_banner_name1
     *
     * @param string $alternate_banner_name1 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ALT_ASSIGN_NAME_1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 150  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateBannerName1($alternate_banner_name1)
    {
        $this->container['alternate_banner_name1'] = $alternate_banner_name1;

        return $this;
    }

    /**
     * Gets alternate_banner_name2
     *
     * @return string
     */
    public function getAlternateBannerName2()
    {
        return $this->container['alternate_banner_name2'];
    }

    /**
     * Sets alternate_banner_name2
     *
     * @param string $alternate_banner_name2 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ALT_ASSIGN_NAME_2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 150  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateBannerName2($alternate_banner_name2)
    {
        $this->container['alternate_banner_name2'] = $alternate_banner_name2;

        return $this;
    }

    /**
     * Gets font
     *
     * @return string
     */
    public function getFont()
    {
        return $this->container['font'];
    }

    /**
     * Sets font
     *
     * @param string $font <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_FONT_FAMILY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 50  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setFont($font)
    {
        $this->container['font'] = $font;

        return $this;
    }

    /**
     * Gets open_sides_setting
     *
     * @return string
     */
    public function getOpenSidesSetting()
    {
        return $this->container['open_sides_setting'];
    }

    /**
     * Sets open_sides_setting
     *
     * @param string $open_sides_setting <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_OPEN_SIDES_OVER  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOpenSidesSetting($open_sides_setting)
    {
        $this->container['open_sides_setting'] = $open_sides_setting;

        return $this;
    }

    /**
     * Gets alternate_banner_name3
     *
     * @return string
     */
    public function getAlternateBannerName3()
    {
        return $this->container['alternate_banner_name3'];
    }

    /**
     * Sets alternate_banner_name3
     *
     * @param string $alternate_banner_name3 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ALT_ASSIGN_NAME_3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 150  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateBannerName3($alternate_banner_name3)
    {
        $this->container['alternate_banner_name3'] = $alternate_banner_name3;

        return $this;
    }

    /**
     * Gets alternate_banner_name4
     *
     * @return string
     */
    public function getAlternateBannerName4()
    {
        return $this->container['alternate_banner_name4'];
    }

    /**
     * Sets alternate_banner_name4
     *
     * @param string $alternate_banner_name4 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ALT_ASSIGN_NAME_4  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 150  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateBannerName4($alternate_banner_name4)
    {
        $this->container['alternate_banner_name4'] = $alternate_banner_name4;

        return $this;
    }

    /**
     * Gets alternate_banner_name5
     *
     * @return string
     */
    public function getAlternateBannerName5()
    {
        return $this->container['alternate_banner_name5'];
    }

    /**
     * Sets alternate_banner_name5
     *
     * @param string $alternate_banner_name5 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_ALT_ASSIGN_NAME_5  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 150  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAlternateBannerName5($alternate_banner_name5)
    {
        $this->container['alternate_banner_name5'] = $alternate_banner_name5;

        return $this;
    }

    /**
     * Gets order_length
     *
     * @return double
     */
    public function getOrderLength()
    {
        return $this->container['order_length'];
    }

    /**
     * Sets order_length
     *
     * @param double $order_length <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_NET_LENGTH  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrderLength($order_length)
    {
        $this->container['order_length'] = $order_length;

        return $this;
    }

    /**
     * Gets order_width
     *
     * @return double
     */
    public function getOrderWidth()
    {
        return $this->container['order_width'];
    }

    /**
     * Sets order_width
     *
     * @param double $order_width <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_NET_WIDTH  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrderWidth($order_width)
    {
        $this->container['order_width'] = $order_width;

        return $this;
    }

    /**
     * Gets front_side_specification
     *
     * @return string
     */
    public function getFrontSideSpecification()
    {
        return $this->container['front_side_specification'];
    }

    /**
     * Sets front_side_specification
     *
     * @param string $front_side_specification <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_FRONT_SPEC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setFrontSideSpecification($front_side_specification)
    {
        $this->container['front_side_specification'] = $front_side_specification;

        return $this;
    }

    /**
     * Gets front_side_measurement
     *
     * @return double
     */
    public function getFrontSideMeasurement()
    {
        return $this->container['front_side_measurement'];
    }

    /**
     * Sets front_side_measurement
     *
     * @param double $front_side_measurement <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_FRONT_MEAS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setFrontSideMeasurement($front_side_measurement)
    {
        $this->container['front_side_measurement'] = $front_side_measurement;

        return $this;
    }

    /**
     * Gets open_side_total
     *
     * @return double
     */
    public function getOpenSideTotal()
    {
        return $this->container['open_side_total'];
    }

    /**
     * Sets open_side_total
     *
     * @param double $open_side_total <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_OPEN_SIDES_TOT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOpenSideTotal($open_side_total)
    {
        $this->container['open_side_total'] = $open_side_total;

        return $this;
    }

    /**
     * Gets manual_open_sides_flag
     *
     * @return string
     */
    public function getManualOpenSidesFlag()
    {
        return $this->container['manual_open_sides_flag'];
    }

    /**
     * Sets manual_open_sides_flag
     *
     * @param string $manual_open_sides_flag <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_SELECT_ON_BOOTH  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setManualOpenSidesFlag($manual_open_sides_flag)
    {
        $this->container['manual_open_sides_flag'] = $manual_open_sides_flag;

        return $this;
    }

    /**
     * Gets pavilion
     *
     * @return int
     */
    public function getPavilion()
    {
        return $this->container['pavilion'];
    }

    /**
     * Sets pavilion
     *
     * @param int $pavilion <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_PAVILION_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPavilion($pavilion)
    {
        $this->container['pavilion'] = $pavilion;

        return $this;
    }

    /**
     * Gets section
     *
     * @return int
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param int $section <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_SECTION_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSection($section)
    {
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets open_sides_resource
     *
     * @return int
     */
    public function getOpenSidesResource()
    {
        return $this->container['open_sides_resource'];
    }

    /**
     * Sets open_sides_resource
     *
     * @param int $open_sides_resource <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_OPENSIDE_PL_DTL_SEQ  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOpenSidesResource($open_sides_resource)
    {
        $this->container['open_sides_resource'] = $open_sides_resource;

        return $this;
    }

    /**
     * Gets dimensions_resource
     *
     * @return int
     */
    public function getDimensionsResource()
    {
        return $this->container['dimensions_resource'];
    }

    /**
     * Sets dimensions_resource
     *
     * @param int $dimensions_resource <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_DIM_PL_DTL_SEQ  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDimensionsResource($dimensions_resource)
    {
        $this->container['dimensions_resource'] = $dimensions_resource;

        return $this;
    }

    /**
     * Gets area_resource
     *
     * @return int
     */
    public function getAreaResource()
    {
        return $this->container['area_resource'];
    }

    /**
     * Sets area_resource
     *
     * @param int $area_resource <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC385_AREA_PL_DTL_SEQ  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAreaResource($area_resource)
    {
        $this->container['area_resource'] = $area_resource;

        return $this;
    }

    /**
     * Gets booth_user_fields
     *
     * @return \FomF\Ungerboeck\Client\Model\UserFields
     */
    public function getBoothUserFields()
    {
        return $this->container['booth_user_fields'];
    }

    /**
     * Sets booth_user_fields
     *
     * @param \FomF\Ungerboeck\Client\Model\UserFields $booth_user_fields <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">API Help:</span> This holds the list of booth user field values. This is not filled on searches unless explicitly requested in the SELECT OData query.  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Database column:</span> CC382_ASSIGN_USER_FLDS Table</span></div>
     *
     * @return $this
     */
    public function setBoothUserFields($booth_user_fields)
    {
        $this->container['booth_user_fields'] = $booth_user_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


