<?php
/**
 * InventoryBalancesModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * InventoryBalancesModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryBalancesModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryBalancesModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization_code' => 'string',
        'item' => 'string',
        'lot_serial_number' => 'string',
        'location' => 'string',
        'fiscal_year' => 'int',
        'fiscal_period' => 'int',
        'begin_balance' => 'double',
        'quantity_received' => 'double',
        'quantity_issued' => 'double',
        'quantity_adjustment' => 'double',
        'transfer_in' => 'double',
        'transfer_out' => 'double',
        'quantity_required' => 'double',
        'quantity_available' => 'double',
        'beginning_amount' => 'double',
        'amount_received' => 'double',
        'amount_issued' => 'double',
        'amount_adjusted' => 'double',
        'amount_purchased' => 'double',
        'amount_transferred_in' => 'double',
        'amount_transferred_out' => 'double',
        'entered_on' => '\DateTime',
        'changed_on' => '\DateTime',
        'entered_by' => 'string',
        'changed_by' => 'string',
        'average_cost' => 'double',
        'quantity_returned' => 'double',
        'quantity_rented' => 'double',
        'equipment_units_available' => 'double',
        'end_balance' => 'double',
        'perpetual_amount' => 'double',
        'quantity_restocked' => 'double',
        'amount_returned' => 'double',
        'amount_restocked' => 'double',
        'quantity_rented_restock' => 'double',
        'units_acquired' => 'double',
        'amount_acquired' => 'double',
        'valuation_units' => 'double',
        'valuation_amount' => 'double',
        'valuation_average_cost' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization_code' => null,
        'item' => null,
        'lot_serial_number' => null,
        'location' => null,
        'fiscal_year' => 'int32',
        'fiscal_period' => 'int32',
        'begin_balance' => 'double',
        'quantity_received' => 'double',
        'quantity_issued' => 'double',
        'quantity_adjustment' => 'double',
        'transfer_in' => 'double',
        'transfer_out' => 'double',
        'quantity_required' => 'double',
        'quantity_available' => 'double',
        'beginning_amount' => 'double',
        'amount_received' => 'double',
        'amount_issued' => 'double',
        'amount_adjusted' => 'double',
        'amount_purchased' => 'double',
        'amount_transferred_in' => 'double',
        'amount_transferred_out' => 'double',
        'entered_on' => 'date-time',
        'changed_on' => 'date-time',
        'entered_by' => null,
        'changed_by' => null,
        'average_cost' => 'double',
        'quantity_returned' => 'double',
        'quantity_rented' => 'double',
        'equipment_units_available' => 'double',
        'end_balance' => 'double',
        'perpetual_amount' => 'double',
        'quantity_restocked' => 'double',
        'amount_returned' => 'double',
        'amount_restocked' => 'double',
        'quantity_rented_restock' => 'double',
        'units_acquired' => 'double',
        'amount_acquired' => 'double',
        'valuation_units' => 'double',
        'valuation_amount' => 'double',
        'valuation_average_cost' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization_code' => 'OrganizationCode',
        'item' => 'Item',
        'lot_serial_number' => 'LotSerialNumber',
        'location' => 'Location',
        'fiscal_year' => 'FiscalYear',
        'fiscal_period' => 'FiscalPeriod',
        'begin_balance' => 'BeginBalance',
        'quantity_received' => 'QuantityReceived',
        'quantity_issued' => 'QuantityIssued',
        'quantity_adjustment' => 'QuantityAdjustment',
        'transfer_in' => 'TransferIn',
        'transfer_out' => 'TransferOut',
        'quantity_required' => 'QuantityRequired',
        'quantity_available' => 'QuantityAvailable',
        'beginning_amount' => 'BeginningAmount',
        'amount_received' => 'AmountReceived',
        'amount_issued' => 'AmountIssued',
        'amount_adjusted' => 'AmountAdjusted',
        'amount_purchased' => 'AmountPurchased',
        'amount_transferred_in' => 'AmountTransferredIn',
        'amount_transferred_out' => 'AmountTransferredOut',
        'entered_on' => 'EnteredOn',
        'changed_on' => 'ChangedOn',
        'entered_by' => 'EnteredBy',
        'changed_by' => 'ChangedBy',
        'average_cost' => 'AverageCost',
        'quantity_returned' => 'QuantityReturned',
        'quantity_rented' => 'QuantityRented',
        'equipment_units_available' => 'EquipmentUnitsAvailable',
        'end_balance' => 'EndBalance',
        'perpetual_amount' => 'PerpetualAmount',
        'quantity_restocked' => 'QuantityRestocked',
        'amount_returned' => 'AmountReturned',
        'amount_restocked' => 'AmountRestocked',
        'quantity_rented_restock' => 'QuantityRentedRestock',
        'units_acquired' => 'UnitsAcquired',
        'amount_acquired' => 'AmountAcquired',
        'valuation_units' => 'ValuationUnits',
        'valuation_amount' => 'ValuationAmount',
        'valuation_average_cost' => 'ValuationAverageCost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization_code' => 'setOrganizationCode',
        'item' => 'setItem',
        'lot_serial_number' => 'setLotSerialNumber',
        'location' => 'setLocation',
        'fiscal_year' => 'setFiscalYear',
        'fiscal_period' => 'setFiscalPeriod',
        'begin_balance' => 'setBeginBalance',
        'quantity_received' => 'setQuantityReceived',
        'quantity_issued' => 'setQuantityIssued',
        'quantity_adjustment' => 'setQuantityAdjustment',
        'transfer_in' => 'setTransferIn',
        'transfer_out' => 'setTransferOut',
        'quantity_required' => 'setQuantityRequired',
        'quantity_available' => 'setQuantityAvailable',
        'beginning_amount' => 'setBeginningAmount',
        'amount_received' => 'setAmountReceived',
        'amount_issued' => 'setAmountIssued',
        'amount_adjusted' => 'setAmountAdjusted',
        'amount_purchased' => 'setAmountPurchased',
        'amount_transferred_in' => 'setAmountTransferredIn',
        'amount_transferred_out' => 'setAmountTransferredOut',
        'entered_on' => 'setEnteredOn',
        'changed_on' => 'setChangedOn',
        'entered_by' => 'setEnteredBy',
        'changed_by' => 'setChangedBy',
        'average_cost' => 'setAverageCost',
        'quantity_returned' => 'setQuantityReturned',
        'quantity_rented' => 'setQuantityRented',
        'equipment_units_available' => 'setEquipmentUnitsAvailable',
        'end_balance' => 'setEndBalance',
        'perpetual_amount' => 'setPerpetualAmount',
        'quantity_restocked' => 'setQuantityRestocked',
        'amount_returned' => 'setAmountReturned',
        'amount_restocked' => 'setAmountRestocked',
        'quantity_rented_restock' => 'setQuantityRentedRestock',
        'units_acquired' => 'setUnitsAcquired',
        'amount_acquired' => 'setAmountAcquired',
        'valuation_units' => 'setValuationUnits',
        'valuation_amount' => 'setValuationAmount',
        'valuation_average_cost' => 'setValuationAverageCost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization_code' => 'getOrganizationCode',
        'item' => 'getItem',
        'lot_serial_number' => 'getLotSerialNumber',
        'location' => 'getLocation',
        'fiscal_year' => 'getFiscalYear',
        'fiscal_period' => 'getFiscalPeriod',
        'begin_balance' => 'getBeginBalance',
        'quantity_received' => 'getQuantityReceived',
        'quantity_issued' => 'getQuantityIssued',
        'quantity_adjustment' => 'getQuantityAdjustment',
        'transfer_in' => 'getTransferIn',
        'transfer_out' => 'getTransferOut',
        'quantity_required' => 'getQuantityRequired',
        'quantity_available' => 'getQuantityAvailable',
        'beginning_amount' => 'getBeginningAmount',
        'amount_received' => 'getAmountReceived',
        'amount_issued' => 'getAmountIssued',
        'amount_adjusted' => 'getAmountAdjusted',
        'amount_purchased' => 'getAmountPurchased',
        'amount_transferred_in' => 'getAmountTransferredIn',
        'amount_transferred_out' => 'getAmountTransferredOut',
        'entered_on' => 'getEnteredOn',
        'changed_on' => 'getChangedOn',
        'entered_by' => 'getEnteredBy',
        'changed_by' => 'getChangedBy',
        'average_cost' => 'getAverageCost',
        'quantity_returned' => 'getQuantityReturned',
        'quantity_rented' => 'getQuantityRented',
        'equipment_units_available' => 'getEquipmentUnitsAvailable',
        'end_balance' => 'getEndBalance',
        'perpetual_amount' => 'getPerpetualAmount',
        'quantity_restocked' => 'getQuantityRestocked',
        'amount_returned' => 'getAmountReturned',
        'amount_restocked' => 'getAmountRestocked',
        'quantity_rented_restock' => 'getQuantityRentedRestock',
        'units_acquired' => 'getUnitsAcquired',
        'amount_acquired' => 'getAmountAcquired',
        'valuation_units' => 'getValuationUnits',
        'valuation_amount' => 'getValuationAmount',
        'valuation_average_cost' => 'getValuationAverageCost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization_code'] = isset($data['organization_code']) ? $data['organization_code'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['lot_serial_number'] = isset($data['lot_serial_number']) ? $data['lot_serial_number'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['fiscal_year'] = isset($data['fiscal_year']) ? $data['fiscal_year'] : null;
        $this->container['fiscal_period'] = isset($data['fiscal_period']) ? $data['fiscal_period'] : null;
        $this->container['begin_balance'] = isset($data['begin_balance']) ? $data['begin_balance'] : null;
        $this->container['quantity_received'] = isset($data['quantity_received']) ? $data['quantity_received'] : null;
        $this->container['quantity_issued'] = isset($data['quantity_issued']) ? $data['quantity_issued'] : null;
        $this->container['quantity_adjustment'] = isset($data['quantity_adjustment']) ? $data['quantity_adjustment'] : null;
        $this->container['transfer_in'] = isset($data['transfer_in']) ? $data['transfer_in'] : null;
        $this->container['transfer_out'] = isset($data['transfer_out']) ? $data['transfer_out'] : null;
        $this->container['quantity_required'] = isset($data['quantity_required']) ? $data['quantity_required'] : null;
        $this->container['quantity_available'] = isset($data['quantity_available']) ? $data['quantity_available'] : null;
        $this->container['beginning_amount'] = isset($data['beginning_amount']) ? $data['beginning_amount'] : null;
        $this->container['amount_received'] = isset($data['amount_received']) ? $data['amount_received'] : null;
        $this->container['amount_issued'] = isset($data['amount_issued']) ? $data['amount_issued'] : null;
        $this->container['amount_adjusted'] = isset($data['amount_adjusted']) ? $data['amount_adjusted'] : null;
        $this->container['amount_purchased'] = isset($data['amount_purchased']) ? $data['amount_purchased'] : null;
        $this->container['amount_transferred_in'] = isset($data['amount_transferred_in']) ? $data['amount_transferred_in'] : null;
        $this->container['amount_transferred_out'] = isset($data['amount_transferred_out']) ? $data['amount_transferred_out'] : null;
        $this->container['entered_on'] = isset($data['entered_on']) ? $data['entered_on'] : null;
        $this->container['changed_on'] = isset($data['changed_on']) ? $data['changed_on'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['changed_by'] = isset($data['changed_by']) ? $data['changed_by'] : null;
        $this->container['average_cost'] = isset($data['average_cost']) ? $data['average_cost'] : null;
        $this->container['quantity_returned'] = isset($data['quantity_returned']) ? $data['quantity_returned'] : null;
        $this->container['quantity_rented'] = isset($data['quantity_rented']) ? $data['quantity_rented'] : null;
        $this->container['equipment_units_available'] = isset($data['equipment_units_available']) ? $data['equipment_units_available'] : null;
        $this->container['end_balance'] = isset($data['end_balance']) ? $data['end_balance'] : null;
        $this->container['perpetual_amount'] = isset($data['perpetual_amount']) ? $data['perpetual_amount'] : null;
        $this->container['quantity_restocked'] = isset($data['quantity_restocked']) ? $data['quantity_restocked'] : null;
        $this->container['amount_returned'] = isset($data['amount_returned']) ? $data['amount_returned'] : null;
        $this->container['amount_restocked'] = isset($data['amount_restocked']) ? $data['amount_restocked'] : null;
        $this->container['quantity_rented_restock'] = isset($data['quantity_rented_restock']) ? $data['quantity_rented_restock'] : null;
        $this->container['units_acquired'] = isset($data['units_acquired']) ? $data['units_acquired'] : null;
        $this->container['amount_acquired'] = isset($data['amount_acquired']) ? $data['amount_acquired'] : null;
        $this->container['valuation_units'] = isset($data['valuation_units']) ? $data['valuation_units'] : null;
        $this->container['valuation_amount'] = isset($data['valuation_amount']) ? $data['valuation_amount'] : null;
        $this->container['valuation_average_cost'] = isset($data['valuation_average_cost']) ? $data['valuation_average_cost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['organization_code'] === null) {
            $invalidProperties[] = "'organization_code' can't be null";
        }
        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        if ($this->container['lot_serial_number'] === null) {
            $invalidProperties[] = "'lot_serial_number' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['fiscal_year'] === null) {
            $invalidProperties[] = "'fiscal_year' can't be null";
        }
        if ($this->container['fiscal_period'] === null) {
            $invalidProperties[] = "'fiscal_period' can't be null";
        }
        if ($this->container['begin_balance'] === null) {
            $invalidProperties[] = "'begin_balance' can't be null";
        }
        if ($this->container['quantity_received'] === null) {
            $invalidProperties[] = "'quantity_received' can't be null";
        }
        if ($this->container['quantity_issued'] === null) {
            $invalidProperties[] = "'quantity_issued' can't be null";
        }
        if ($this->container['quantity_adjustment'] === null) {
            $invalidProperties[] = "'quantity_adjustment' can't be null";
        }
        if ($this->container['transfer_in'] === null) {
            $invalidProperties[] = "'transfer_in' can't be null";
        }
        if ($this->container['transfer_out'] === null) {
            $invalidProperties[] = "'transfer_out' can't be null";
        }
        if ($this->container['quantity_required'] === null) {
            $invalidProperties[] = "'quantity_required' can't be null";
        }
        if ($this->container['quantity_available'] === null) {
            $invalidProperties[] = "'quantity_available' can't be null";
        }
        if ($this->container['beginning_amount'] === null) {
            $invalidProperties[] = "'beginning_amount' can't be null";
        }
        if ($this->container['amount_received'] === null) {
            $invalidProperties[] = "'amount_received' can't be null";
        }
        if ($this->container['amount_issued'] === null) {
            $invalidProperties[] = "'amount_issued' can't be null";
        }
        if ($this->container['amount_adjusted'] === null) {
            $invalidProperties[] = "'amount_adjusted' can't be null";
        }
        if ($this->container['amount_purchased'] === null) {
            $invalidProperties[] = "'amount_purchased' can't be null";
        }
        if ($this->container['amount_transferred_in'] === null) {
            $invalidProperties[] = "'amount_transferred_in' can't be null";
        }
        if ($this->container['amount_transferred_out'] === null) {
            $invalidProperties[] = "'amount_transferred_out' can't be null";
        }
        if ($this->container['entered_on'] === null) {
            $invalidProperties[] = "'entered_on' can't be null";
        }
        if ($this->container['changed_on'] === null) {
            $invalidProperties[] = "'changed_on' can't be null";
        }
        if ($this->container['entered_by'] === null) {
            $invalidProperties[] = "'entered_by' can't be null";
        }
        if ($this->container['changed_by'] === null) {
            $invalidProperties[] = "'changed_by' can't be null";
        }
        if ($this->container['average_cost'] === null) {
            $invalidProperties[] = "'average_cost' can't be null";
        }
        if ($this->container['quantity_returned'] === null) {
            $invalidProperties[] = "'quantity_returned' can't be null";
        }
        if ($this->container['quantity_rented'] === null) {
            $invalidProperties[] = "'quantity_rented' can't be null";
        }
        if ($this->container['equipment_units_available'] === null) {
            $invalidProperties[] = "'equipment_units_available' can't be null";
        }
        if ($this->container['end_balance'] === null) {
            $invalidProperties[] = "'end_balance' can't be null";
        }
        if ($this->container['perpetual_amount'] === null) {
            $invalidProperties[] = "'perpetual_amount' can't be null";
        }
        if ($this->container['quantity_restocked'] === null) {
            $invalidProperties[] = "'quantity_restocked' can't be null";
        }
        if ($this->container['amount_returned'] === null) {
            $invalidProperties[] = "'amount_returned' can't be null";
        }
        if ($this->container['amount_restocked'] === null) {
            $invalidProperties[] = "'amount_restocked' can't be null";
        }
        if ($this->container['quantity_rented_restock'] === null) {
            $invalidProperties[] = "'quantity_rented_restock' can't be null";
        }
        if ($this->container['units_acquired'] === null) {
            $invalidProperties[] = "'units_acquired' can't be null";
        }
        if ($this->container['amount_acquired'] === null) {
            $invalidProperties[] = "'amount_acquired' can't be null";
        }
        if ($this->container['valuation_units'] === null) {
            $invalidProperties[] = "'valuation_units' can't be null";
        }
        if ($this->container['valuation_amount'] === null) {
            $invalidProperties[] = "'valuation_amount' can't be null";
        }
        if ($this->container['valuation_average_cost'] === null) {
            $invalidProperties[] = "'valuation_average_cost' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization_code
     *
     * @return string
     */
    public function getOrganizationCode()
    {
        return $this->container['organization_code'];
    }

    /**
     * Sets organization_code
     *
     * @param string $organization_code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_ORG_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrganizationCode($organization_code)
    {
        $this->container['organization_code'] = $organization_code;

        return $this;
    }

    /**
     * Gets item
     *
     * @return string
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param string $item <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_INV_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 12  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets lot_serial_number
     *
     * @return string
     */
    public function getLotSerialNumber()
    {
        return $this->container['lot_serial_number'];
    }

    /**
     * Sets lot_serial_number
     *
     * @param string $lot_serial_number <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_LOT_SERIAL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 50  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLotSerialNumber($lot_serial_number)
    {
        $this->container['lot_serial_number'] = $lot_serial_number;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_SPACE_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets fiscal_year
     *
     * @return int
     */
    public function getFiscalYear()
    {
        return $this->container['fiscal_year'];
    }

    /**
     * Sets fiscal_year
     *
     * @param int $fiscal_year <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_FISCAL_YR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setFiscalYear($fiscal_year)
    {
        $this->container['fiscal_year'] = $fiscal_year;

        return $this;
    }

    /**
     * Gets fiscal_period
     *
     * @return int
     */
    public function getFiscalPeriod()
    {
        return $this->container['fiscal_period'];
    }

    /**
     * Sets fiscal_period
     *
     * @param int $fiscal_period <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_FISCAL_PERIOD  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setFiscalPeriod($fiscal_period)
    {
        $this->container['fiscal_period'] = $fiscal_period;

        return $this;
    }

    /**
     * Gets begin_balance
     *
     * @return double
     */
    public function getBeginBalance()
    {
        return $this->container['begin_balance'];
    }

    /**
     * Sets begin_balance
     *
     * @param double $begin_balance <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_BEG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBeginBalance($begin_balance)
    {
        $this->container['begin_balance'] = $begin_balance;

        return $this;
    }

    /**
     * Gets quantity_received
     *
     * @return double
     */
    public function getQuantityReceived()
    {
        return $this->container['quantity_received'];
    }

    /**
     * Sets quantity_received
     *
     * @param double $quantity_received <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_REC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setQuantityReceived($quantity_received)
    {
        $this->container['quantity_received'] = $quantity_received;

        return $this;
    }

    /**
     * Gets quantity_issued
     *
     * @return double
     */
    public function getQuantityIssued()
    {
        return $this->container['quantity_issued'];
    }

    /**
     * Sets quantity_issued
     *
     * @param double $quantity_issued <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_ISSUED  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setQuantityIssued($quantity_issued)
    {
        $this->container['quantity_issued'] = $quantity_issued;

        return $this;
    }

    /**
     * Gets quantity_adjustment
     *
     * @return double
     */
    public function getQuantityAdjustment()
    {
        return $this->container['quantity_adjustment'];
    }

    /**
     * Sets quantity_adjustment
     *
     * @param double $quantity_adjustment <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_ADJ  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setQuantityAdjustment($quantity_adjustment)
    {
        $this->container['quantity_adjustment'] = $quantity_adjustment;

        return $this;
    }

    /**
     * Gets transfer_in
     *
     * @return double
     */
    public function getTransferIn()
    {
        return $this->container['transfer_in'];
    }

    /**
     * Sets transfer_in
     *
     * @param double $transfer_in <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_TRANS_IN  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setTransferIn($transfer_in)
    {
        $this->container['transfer_in'] = $transfer_in;

        return $this;
    }

    /**
     * Gets transfer_out
     *
     * @return double
     */
    public function getTransferOut()
    {
        return $this->container['transfer_out'];
    }

    /**
     * Sets transfer_out
     *
     * @param double $transfer_out <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_TRANS_OUT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setTransferOut($transfer_out)
    {
        $this->container['transfer_out'] = $transfer_out;

        return $this;
    }

    /**
     * Gets quantity_required
     *
     * @return double
     */
    public function getQuantityRequired()
    {
        return $this->container['quantity_required'];
    }

    /**
     * Sets quantity_required
     *
     * @param double $quantity_required <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_REQUIRED  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setQuantityRequired($quantity_required)
    {
        $this->container['quantity_required'] = $quantity_required;

        return $this;
    }

    /**
     * Gets quantity_available
     *
     * @return double
     */
    public function getQuantityAvailable()
    {
        return $this->container['quantity_available'];
    }

    /**
     * Sets quantity_available
     *
     * @param double $quantity_available <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_AVAIL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setQuantityAvailable($quantity_available)
    {
        $this->container['quantity_available'] = $quantity_available;

        return $this;
    }

    /**
     * Gets beginning_amount
     *
     * @return double
     */
    public function getBeginningAmount()
    {
        return $this->container['beginning_amount'];
    }

    /**
     * Sets beginning_amount
     *
     * @param double $beginning_amount <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AMT_BEG  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBeginningAmount($beginning_amount)
    {
        $this->container['beginning_amount'] = $beginning_amount;

        return $this;
    }

    /**
     * Gets amount_received
     *
     * @return double
     */
    public function getAmountReceived()
    {
        return $this->container['amount_received'];
    }

    /**
     * Sets amount_received
     *
     * @param double $amount_received <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AMT_REC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAmountReceived($amount_received)
    {
        $this->container['amount_received'] = $amount_received;

        return $this;
    }

    /**
     * Gets amount_issued
     *
     * @return double
     */
    public function getAmountIssued()
    {
        return $this->container['amount_issued'];
    }

    /**
     * Sets amount_issued
     *
     * @param double $amount_issued <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AMT_ISSUED  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAmountIssued($amount_issued)
    {
        $this->container['amount_issued'] = $amount_issued;

        return $this;
    }

    /**
     * Gets amount_adjusted
     *
     * @return double
     */
    public function getAmountAdjusted()
    {
        return $this->container['amount_adjusted'];
    }

    /**
     * Sets amount_adjusted
     *
     * @param double $amount_adjusted <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AMT_ADJ  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAmountAdjusted($amount_adjusted)
    {
        $this->container['amount_adjusted'] = $amount_adjusted;

        return $this;
    }

    /**
     * Gets amount_purchased
     *
     * @return double
     */
    public function getAmountPurchased()
    {
        return $this->container['amount_purchased'];
    }

    /**
     * Sets amount_purchased
     *
     * @param double $amount_purchased <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AMT_PO  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAmountPurchased($amount_purchased)
    {
        $this->container['amount_purchased'] = $amount_purchased;

        return $this;
    }

    /**
     * Gets amount_transferred_in
     *
     * @return double
     */
    public function getAmountTransferredIn()
    {
        return $this->container['amount_transferred_in'];
    }

    /**
     * Sets amount_transferred_in
     *
     * @param double $amount_transferred_in <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AMT_TRANS_IN  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAmountTransferredIn($amount_transferred_in)
    {
        $this->container['amount_transferred_in'] = $amount_transferred_in;

        return $this;
    }

    /**
     * Gets amount_transferred_out
     *
     * @return double
     */
    public function getAmountTransferredOut()
    {
        return $this->container['amount_transferred_out'];
    }

    /**
     * Sets amount_transferred_out
     *
     * @param double $amount_transferred_out <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AMT_TRANS_OUT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAmountTransferredOut($amount_transferred_out)
    {
        $this->container['amount_transferred_out'] = $amount_transferred_out;

        return $this;
    }

    /**
     * Gets entered_on
     *
     * @return \DateTime
     */
    public function getEnteredOn()
    {
        return $this->container['entered_on'];
    }

    /**
     * Sets entered_on
     *
     * @param \DateTime $entered_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_ENT_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredOn($entered_on)
    {
        $this->container['entered_on'] = $entered_on;

        return $this;
    }

    /**
     * Gets changed_on
     *
     * @return \DateTime
     */
    public function getChangedOn()
    {
        return $this->container['changed_on'];
    }

    /**
     * Sets changed_on
     *
     * @param \DateTime $changed_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_UPD_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedOn($changed_on)
    {
        $this->container['changed_on'] = $changed_on;

        return $this;
    }

    /**
     * Gets entered_by
     *
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     *
     * @param string $entered_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_ENT_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets changed_by
     *
     * @return string
     */
    public function getChangedBy()
    {
        return $this->container['changed_by'];
    }

    /**
     * Sets changed_by
     *
     * @param string $changed_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_UPD_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedBy($changed_by)
    {
        $this->container['changed_by'] = $changed_by;

        return $this;
    }

    /**
     * Gets average_cost
     *
     * @return double
     */
    public function getAverageCost()
    {
        return $this->container['average_cost'];
    }

    /**
     * Sets average_cost
     *
     * @param double $average_cost <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AVG_COST  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAverageCost($average_cost)
    {
        $this->container['average_cost'] = $average_cost;

        return $this;
    }

    /**
     * Gets quantity_returned
     *
     * @return double
     */
    public function getQuantityReturned()
    {
        return $this->container['quantity_returned'];
    }

    /**
     * Sets quantity_returned
     *
     * @param double $quantity_returned <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_RETURN  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setQuantityReturned($quantity_returned)
    {
        $this->container['quantity_returned'] = $quantity_returned;

        return $this;
    }

    /**
     * Gets quantity_rented
     *
     * @return double
     */
    public function getQuantityRented()
    {
        return $this->container['quantity_rented'];
    }

    /**
     * Sets quantity_rented
     *
     * @param double $quantity_rented <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_RENTED  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setQuantityRented($quantity_rented)
    {
        $this->container['quantity_rented'] = $quantity_rented;

        return $this;
    }

    /**
     * Gets equipment_units_available
     *
     * @return double
     */
    public function getEquipmentUnitsAvailable()
    {
        return $this->container['equipment_units_available'];
    }

    /**
     * Sets equipment_units_available
     *
     * @param double $equipment_units_available <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_EQUIP_AVAIL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEquipmentUnitsAvailable($equipment_units_available)
    {
        $this->container['equipment_units_available'] = $equipment_units_available;

        return $this;
    }

    /**
     * Gets end_balance
     *
     * @return double
     */
    public function getEndBalance()
    {
        return $this->container['end_balance'];
    }

    /**
     * Sets end_balance
     *
     * @param double $end_balance <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_BAL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEndBalance($end_balance)
    {
        $this->container['end_balance'] = $end_balance;

        return $this;
    }

    /**
     * Gets perpetual_amount
     *
     * @return double
     */
    public function getPerpetualAmount()
    {
        return $this->container['perpetual_amount'];
    }

    /**
     * Sets perpetual_amount
     *
     * @param double $perpetual_amount <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AMT_BAL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPerpetualAmount($perpetual_amount)
    {
        $this->container['perpetual_amount'] = $perpetual_amount;

        return $this;
    }

    /**
     * Gets quantity_restocked
     *
     * @return double
     */
    public function getQuantityRestocked()
    {
        return $this->container['quantity_restocked'];
    }

    /**
     * Sets quantity_restocked
     *
     * @param double $quantity_restocked <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_RESTOCK  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setQuantityRestocked($quantity_restocked)
    {
        $this->container['quantity_restocked'] = $quantity_restocked;

        return $this;
    }

    /**
     * Gets amount_returned
     *
     * @return double
     */
    public function getAmountReturned()
    {
        return $this->container['amount_returned'];
    }

    /**
     * Sets amount_returned
     *
     * @param double $amount_returned <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AMT_RETURN  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAmountReturned($amount_returned)
    {
        $this->container['amount_returned'] = $amount_returned;

        return $this;
    }

    /**
     * Gets amount_restocked
     *
     * @return double
     */
    public function getAmountRestocked()
    {
        return $this->container['amount_restocked'];
    }

    /**
     * Sets amount_restocked
     *
     * @param double $amount_restocked <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AMT_RESTOCK  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAmountRestocked($amount_restocked)
    {
        $this->container['amount_restocked'] = $amount_restocked;

        return $this;
    }

    /**
     * Gets quantity_rented_restock
     *
     * @return double
     */
    public function getQuantityRentedRestock()
    {
        return $this->container['quantity_rented_restock'];
    }

    /**
     * Sets quantity_rented_restock
     *
     * @param double $quantity_rented_restock <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_RENTED_RESTOCK  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setQuantityRentedRestock($quantity_rented_restock)
    {
        $this->container['quantity_rented_restock'] = $quantity_rented_restock;

        return $this;
    }

    /**
     * Gets units_acquired
     *
     * @return double
     */
    public function getUnitsAcquired()
    {
        return $this->container['units_acquired'];
    }

    /**
     * Sets units_acquired
     *
     * @param double $units_acquired <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_PER  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUnitsAcquired($units_acquired)
    {
        $this->container['units_acquired'] = $units_acquired;

        return $this;
    }

    /**
     * Gets amount_acquired
     *
     * @return double
     */
    public function getAmountAcquired()
    {
        return $this->container['amount_acquired'];
    }

    /**
     * Sets amount_acquired
     *
     * @param double $amount_acquired <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AMT_PER  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAmountAcquired($amount_acquired)
    {
        $this->container['amount_acquired'] = $amount_acquired;

        return $this;
    }

    /**
     * Gets valuation_units
     *
     * @return double
     */
    public function getValuationUnits()
    {
        return $this->container['valuation_units'];
    }

    /**
     * Sets valuation_units
     *
     * @param double $valuation_units <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_QTY_VAL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setValuationUnits($valuation_units)
    {
        $this->container['valuation_units'] = $valuation_units;

        return $this;
    }

    /**
     * Gets valuation_amount
     *
     * @return double
     */
    public function getValuationAmount()
    {
        return $this->container['valuation_amount'];
    }

    /**
     * Sets valuation_amount
     *
     * @param double $valuation_amount <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AMT_VAL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setValuationAmount($valuation_amount)
    {
        $this->container['valuation_amount'] = $valuation_amount;

        return $this;
    }

    /**
     * Gets valuation_average_cost
     *
     * @return double
     */
    public function getValuationAverageCost()
    {
        return $this->container['valuation_average_cost'];
    }

    /**
     * Sets valuation_average_cost
     *
     * @param double $valuation_average_cost <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> IN810_AVG_VAL_UNIT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setValuationAverageCost($valuation_average_cost)
    {
        $this->container['valuation_average_cost'] = $valuation_average_cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


