<?php
/**
 * RelationshipTypesModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * RelationshipTypesModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RelationshipTypesModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RelationshipTypesModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'order' => 'string',
        'subordinate_description' => 'string',
        'master_description' => 'string',
        'type' => 'string',
        'occurrence' => 'string',
        'entered_date_time' => '\DateTime',
        'entered_by_user' => 'string',
        'scope' => 'string',
        'class' => 'string',
        'last_changed_date_time' => '\DateTime',
        'last_changed_by_user' => 'string',
        'retired' => 'string',
        'group' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'order' => null,
        'subordinate_description' => null,
        'master_description' => null,
        'type' => null,
        'occurrence' => null,
        'entered_date_time' => 'date-time',
        'entered_by_user' => null,
        'scope' => null,
        'class' => null,
        'last_changed_date_time' => 'date-time',
        'last_changed_by_user' => null,
        'retired' => null,
        'group' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'order' => 'Order',
        'subordinate_description' => 'SubordinateDescription',
        'master_description' => 'MasterDescription',
        'type' => 'Type',
        'occurrence' => 'Occurrence',
        'entered_date_time' => 'EnteredDateTime',
        'entered_by_user' => 'EnteredByUser',
        'scope' => 'Scope',
        'class' => 'Class',
        'last_changed_date_time' => 'LastChangedDateTime',
        'last_changed_by_user' => 'LastChangedByUser',
        'retired' => 'Retired',
        'group' => 'Group'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'order' => 'setOrder',
        'subordinate_description' => 'setSubordinateDescription',
        'master_description' => 'setMasterDescription',
        'type' => 'setType',
        'occurrence' => 'setOccurrence',
        'entered_date_time' => 'setEnteredDateTime',
        'entered_by_user' => 'setEnteredByUser',
        'scope' => 'setScope',
        'class' => 'setClass',
        'last_changed_date_time' => 'setLastChangedDateTime',
        'last_changed_by_user' => 'setLastChangedByUser',
        'retired' => 'setRetired',
        'group' => 'setGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'order' => 'getOrder',
        'subordinate_description' => 'getSubordinateDescription',
        'master_description' => 'getMasterDescription',
        'type' => 'getType',
        'occurrence' => 'getOccurrence',
        'entered_date_time' => 'getEnteredDateTime',
        'entered_by_user' => 'getEnteredByUser',
        'scope' => 'getScope',
        'class' => 'getClass',
        'last_changed_date_time' => 'getLastChangedDateTime',
        'last_changed_by_user' => 'getLastChangedByUser',
        'retired' => 'getRetired',
        'group' => 'getGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['subordinate_description'] = isset($data['subordinate_description']) ? $data['subordinate_description'] : null;
        $this->container['master_description'] = isset($data['master_description']) ? $data['master_description'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['occurrence'] = isset($data['occurrence']) ? $data['occurrence'] : null;
        $this->container['entered_date_time'] = isset($data['entered_date_time']) ? $data['entered_date_time'] : null;
        $this->container['entered_by_user'] = isset($data['entered_by_user']) ? $data['entered_by_user'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['class'] = isset($data['class']) ? $data['class'] : null;
        $this->container['last_changed_date_time'] = isset($data['last_changed_date_time']) ? $data['last_changed_date_time'] : null;
        $this->container['last_changed_by_user'] = isset($data['last_changed_by_user']) ? $data['last_changed_by_user'] : null;
        $this->container['retired'] = isset($data['retired']) ? $data['retired'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        if ($this->container['subordinate_description'] === null) {
            $invalidProperties[] = "'subordinate_description' can't be null";
        }
        if ($this->container['master_description'] === null) {
            $invalidProperties[] = "'master_description' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['occurrence'] === null) {
            $invalidProperties[] = "'occurrence' can't be null";
        }
        if ($this->container['entered_date_time'] === null) {
            $invalidProperties[] = "'entered_date_time' can't be null";
        }
        if ($this->container['entered_by_user'] === null) {
            $invalidProperties[] = "'entered_by_user' can't be null";
        }
        if ($this->container['scope'] === null) {
            $invalidProperties[] = "'scope' can't be null";
        }
        if ($this->container['class'] === null) {
            $invalidProperties[] = "'class' can't be null";
        }
        if ($this->container['last_changed_date_time'] === null) {
            $invalidProperties[] = "'last_changed_date_time' can't be null";
        }
        if ($this->container['last_changed_by_user'] === null) {
            $invalidProperties[] = "'last_changed_by_user' can't be null";
        }
        if ($this->container['retired'] === null) {
            $invalidProperties[] = "'retired' can't be null";
        }
        if ($this->container['group'] === null) {
            $invalidProperties[] = "'group' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_LINK  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_LINK_ORDER  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets subordinate_description
     *
     * @return string
     */
    public function getSubordinateDescription()
    {
        return $this->container['subordinate_description'];
    }

    /**
     * Sets subordinate_description
     *
     * @param string $subordinate_description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_DESCRIPTION  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 30  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSubordinateDescription($subordinate_description)
    {
        $this->container['subordinate_description'] = $subordinate_description;

        return $this;
    }

    /**
     * Gets master_description
     *
     * @return string
     */
    public function getMasterDescription()
    {
        return $this->container['master_description'];
    }

    /**
     * Sets master_description
     *
     * @param string $master_description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_UP_DESCRIPTION  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 30  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setMasterDescription($master_description)
    {
        $this->container['master_description'] = $master_description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_SYSTEM_LINK  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets occurrence
     *
     * @return string
     */
    public function getOccurrence()
    {
        return $this->container['occurrence'];
    }

    /**
     * Sets occurrence
     *
     * @param string $occurrence <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_TYPE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOccurrence($occurrence)
    {
        $this->container['occurrence'] = $occurrence;

        return $this;
    }

    /**
     * Gets entered_date_time
     *
     * @return \DateTime
     */
    public function getEnteredDateTime()
    {
        return $this->container['entered_date_time'];
    }

    /**
     * Sets entered_date_time
     *
     * @param \DateTime $entered_date_time <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_ENT_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredDateTime($entered_date_time)
    {
        $this->container['entered_date_time'] = $entered_date_time;

        return $this;
    }

    /**
     * Gets entered_by_user
     *
     * @return string
     */
    public function getEnteredByUser()
    {
        return $this->container['entered_by_user'];
    }

    /**
     * Sets entered_by_user
     *
     * @param string $entered_by_user <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_ENT_USERID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredByUser($entered_by_user)
    {
        $this->container['entered_by_user'] = $entered_by_user;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_SCOPE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string $class <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_LINK_CLASS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setClass($class)
    {
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets last_changed_date_time
     *
     * @return \DateTime
     */
    public function getLastChangedDateTime()
    {
        return $this->container['last_changed_date_time'];
    }

    /**
     * Sets last_changed_date_time
     *
     * @param \DateTime $last_changed_date_time <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_UPD_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLastChangedDateTime($last_changed_date_time)
    {
        $this->container['last_changed_date_time'] = $last_changed_date_time;

        return $this;
    }

    /**
     * Gets last_changed_by_user
     *
     * @return string
     */
    public function getLastChangedByUser()
    {
        return $this->container['last_changed_by_user'];
    }

    /**
     * Sets last_changed_by_user
     *
     * @param string $last_changed_by_user <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_UPD_USERID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLastChangedByUser($last_changed_by_user)
    {
        $this->container['last_changed_by_user'] = $last_changed_by_user;

        return $this;
    }

    /**
     * Gets retired
     *
     * @return string
     */
    public function getRetired()
    {
        return $this->container['retired'];
    }

    /**
     * Sets retired
     *
     * @param string $retired <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_RETIRE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setRetired($retired)
    {
        $this->container['retired'] = $retired;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> EV876_GROUP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


