<?php
/**
 * InventoryBatchDetailsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ungerboeck API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FomF\Ungerboeck\Client\Model;

use \ArrayAccess;
use \FomF\Ungerboeck\Client\ObjectSerializer;

/**
 * InventoryBatchDetailsModel Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  FomF\Ungerboeck\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryBatchDetailsModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryBatchDetailsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sequence' => 'int',
        'batch' => 'string',
        'organization' => 'string',
        'batch_type' => 'string',
        'start_date' => '\DateTime',
        'start_time' => '\DateTime',
        'end_date' => '\DateTime',
        'end_time' => '\DateTime',
        'units' => 'double',
        'amount' => 'double',
        'supplier_account' => 'string',
        'item' => 'string',
        'type' => 'string',
        'status' => 'string',
        'note' => 'string',
        'um' => 'string',
        'per_unit' => 'int',
        'ut' => 'string',
        'unit_cost' => 'double',
        'department' => 'string',
        'trans_date' => '\DateTime',
        'space_from' => 'string',
        'to' => 'string',
        'event' => 'int',
        'purchase_order' => 'int',
        'po_line' => 'int',
        'stock_count' => 'double',
        'poum' => 'string',
        'purchase_order_search' => 'string',
        'inventory' => 'string',
        'description' => 'string',
        'posted_to_inventory' => 'string',
        'lot_serial' => 'string',
        'count' => 'double',
        'on_hand' => 'double',
        'date' => '\DateTime',
        'total_value' => 'double',
        'location' => 'string',
        'sub_location' => 'string',
        'user_field1' => 'string',
        'user_field2' => 'string',
        'entered_on' => '\DateTime',
        'entered_by' => 'string',
        'changed_on' => '\DateTime',
        'changed_by' => 'string',
        'rental' => 'string',
        'indefinite_rental' => 'string',
        'reference' => 'string',
        'order' => 'int',
        'purchasing_um' => 'string',
        'purchasing_um_count' => 'double',
        'selling_um_count' => 'double',
        'invoice_sequence' => 'int',
        'currency' => 'string',
        'fc_amount' => 'double',
        'additional_transaction_units' => 'double',
        'asset' => 'string',
        'time_units' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sequence' => 'int32',
        'batch' => null,
        'organization' => null,
        'batch_type' => null,
        'start_date' => 'date-time',
        'start_time' => 'date-time',
        'end_date' => 'date-time',
        'end_time' => 'date-time',
        'units' => 'double',
        'amount' => 'double',
        'supplier_account' => null,
        'item' => null,
        'type' => null,
        'status' => null,
        'note' => null,
        'um' => null,
        'per_unit' => 'int32',
        'ut' => null,
        'unit_cost' => 'double',
        'department' => null,
        'trans_date' => 'date-time',
        'space_from' => null,
        'to' => null,
        'event' => 'int32',
        'purchase_order' => 'int32',
        'po_line' => 'int32',
        'stock_count' => 'double',
        'poum' => null,
        'purchase_order_search' => null,
        'inventory' => null,
        'description' => null,
        'posted_to_inventory' => null,
        'lot_serial' => null,
        'count' => 'double',
        'on_hand' => 'double',
        'date' => 'date-time',
        'total_value' => 'double',
        'location' => null,
        'sub_location' => null,
        'user_field1' => null,
        'user_field2' => null,
        'entered_on' => 'date-time',
        'entered_by' => null,
        'changed_on' => 'date-time',
        'changed_by' => null,
        'rental' => null,
        'indefinite_rental' => null,
        'reference' => null,
        'order' => 'int32',
        'purchasing_um' => null,
        'purchasing_um_count' => 'double',
        'selling_um_count' => 'double',
        'invoice_sequence' => 'int32',
        'currency' => null,
        'fc_amount' => 'double',
        'additional_transaction_units' => 'double',
        'asset' => null,
        'time_units' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sequence' => 'Sequence',
        'batch' => 'Batch',
        'organization' => 'Organization',
        'batch_type' => 'BatchType',
        'start_date' => 'StartDate',
        'start_time' => 'StartTime',
        'end_date' => 'EndDate',
        'end_time' => 'EndTime',
        'units' => 'Units',
        'amount' => 'Amount',
        'supplier_account' => 'SupplierAccount',
        'item' => 'Item',
        'type' => 'Type',
        'status' => 'Status',
        'note' => 'Note',
        'um' => 'UM',
        'per_unit' => 'PerUnit',
        'ut' => 'UT',
        'unit_cost' => 'UnitCost',
        'department' => 'Department',
        'trans_date' => 'TransDate',
        'space_from' => 'SpaceFrom',
        'to' => 'To',
        'event' => 'Event',
        'purchase_order' => 'PurchaseOrder',
        'po_line' => 'POLine',
        'stock_count' => 'StockCount',
        'poum' => 'POUM',
        'purchase_order_search' => 'PurchaseOrderSearch',
        'inventory' => 'Inventory',
        'description' => 'Description',
        'posted_to_inventory' => 'PostedToInventory',
        'lot_serial' => 'LotSerial',
        'count' => 'Count',
        'on_hand' => 'OnHand',
        'date' => 'Date',
        'total_value' => 'TotalValue',
        'location' => 'Location',
        'sub_location' => 'SubLocation',
        'user_field1' => 'UserField1',
        'user_field2' => 'UserField2',
        'entered_on' => 'EnteredOn',
        'entered_by' => 'EnteredBy',
        'changed_on' => 'ChangedOn',
        'changed_by' => 'ChangedBy',
        'rental' => 'Rental',
        'indefinite_rental' => 'IndefiniteRental',
        'reference' => 'Reference',
        'order' => 'Order',
        'purchasing_um' => 'PurchasingUM',
        'purchasing_um_count' => 'PurchasingUMCount',
        'selling_um_count' => 'SellingUMCount',
        'invoice_sequence' => 'InvoiceSequence',
        'currency' => 'Currency',
        'fc_amount' => 'FCAmount',
        'additional_transaction_units' => 'AdditionalTransactionUnits',
        'asset' => 'Asset',
        'time_units' => 'TimeUnits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sequence' => 'setSequence',
        'batch' => 'setBatch',
        'organization' => 'setOrganization',
        'batch_type' => 'setBatchType',
        'start_date' => 'setStartDate',
        'start_time' => 'setStartTime',
        'end_date' => 'setEndDate',
        'end_time' => 'setEndTime',
        'units' => 'setUnits',
        'amount' => 'setAmount',
        'supplier_account' => 'setSupplierAccount',
        'item' => 'setItem',
        'type' => 'setType',
        'status' => 'setStatus',
        'note' => 'setNote',
        'um' => 'setUm',
        'per_unit' => 'setPerUnit',
        'ut' => 'setUt',
        'unit_cost' => 'setUnitCost',
        'department' => 'setDepartment',
        'trans_date' => 'setTransDate',
        'space_from' => 'setSpaceFrom',
        'to' => 'setTo',
        'event' => 'setEvent',
        'purchase_order' => 'setPurchaseOrder',
        'po_line' => 'setPoLine',
        'stock_count' => 'setStockCount',
        'poum' => 'setPoum',
        'purchase_order_search' => 'setPurchaseOrderSearch',
        'inventory' => 'setInventory',
        'description' => 'setDescription',
        'posted_to_inventory' => 'setPostedToInventory',
        'lot_serial' => 'setLotSerial',
        'count' => 'setCount',
        'on_hand' => 'setOnHand',
        'date' => 'setDate',
        'total_value' => 'setTotalValue',
        'location' => 'setLocation',
        'sub_location' => 'setSubLocation',
        'user_field1' => 'setUserField1',
        'user_field2' => 'setUserField2',
        'entered_on' => 'setEnteredOn',
        'entered_by' => 'setEnteredBy',
        'changed_on' => 'setChangedOn',
        'changed_by' => 'setChangedBy',
        'rental' => 'setRental',
        'indefinite_rental' => 'setIndefiniteRental',
        'reference' => 'setReference',
        'order' => 'setOrder',
        'purchasing_um' => 'setPurchasingUm',
        'purchasing_um_count' => 'setPurchasingUmCount',
        'selling_um_count' => 'setSellingUmCount',
        'invoice_sequence' => 'setInvoiceSequence',
        'currency' => 'setCurrency',
        'fc_amount' => 'setFcAmount',
        'additional_transaction_units' => 'setAdditionalTransactionUnits',
        'asset' => 'setAsset',
        'time_units' => 'setTimeUnits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sequence' => 'getSequence',
        'batch' => 'getBatch',
        'organization' => 'getOrganization',
        'batch_type' => 'getBatchType',
        'start_date' => 'getStartDate',
        'start_time' => 'getStartTime',
        'end_date' => 'getEndDate',
        'end_time' => 'getEndTime',
        'units' => 'getUnits',
        'amount' => 'getAmount',
        'supplier_account' => 'getSupplierAccount',
        'item' => 'getItem',
        'type' => 'getType',
        'status' => 'getStatus',
        'note' => 'getNote',
        'um' => 'getUm',
        'per_unit' => 'getPerUnit',
        'ut' => 'getUt',
        'unit_cost' => 'getUnitCost',
        'department' => 'getDepartment',
        'trans_date' => 'getTransDate',
        'space_from' => 'getSpaceFrom',
        'to' => 'getTo',
        'event' => 'getEvent',
        'purchase_order' => 'getPurchaseOrder',
        'po_line' => 'getPoLine',
        'stock_count' => 'getStockCount',
        'poum' => 'getPoum',
        'purchase_order_search' => 'getPurchaseOrderSearch',
        'inventory' => 'getInventory',
        'description' => 'getDescription',
        'posted_to_inventory' => 'getPostedToInventory',
        'lot_serial' => 'getLotSerial',
        'count' => 'getCount',
        'on_hand' => 'getOnHand',
        'date' => 'getDate',
        'total_value' => 'getTotalValue',
        'location' => 'getLocation',
        'sub_location' => 'getSubLocation',
        'user_field1' => 'getUserField1',
        'user_field2' => 'getUserField2',
        'entered_on' => 'getEnteredOn',
        'entered_by' => 'getEnteredBy',
        'changed_on' => 'getChangedOn',
        'changed_by' => 'getChangedBy',
        'rental' => 'getRental',
        'indefinite_rental' => 'getIndefiniteRental',
        'reference' => 'getReference',
        'order' => 'getOrder',
        'purchasing_um' => 'getPurchasingUm',
        'purchasing_um_count' => 'getPurchasingUmCount',
        'selling_um_count' => 'getSellingUmCount',
        'invoice_sequence' => 'getInvoiceSequence',
        'currency' => 'getCurrency',
        'fc_amount' => 'getFcAmount',
        'additional_transaction_units' => 'getAdditionalTransactionUnits',
        'asset' => 'getAsset',
        'time_units' => 'getTimeUnits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sequence'] = isset($data['sequence']) ? $data['sequence'] : null;
        $this->container['batch'] = isset($data['batch']) ? $data['batch'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['batch_type'] = isset($data['batch_type']) ? $data['batch_type'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['supplier_account'] = isset($data['supplier_account']) ? $data['supplier_account'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['um'] = isset($data['um']) ? $data['um'] : null;
        $this->container['per_unit'] = isset($data['per_unit']) ? $data['per_unit'] : null;
        $this->container['ut'] = isset($data['ut']) ? $data['ut'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['trans_date'] = isset($data['trans_date']) ? $data['trans_date'] : null;
        $this->container['space_from'] = isset($data['space_from']) ? $data['space_from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['purchase_order'] = isset($data['purchase_order']) ? $data['purchase_order'] : null;
        $this->container['po_line'] = isset($data['po_line']) ? $data['po_line'] : null;
        $this->container['stock_count'] = isset($data['stock_count']) ? $data['stock_count'] : null;
        $this->container['poum'] = isset($data['poum']) ? $data['poum'] : null;
        $this->container['purchase_order_search'] = isset($data['purchase_order_search']) ? $data['purchase_order_search'] : null;
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['posted_to_inventory'] = isset($data['posted_to_inventory']) ? $data['posted_to_inventory'] : null;
        $this->container['lot_serial'] = isset($data['lot_serial']) ? $data['lot_serial'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['on_hand'] = isset($data['on_hand']) ? $data['on_hand'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['total_value'] = isset($data['total_value']) ? $data['total_value'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['sub_location'] = isset($data['sub_location']) ? $data['sub_location'] : null;
        $this->container['user_field1'] = isset($data['user_field1']) ? $data['user_field1'] : null;
        $this->container['user_field2'] = isset($data['user_field2']) ? $data['user_field2'] : null;
        $this->container['entered_on'] = isset($data['entered_on']) ? $data['entered_on'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['changed_on'] = isset($data['changed_on']) ? $data['changed_on'] : null;
        $this->container['changed_by'] = isset($data['changed_by']) ? $data['changed_by'] : null;
        $this->container['rental'] = isset($data['rental']) ? $data['rental'] : null;
        $this->container['indefinite_rental'] = isset($data['indefinite_rental']) ? $data['indefinite_rental'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['purchasing_um'] = isset($data['purchasing_um']) ? $data['purchasing_um'] : null;
        $this->container['purchasing_um_count'] = isset($data['purchasing_um_count']) ? $data['purchasing_um_count'] : null;
        $this->container['selling_um_count'] = isset($data['selling_um_count']) ? $data['selling_um_count'] : null;
        $this->container['invoice_sequence'] = isset($data['invoice_sequence']) ? $data['invoice_sequence'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['fc_amount'] = isset($data['fc_amount']) ? $data['fc_amount'] : null;
        $this->container['additional_transaction_units'] = isset($data['additional_transaction_units']) ? $data['additional_transaction_units'] : null;
        $this->container['asset'] = isset($data['asset']) ? $data['asset'] : null;
        $this->container['time_units'] = isset($data['time_units']) ? $data['time_units'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sequence'] === null) {
            $invalidProperties[] = "'sequence' can't be null";
        }
        if ($this->container['batch'] === null) {
            $invalidProperties[] = "'batch' can't be null";
        }
        if ($this->container['organization'] === null) {
            $invalidProperties[] = "'organization' can't be null";
        }
        if ($this->container['batch_type'] === null) {
            $invalidProperties[] = "'batch_type' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ($this->container['units'] === null) {
            $invalidProperties[] = "'units' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['supplier_account'] === null) {
            $invalidProperties[] = "'supplier_account' can't be null";
        }
        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalidProperties[] = "'note' can't be null";
        }
        if ($this->container['um'] === null) {
            $invalidProperties[] = "'um' can't be null";
        }
        if ($this->container['per_unit'] === null) {
            $invalidProperties[] = "'per_unit' can't be null";
        }
        if ($this->container['ut'] === null) {
            $invalidProperties[] = "'ut' can't be null";
        }
        if ($this->container['unit_cost'] === null) {
            $invalidProperties[] = "'unit_cost' can't be null";
        }
        if ($this->container['department'] === null) {
            $invalidProperties[] = "'department' can't be null";
        }
        if ($this->container['trans_date'] === null) {
            $invalidProperties[] = "'trans_date' can't be null";
        }
        if ($this->container['space_from'] === null) {
            $invalidProperties[] = "'space_from' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['event'] === null) {
            $invalidProperties[] = "'event' can't be null";
        }
        if ($this->container['purchase_order'] === null) {
            $invalidProperties[] = "'purchase_order' can't be null";
        }
        if ($this->container['po_line'] === null) {
            $invalidProperties[] = "'po_line' can't be null";
        }
        if ($this->container['stock_count'] === null) {
            $invalidProperties[] = "'stock_count' can't be null";
        }
        if ($this->container['poum'] === null) {
            $invalidProperties[] = "'poum' can't be null";
        }
        if ($this->container['purchase_order_search'] === null) {
            $invalidProperties[] = "'purchase_order_search' can't be null";
        }
        if ($this->container['inventory'] === null) {
            $invalidProperties[] = "'inventory' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['posted_to_inventory'] === null) {
            $invalidProperties[] = "'posted_to_inventory' can't be null";
        }
        if ($this->container['lot_serial'] === null) {
            $invalidProperties[] = "'lot_serial' can't be null";
        }
        if ($this->container['count'] === null) {
            $invalidProperties[] = "'count' can't be null";
        }
        if ($this->container['on_hand'] === null) {
            $invalidProperties[] = "'on_hand' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['total_value'] === null) {
            $invalidProperties[] = "'total_value' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['sub_location'] === null) {
            $invalidProperties[] = "'sub_location' can't be null";
        }
        if ($this->container['user_field1'] === null) {
            $invalidProperties[] = "'user_field1' can't be null";
        }
        if ($this->container['user_field2'] === null) {
            $invalidProperties[] = "'user_field2' can't be null";
        }
        if ($this->container['entered_on'] === null) {
            $invalidProperties[] = "'entered_on' can't be null";
        }
        if ($this->container['entered_by'] === null) {
            $invalidProperties[] = "'entered_by' can't be null";
        }
        if ($this->container['changed_on'] === null) {
            $invalidProperties[] = "'changed_on' can't be null";
        }
        if ($this->container['changed_by'] === null) {
            $invalidProperties[] = "'changed_by' can't be null";
        }
        if ($this->container['rental'] === null) {
            $invalidProperties[] = "'rental' can't be null";
        }
        if ($this->container['indefinite_rental'] === null) {
            $invalidProperties[] = "'indefinite_rental' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        if ($this->container['purchasing_um'] === null) {
            $invalidProperties[] = "'purchasing_um' can't be null";
        }
        if ($this->container['purchasing_um_count'] === null) {
            $invalidProperties[] = "'purchasing_um_count' can't be null";
        }
        if ($this->container['selling_um_count'] === null) {
            $invalidProperties[] = "'selling_um_count' can't be null";
        }
        if ($this->container['invoice_sequence'] === null) {
            $invalidProperties[] = "'invoice_sequence' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['fc_amount'] === null) {
            $invalidProperties[] = "'fc_amount' can't be null";
        }
        if ($this->container['additional_transaction_units'] === null) {
            $invalidProperties[] = "'additional_transaction_units' can't be null";
        }
        if ($this->container['asset'] === null) {
            $invalidProperties[] = "'asset' can't be null";
        }
        if ($this->container['time_units'] === null) {
            $invalidProperties[] = "'time_units' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sequence
     *
     * @return int
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param int $sequence <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_SEQ_NBR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSequence($sequence)
    {
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string $batch <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_BATCH_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBatch($batch)
    {
        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string $organization <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_ORG_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets batch_type
     *
     * @return string
     */
    public function getBatchType()
    {
        return $this->container['batch_type'];
    }

    /**
     * Sets batch_type
     *
     * @param string $batch_type <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_BATCH_TYPE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setBatchType($batch_type)
    {
        $this->container['batch_type'] = $batch_type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_START_DATE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime $start_time <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_START_TIME  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_END_DATE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime $end_time <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_END_TIME  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets units
     *
     * @return double
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param double $units <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_QUANTITY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 154  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_AMOUNT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 112  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets supplier_account
     *
     * @return string
     */
    public function getSupplierAccount()
    {
        return $this->container['supplier_account'];
    }

    /**
     * Sets supplier_account
     *
     * @param string $supplier_account <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_EXT_ACCT_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 8  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSupplierAccount($supplier_account)
    {
        $this->container['supplier_account'] = $supplier_account;

        return $this;
    }

    /**
     * Gets item
     *
     * @return string
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param string $item <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_RES_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 12  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_TRANS_TYPE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_DTL_STS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_DTL_NOTE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 80  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets um
     *
     * @return string
     */
    public function getUm()
    {
        return $this->container['um'];
    }

    /**
     * Sets um
     *
     * @param string $um <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_UOM  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUm($um)
    {
        $this->container['um'] = $um;

        return $this;
    }

    /**
     * Gets per_unit
     *
     * @return int
     */
    public function getPerUnit()
    {
        return $this->container['per_unit'];
    }

    /**
     * Sets per_unit
     *
     * @param int $per_unit <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_PER_UNITS  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPerUnit($per_unit)
    {
        $this->container['per_unit'] = $per_unit;

        return $this;
    }

    /**
     * Gets ut
     *
     * @return string
     */
    public function getUt()
    {
        return $this->container['ut'];
    }

    /**
     * Sets ut
     *
     * @param string $ut <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_UOT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUt($ut)
    {
        $this->container['ut'] = $ut;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return double
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param double $unit_cost <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_COST  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 154  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_DEPT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets trans_date
     *
     * @return \DateTime
     */
    public function getTransDate()
    {
        return $this->container['trans_date'];
    }

    /**
     * Sets trans_date
     *
     * @param \DateTime $trans_date <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_TRANS_DATE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setTransDate($trans_date)
    {
        $this->container['trans_date'] = $trans_date;

        return $this;
    }

    /**
     * Gets space_from
     *
     * @return string
     */
    public function getSpaceFrom()
    {
        return $this->container['space_from'];
    }

    /**
     * Sets space_from
     *
     * @param string $space_from <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_SPACE_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSpaceFrom($space_from)
    {
        $this->container['space_from'] = $space_from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_DESTINATION  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 6  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets event
     *
     * @return int
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param int $event <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_EVT_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets purchase_order
     *
     * @return int
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchase_order'];
    }

    /**
     * Sets purchase_order
     *
     * @param int $purchase_order <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_PO_NBR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPurchaseOrder($purchase_order)
    {
        $this->container['purchase_order'] = $purchase_order;

        return $this;
    }

    /**
     * Gets po_line
     *
     * @return int
     */
    public function getPoLine()
    {
        return $this->container['po_line'];
    }

    /**
     * Sets po_line
     *
     * @param int $po_line <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_PO_LINE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPoLine($po_line)
    {
        $this->container['po_line'] = $po_line;

        return $this;
    }

    /**
     * Gets stock_count
     *
     * @return double
     */
    public function getStockCount()
    {
        return $this->container['stock_count'];
    }

    /**
     * Sets stock_count
     *
     * @param double $stock_count <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_PO_QTY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 114  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setStockCount($stock_count)
    {
        $this->container['stock_count'] = $stock_count;

        return $this;
    }

    /**
     * Gets poum
     *
     * @return string
     */
    public function getPoum()
    {
        return $this->container['poum'];
    }

    /**
     * Sets poum
     *
     * @param string $poum <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_PO_UOM  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPoum($poum)
    {
        $this->container['poum'] = $poum;

        return $this;
    }

    /**
     * Gets purchase_order_search
     *
     * @return string
     */
    public function getPurchaseOrderSearch()
    {
        return $this->container['purchase_order_search'];
    }

    /**
     * Sets purchase_order_search
     *
     * @param string $purchase_order_search <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_PO_SEARCH  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 9  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPurchaseOrderSearch($purchase_order_search)
    {
        $this->container['purchase_order_search'] = $purchase_order_search;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return string
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param string $inventory <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_INVENTORY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_DESC  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 255  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets posted_to_inventory
     *
     * @return string
     */
    public function getPostedToInventory()
    {
        return $this->container['posted_to_inventory'];
    }

    /**
     * Sets posted_to_inventory
     *
     * @param string $posted_to_inventory <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_IN_POSTED  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPostedToInventory($posted_to_inventory)
    {
        $this->container['posted_to_inventory'] = $posted_to_inventory;

        return $this;
    }

    /**
     * Gets lot_serial
     *
     * @return string
     */
    public function getLotSerial()
    {
        return $this->container['lot_serial'];
    }

    /**
     * Sets lot_serial
     *
     * @param string $lot_serial <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_LOT_SERIAL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 50  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLotSerial($lot_serial)
    {
        $this->container['lot_serial'] = $lot_serial;

        return $this;
    }

    /**
     * Gets count
     *
     * @return double
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param double $count <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_COUNT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets on_hand
     *
     * @return double
     */
    public function getOnHand()
    {
        return $this->container['on_hand'];
    }

    /**
     * Sets on_hand
     *
     * @param double $on_hand <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_ONHAND  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOnHand($on_hand)
    {
        $this->container['on_hand'] = $on_hand;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_DATE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets total_value
     *
     * @return double
     */
    public function getTotalValue()
    {
        return $this->container['total_value'];
    }

    /**
     * Sets total_value
     *
     * @param double $total_value <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_VALUE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 122  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setTotalValue($total_value)
    {
        $this->container['total_value'] = $total_value;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_WH_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 8  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets sub_location
     *
     * @return string
     */
    public function getSubLocation()
    {
        return $this->container['sub_location'];
    }

    /**
     * Sets sub_location
     *
     * @param string $sub_location <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_LOC_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 8  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSubLocation($sub_location)
    {
        $this->container['sub_location'] = $sub_location;

        return $this;
    }

    /**
     * Gets user_field1
     *
     * @return string
     */
    public function getUserField1()
    {
        return $this->container['user_field1'];
    }

    /**
     * Sets user_field1
     *
     * @param string $user_field1 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_REF_FIELD1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 40  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUserField1($user_field1)
    {
        $this->container['user_field1'] = $user_field1;

        return $this;
    }

    /**
     * Gets user_field2
     *
     * @return string
     */
    public function getUserField2()
    {
        return $this->container['user_field2'];
    }

    /**
     * Sets user_field2
     *
     * @param string $user_field2 <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_REF_FIELD2  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 15  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setUserField2($user_field2)
    {
        $this->container['user_field2'] = $user_field2;

        return $this;
    }

    /**
     * Gets entered_on
     *
     * @return \DateTime
     */
    public function getEnteredOn()
    {
        return $this->container['entered_on'];
    }

    /**
     * Sets entered_on
     *
     * @param \DateTime $entered_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_ENT_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredOn($entered_on)
    {
        $this->container['entered_on'] = $entered_on;

        return $this;
    }

    /**
     * Gets entered_by
     *
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     *
     * @param string $entered_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_ENT_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets changed_on
     *
     * @return \DateTime
     */
    public function getChangedOn()
    {
        return $this->container['changed_on'];
    }

    /**
     * Sets changed_on
     *
     * @param \DateTime $changed_on <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_UPD_STAMP  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedOn($changed_on)
    {
        $this->container['changed_on'] = $changed_on;

        return $this;
    }

    /**
     * Gets changed_by
     *
     * @return string
     */
    public function getChangedBy()
    {
        return $this->container['changed_by'];
    }

    /**
     * Sets changed_by
     *
     * @param string $changed_by <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_UPD_USER_ID  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setChangedBy($changed_by)
    {
        $this->container['changed_by'] = $changed_by;

        return $this;
    }

    /**
     * Gets rental
     *
     * @return string
     */
    public function getRental()
    {
        return $this->container['rental'];
    }

    /**
     * Sets rental
     *
     * @param string $rental <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_RENTAL  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setRental($rental)
    {
        $this->container['rental'] = $rental;

        return $this;
    }

    /**
     * Gets indefinite_rental
     *
     * @return string
     */
    public function getIndefiniteRental()
    {
        return $this->container['indefinite_rental'];
    }

    /**
     * Sets indefinite_rental
     *
     * @param string $indefinite_rental <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_INDEFINITE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 1  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setIndefiniteRental($indefinite_rental)
    {
        $this->container['indefinite_rental'] = $indefinite_rental;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_REFERENCE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 40  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_ORD_NBR  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets purchasing_um
     *
     * @return string
     */
    public function getPurchasingUm()
    {
        return $this->container['purchasing_um'];
    }

    /**
     * Sets purchasing_um
     *
     * @param string $purchasing_um <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_PUR_UOM  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPurchasingUm($purchasing_um)
    {
        $this->container['purchasing_um'] = $purchasing_um;

        return $this;
    }

    /**
     * Gets purchasing_um_count
     *
     * @return double
     */
    public function getPurchasingUmCount()
    {
        return $this->container['purchasing_um_count'];
    }

    /**
     * Sets purchasing_um_count
     *
     * @param double $purchasing_um_count <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_PUR_COUNT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setPurchasingUmCount($purchasing_um_count)
    {
        $this->container['purchasing_um_count'] = $purchasing_um_count;

        return $this;
    }

    /**
     * Gets selling_um_count
     *
     * @return double
     */
    public function getSellingUmCount()
    {
        return $this->container['selling_um_count'];
    }

    /**
     * Sets selling_um_count
     *
     * @param double $selling_um_count <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_SEL_COUNT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setSellingUmCount($selling_um_count)
    {
        $this->container['selling_um_count'] = $selling_um_count;

        return $this;
    }

    /**
     * Gets invoice_sequence
     *
     * @return int
     */
    public function getInvoiceSequence()
    {
        return $this->container['invoice_sequence'];
    }

    /**
     * Sets invoice_sequence
     *
     * @param int $invoice_sequence <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_INVOICE_SEQ  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 10  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setInvoiceSequence($invoice_sequence)
    {
        $this->container['invoice_sequence'] = $invoice_sequence;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_CURRENCY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 3  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets fc_amount
     *
     * @return double
     */
    public function getFcAmount()
    {
        return $this->container['fc_amount'];
    }

    /**
     * Sets fc_amount
     *
     * @param double $fc_amount <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_FC_AMOUNT  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 132  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setFcAmount($fc_amount)
    {
        $this->container['fc_amount'] = $fc_amount;

        return $this;
    }

    /**
     * Gets additional_transaction_units
     *
     * @return double
     */
    public function getAdditionalTransactionUnits()
    {
        return $this->container['additional_transaction_units'];
    }

    /**
     * Sets additional_transaction_units
     *
     * @param double $additional_transaction_units <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_ADDL_TRANS_QTY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 154  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAdditionalTransactionUnits($additional_transaction_units)
    {
        $this->container['additional_transaction_units'] = $additional_transaction_units;

        return $this;
    }

    /**
     * Gets asset
     *
     * @return string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param string $asset <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_ASSET_CODE  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 12  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setAsset($asset)
    {
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets time_units
     *
     * @return double
     */
    public function getTimeUnits()
    {
        return $this->container['time_units'];
    }

    /**
     * Sets time_units
     *
     * @param double $time_units <div class=\"tooltip\">Info<span class=\"tooltiptext\"><span class=\"tooltipHeader\">Database column:</span> CC321_TIME_QTY  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Length:</span> 134  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Read Only</span>  <div class=\"TooltipSpace\"></div>  <span class=\"tooltipHeader\">Searchable</span></span></div>
     *
     * @return $this
     */
    public function setTimeUnits($time_units)
    {
        $this->container['time_units'] = $time_units;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


